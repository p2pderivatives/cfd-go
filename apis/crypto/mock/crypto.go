// Code generated by MockGen. DO NOT EDIT.
// Source: crypto.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptoApi is a mock of CryptoApi interface.
type MockCryptoApi struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoApiMockRecorder
}

// MockCryptoApiMockRecorder is the mock recorder for MockCryptoApi.
type MockCryptoApiMockRecorder struct {
	mock *MockCryptoApi
}

// NewMockCryptoApi creates a new mock instance.
func NewMockCryptoApi(ctrl *gomock.Controller) *MockCryptoApi {
	mock := &MockCryptoApi{ctrl: ctrl}
	mock.recorder = &MockCryptoApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoApi) EXPECT() *MockCryptoApiMockRecorder {
	return m.recorder
}

// DecodeBase58 mocks base method.
func (m *MockCryptoApi) DecodeBase58(base58 string, useChecksum bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeBase58", base58, useChecksum)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeBase58 indicates an expected call of DecodeBase58.
func (mr *MockCryptoApiMockRecorder) DecodeBase58(base58, useChecksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeBase58", reflect.TypeOf((*MockCryptoApi)(nil).DecodeBase58), base58, useChecksum)
}

// DecodeBase64 mocks base method.
func (m *MockCryptoApi) DecodeBase64(base64 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeBase64", base64)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeBase64 indicates an expected call of DecodeBase64.
func (mr *MockCryptoApiMockRecorder) DecodeBase64(base64 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeBase64", reflect.TypeOf((*MockCryptoApi)(nil).DecodeBase64), base64)
}

// DecryptAES mocks base method.
func (m *MockCryptoApi) DecryptAES(key, cbcIv, buffer string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptAES", key, cbcIv, buffer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptAES indicates an expected call of DecryptAES.
func (mr *MockCryptoApiMockRecorder) DecryptAES(key, cbcIv, buffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptAES", reflect.TypeOf((*MockCryptoApi)(nil).DecryptAES), key, cbcIv, buffer)
}

// EncodeBase58 mocks base method.
func (m *MockCryptoApi) EncodeBase58(buffer string, useChecksum bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeBase58", buffer, useChecksum)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeBase58 indicates an expected call of EncodeBase58.
func (mr *MockCryptoApiMockRecorder) EncodeBase58(buffer, useChecksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeBase58", reflect.TypeOf((*MockCryptoApi)(nil).EncodeBase58), buffer, useChecksum)
}

// EncodeBase64 mocks base method.
func (m *MockCryptoApi) EncodeBase64(buffer string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeBase64", buffer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeBase64 indicates an expected call of EncodeBase64.
func (mr *MockCryptoApiMockRecorder) EncodeBase64(buffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeBase64", reflect.TypeOf((*MockCryptoApi)(nil).EncodeBase64), buffer)
}

// EncryptAES mocks base method.
func (m *MockCryptoApi) EncryptAES(key, cbcIv, buffer string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptAES", key, cbcIv, buffer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptAES indicates an expected call of EncryptAES.
func (mr *MockCryptoApiMockRecorder) EncryptAES(key, cbcIv, buffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptAES", reflect.TypeOf((*MockCryptoApi)(nil).EncryptAES), key, cbcIv, buffer)
}

// Hash160 mocks base method.
func (m *MockCryptoApi) Hash160(message string, hasText bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash160", message, hasText)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash160 indicates an expected call of Hash160.
func (mr *MockCryptoApiMockRecorder) Hash160(message, hasText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash160", reflect.TypeOf((*MockCryptoApi)(nil).Hash160), message, hasText)
}

// Hash256 mocks base method.
func (m *MockCryptoApi) Hash256(message string, hasText bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash256", message, hasText)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash256 indicates an expected call of Hash256.
func (mr *MockCryptoApiMockRecorder) Hash256(message, hasText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash256", reflect.TypeOf((*MockCryptoApi)(nil).Hash256), message, hasText)
}

// Ripemd160 mocks base method.
func (m *MockCryptoApi) Ripemd160(message string, hasText bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ripemd160", message, hasText)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ripemd160 indicates an expected call of Ripemd160.
func (mr *MockCryptoApiMockRecorder) Ripemd160(message, hasText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ripemd160", reflect.TypeOf((*MockCryptoApi)(nil).Ripemd160), message, hasText)
}

// Sha256 mocks base method.
func (m *MockCryptoApi) Sha256(message string, hasText bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sha256", message, hasText)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sha256 indicates an expected call of Sha256.
func (mr *MockCryptoApiMockRecorder) Sha256(message, hasText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sha256", reflect.TypeOf((*MockCryptoApi)(nil).Sha256), message, hasText)
}
