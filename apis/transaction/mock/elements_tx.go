// Code generated by MockGen. DO NOT EDIT.
// Source: elements_tx.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/p2pderivatives/cfd-go/types"
	gomock "github.com/golang/mock/gomock"
)

// MockConfidentialTxApi is a mock of ConfidentialTxApi interface.
type MockConfidentialTxApi struct {
	ctrl     *gomock.Controller
	recorder *MockConfidentialTxApiMockRecorder
}

// MockConfidentialTxApiMockRecorder is the mock recorder for MockConfidentialTxApi.
type MockConfidentialTxApiMockRecorder struct {
	mock *MockConfidentialTxApi
}

// NewMockConfidentialTxApi creates a new mock instance.
func NewMockConfidentialTxApi(ctrl *gomock.Controller) *MockConfidentialTxApi {
	mock := &MockConfidentialTxApi{ctrl: ctrl}
	mock.recorder = &MockConfidentialTxApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfidentialTxApi) EXPECT() *MockConfidentialTxApiMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockConfidentialTxApi) Add(tx *types.ConfidentialTx, txinList *[]types.InputConfidentialTxIn, txoutList *[]types.InputConfidentialTxOut, pegoutAddressList *[]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx, txinList, txoutList, pegoutAddressList)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockConfidentialTxApiMockRecorder) Add(tx, txinList, txoutList, pegoutAddressList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockConfidentialTxApi)(nil).Add), tx, txinList, txoutList, pegoutAddressList)
}

// AddPubkeySign mocks base method.
func (m *MockConfidentialTxApi) AddPubkeySign(tx *types.ConfidentialTx, outpoint *types.OutPoint, hashType types.HashType, pubkey *types.Pubkey, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPubkeySign", tx, outpoint, hashType, pubkey, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPubkeySign indicates an expected call of AddPubkeySign.
func (mr *MockConfidentialTxApiMockRecorder) AddPubkeySign(tx, outpoint, hashType, pubkey, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPubkeySign", reflect.TypeOf((*MockConfidentialTxApi)(nil).AddPubkeySign), tx, outpoint, hashType, pubkey, signature)
}

// AddPubkeySignByDescriptor mocks base method.
func (m *MockConfidentialTxApi) AddPubkeySignByDescriptor(tx *types.ConfidentialTx, outpoint *types.OutPoint, outputDescriptor *types.Descriptor, signature string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPubkeySignByDescriptor", tx, outpoint, outputDescriptor, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPubkeySignByDescriptor indicates an expected call of AddPubkeySignByDescriptor.
func (mr *MockConfidentialTxApiMockRecorder) AddPubkeySignByDescriptor(tx, outpoint, outputDescriptor, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPubkeySignByDescriptor", reflect.TypeOf((*MockConfidentialTxApi)(nil).AddPubkeySignByDescriptor), tx, outpoint, outputDescriptor, signature)
}

// AddScriptSign mocks base method.
func (m *MockConfidentialTxApi) AddScriptSign(tx *types.ConfidentialTx, outpoint *types.OutPoint, hashType types.HashType, signList []types.SignParameter, redeemScript *types.Script) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddScriptSign", tx, outpoint, hashType, signList, redeemScript)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddScriptSign indicates an expected call of AddScriptSign.
func (mr *MockConfidentialTxApiMockRecorder) AddScriptSign(tx, outpoint, hashType, signList, redeemScript interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScriptSign", reflect.TypeOf((*MockConfidentialTxApi)(nil).AddScriptSign), tx, outpoint, hashType, signList, redeemScript)
}

// AddScriptSignByDescriptor mocks base method.
func (m *MockConfidentialTxApi) AddScriptSignByDescriptor(tx *types.ConfidentialTx, outpoint *types.OutPoint, outputDescriptor *types.Descriptor, signList []types.SignParameter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddScriptSignByDescriptor", tx, outpoint, outputDescriptor, signList)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddScriptSignByDescriptor indicates an expected call of AddScriptSignByDescriptor.
func (mr *MockConfidentialTxApiMockRecorder) AddScriptSignByDescriptor(tx, outpoint, outputDescriptor, signList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScriptSignByDescriptor", reflect.TypeOf((*MockConfidentialTxApi)(nil).AddScriptSignByDescriptor), tx, outpoint, outputDescriptor, signList)
}

// AddTxMultisigSign mocks base method.
func (m *MockConfidentialTxApi) AddTxMultisigSign(tx *types.ConfidentialTx, outpoint *types.OutPoint, hashType types.HashType, signList []types.SignParameter, redeemScript *types.Script) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTxMultisigSign", tx, outpoint, hashType, signList, redeemScript)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTxMultisigSign indicates an expected call of AddTxMultisigSign.
func (mr *MockConfidentialTxApiMockRecorder) AddTxMultisigSign(tx, outpoint, hashType, signList, redeemScript interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTxMultisigSign", reflect.TypeOf((*MockConfidentialTxApi)(nil).AddTxMultisigSign), tx, outpoint, hashType, signList, redeemScript)
}

// AddTxMultisigSignByDescriptor mocks base method.
func (m *MockConfidentialTxApi) AddTxMultisigSignByDescriptor(tx *types.ConfidentialTx, outpoint *types.OutPoint, outputDescriptor *types.Descriptor, signList []types.SignParameter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTxMultisigSignByDescriptor", tx, outpoint, outputDescriptor, signList)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTxMultisigSignByDescriptor indicates an expected call of AddTxMultisigSignByDescriptor.
func (mr *MockConfidentialTxApiMockRecorder) AddTxMultisigSignByDescriptor(tx, outpoint, outputDescriptor, signList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTxMultisigSignByDescriptor", reflect.TypeOf((*MockConfidentialTxApi)(nil).AddTxMultisigSignByDescriptor), tx, outpoint, outputDescriptor, signList)
}

// Blind mocks base method.
func (m *MockConfidentialTxApi) Blind(tx *types.ConfidentialTx, txinList []types.BlindInputData, txoutList *[]types.BlindOutputData, option *types.BlindTxOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Blind", tx, txinList, txoutList, option)
	ret0, _ := ret[0].(error)
	return ret0
}

// Blind indicates an expected call of Blind.
func (mr *MockConfidentialTxApiMockRecorder) Blind(tx, txinList, txoutList, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blind", reflect.TypeOf((*MockConfidentialTxApi)(nil).Blind), tx, txinList, txoutList, option)
}

// Create mocks base method.
func (m *MockConfidentialTxApi) Create(version, locktime uint32, txinList *[]types.InputConfidentialTxIn, txoutList *[]types.InputConfidentialTxOut, pegoutAddressList *[]string) (*types.ConfidentialTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", version, locktime, txinList, txoutList, pegoutAddressList)
	ret0, _ := ret[0].(*types.ConfidentialTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockConfidentialTxApiMockRecorder) Create(version, locktime, txinList, txoutList, pegoutAddressList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockConfidentialTxApi)(nil).Create), version, locktime, txinList, txoutList, pegoutAddressList)
}

// FilterUtxoByTxInList mocks base method.
func (m *MockConfidentialTxApi) FilterUtxoByTxInList(tx *types.ConfidentialTx, utxoList []*types.ElementsUtxoData) ([]*types.ElementsUtxoData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterUtxoByTxInList", tx, utxoList)
	ret0, _ := ret[0].([]*types.ElementsUtxoData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUtxoByTxInList indicates an expected call of FilterUtxoByTxInList.
func (mr *MockConfidentialTxApiMockRecorder) FilterUtxoByTxInList(tx, utxoList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUtxoByTxInList", reflect.TypeOf((*MockConfidentialTxApi)(nil).FilterUtxoByTxInList), tx, utxoList)
}

// GetAll mocks base method.
func (m *MockConfidentialTxApi) GetAll(tx *types.ConfidentialTx, hasWitness bool) (*types.TransactionData, []types.ConfidentialTxIn, []types.ConfidentialTxOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, hasWitness)
	ret0, _ := ret[0].(*types.TransactionData)
	ret1, _ := ret[1].([]types.ConfidentialTxIn)
	ret2, _ := ret[2].([]types.ConfidentialTxOut)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAll indicates an expected call of GetAll.
func (mr *MockConfidentialTxApiMockRecorder) GetAll(tx, hasWitness interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockConfidentialTxApi)(nil).GetAll), tx, hasWitness)
}

// GetAllWithAddress mocks base method.
func (m *MockConfidentialTxApi) GetAllWithAddress(tx *types.ConfidentialTx, hasWitness bool) (*types.TransactionData, []types.ConfidentialTxIn, []types.ConfidentialTxOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithAddress", tx, hasWitness)
	ret0, _ := ret[0].(*types.TransactionData)
	ret1, _ := ret[1].([]types.ConfidentialTxIn)
	ret2, _ := ret[2].([]types.ConfidentialTxOut)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetAllWithAddress indicates an expected call of GetAllWithAddress.
func (mr *MockConfidentialTxApiMockRecorder) GetAllWithAddress(tx, hasWitness interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithAddress", reflect.TypeOf((*MockConfidentialTxApi)(nil).GetAllWithAddress), tx, hasWitness)
}

// GetCommitment mocks base method.
func (m *MockConfidentialTxApi) GetCommitment(amount int64, amountBlindFactor, assetBlindFactor, asset string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitment", amount, amountBlindFactor, assetBlindFactor, asset)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommitment indicates an expected call of GetCommitment.
func (mr *MockConfidentialTxApiMockRecorder) GetCommitment(amount, amountBlindFactor, assetBlindFactor, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitment", reflect.TypeOf((*MockConfidentialTxApi)(nil).GetCommitment), amount, amountBlindFactor, assetBlindFactor, asset)
}

// GetPegoutAddress mocks base method.
func (m *MockConfidentialTxApi) GetPegoutAddress(tx *types.ConfidentialTx, index uint32) (*types.Address, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPegoutAddress", tx, index)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPegoutAddress indicates an expected call of GetPegoutAddress.
func (mr *MockConfidentialTxApiMockRecorder) GetPegoutAddress(tx, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPegoutAddress", reflect.TypeOf((*MockConfidentialTxApi)(nil).GetPegoutAddress), tx, index)
}

// GetSighash mocks base method.
func (m *MockConfidentialTxApi) GetSighash(tx *types.ConfidentialTx, outpoint *types.OutPoint, sighashType types.SigHashType, utxoList []*types.ElementsUtxoData) (*types.ByteData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSighash", tx, outpoint, sighashType, utxoList)
	ret0, _ := ret[0].(*types.ByteData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSighash indicates an expected call of GetSighash.
func (mr *MockConfidentialTxApiMockRecorder) GetSighash(tx, outpoint, sighashType, utxoList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSighash", reflect.TypeOf((*MockConfidentialTxApi)(nil).GetSighash), tx, outpoint, sighashType, utxoList)
}

// GetTxIn mocks base method.
func (m *MockConfidentialTxApi) GetTxIn(txHex string, outpoint *types.OutPoint) (*types.ConfidentialTxIn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxIn", txHex, outpoint)
	ret0, _ := ret[0].(*types.ConfidentialTxIn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxIn indicates an expected call of GetTxIn.
func (mr *MockConfidentialTxApiMockRecorder) GetTxIn(txHex, outpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxIn", reflect.TypeOf((*MockConfidentialTxApi)(nil).GetTxIn), txHex, outpoint)
}

// GetTxid mocks base method.
func (m *MockConfidentialTxApi) GetTxid(tx *types.ConfidentialTx) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxid", tx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTxid indicates an expected call of GetTxid.
func (mr *MockConfidentialTxApiMockRecorder) GetTxid(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxid", reflect.TypeOf((*MockConfidentialTxApi)(nil).GetTxid), tx)
}

// UnblindByTxOut mocks base method.
func (m *MockConfidentialTxApi) UnblindByTxOut(txout *types.ConfidentialTxOut, blindingkey *types.Privkey) (*types.UnblindData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblindByTxOut", txout, blindingkey)
	ret0, _ := ret[0].(*types.UnblindData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblindByTxOut indicates an expected call of UnblindByTxOut.
func (mr *MockConfidentialTxApiMockRecorder) UnblindByTxOut(txout, blindingkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblindByTxOut", reflect.TypeOf((*MockConfidentialTxApi)(nil).UnblindByTxOut), txout, blindingkey)
}

// UnblindTxOut mocks base method.
func (m *MockConfidentialTxApi) UnblindTxOut(tx *types.ConfidentialTx, index uint32, blindingKey *types.Privkey) (*types.ElementsUtxoData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblindTxOut", tx, index, blindingKey)
	ret0, _ := ret[0].(*types.ElementsUtxoData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblindTxOut indicates an expected call of UnblindTxOut.
func (mr *MockConfidentialTxApiMockRecorder) UnblindTxOut(tx, index, blindingKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblindTxOut", reflect.TypeOf((*MockConfidentialTxApi)(nil).UnblindTxOut), tx, index, blindingKey)
}

// VerifyEcSignatureByUtxo mocks base method.
func (m *MockConfidentialTxApi) VerifyEcSignatureByUtxo(tx *types.ConfidentialTx, outpoint *types.OutPoint, utxo *types.ElementsUtxoData, signature *types.SignParameter) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEcSignatureByUtxo", tx, outpoint, utxo, signature)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEcSignatureByUtxo indicates an expected call of VerifyEcSignatureByUtxo.
func (mr *MockConfidentialTxApiMockRecorder) VerifyEcSignatureByUtxo(tx, outpoint, utxo, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEcSignatureByUtxo", reflect.TypeOf((*MockConfidentialTxApi)(nil).VerifyEcSignatureByUtxo), tx, outpoint, utxo, signature)
}

// VerifySign mocks base method.
func (m *MockConfidentialTxApi) VerifySign(tx *types.ConfidentialTx, outpoint *types.OutPoint, txinUtxoList []*types.ElementsUtxoData) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySign", tx, outpoint, txinUtxoList)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifySign indicates an expected call of VerifySign.
func (mr *MockConfidentialTxApiMockRecorder) VerifySign(tx, outpoint, txinUtxoList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySign", reflect.TypeOf((*MockConfidentialTxApi)(nil).VerifySign), tx, outpoint, txinUtxoList)
}
