// Code generated by MockGen. DO NOT EDIT.
// Source: ledger_liquid_lib.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/p2pderivatives/cfd-go/types"
	gomock "github.com/golang/mock/gomock"
)

// MockLedgerLiquidLibApi is a mock of LedgerLiquidLibApi interface.
type MockLedgerLiquidLibApi struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerLiquidLibApiMockRecorder
}

// MockLedgerLiquidLibApiMockRecorder is the mock recorder for MockLedgerLiquidLibApi.
type MockLedgerLiquidLibApiMockRecorder struct {
	mock *MockLedgerLiquidLibApi
}

// NewMockLedgerLiquidLibApi creates a new mock instance.
func NewMockLedgerLiquidLibApi(ctrl *gomock.Controller) *MockLedgerLiquidLibApi {
	mock := &MockLedgerLiquidLibApi{ctrl: ctrl}
	mock.recorder = &MockLedgerLiquidLibApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedgerLiquidLibApi) EXPECT() *MockLedgerLiquidLibApiMockRecorder {
	return m.recorder
}

// GetAuthorizeSignature mocks base method.
func (m *MockLedgerLiquidLibApi) GetAuthorizeSignature(tx *types.ConfidentialTx, key *types.Privkey) (*types.ByteData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizeSignature", tx, key)
	ret0, _ := ret[0].(*types.ByteData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizeSignature indicates an expected call of GetAuthorizeSignature.
func (mr *MockLedgerLiquidLibApiMockRecorder) GetAuthorizeSignature(tx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizeSignature", reflect.TypeOf((*MockLedgerLiquidLibApi)(nil).GetAuthorizeSignature), tx, key)
}
