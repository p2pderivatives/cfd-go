// Code generated by MockGen. DO NOT EDIT.
// Source: address.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/p2pderivatives/cfd-go/types"
	gomock "github.com/golang/mock/gomock"
)

// MockAddressApi is a mock of AddressApi interface.
type MockAddressApi struct {
	ctrl     *gomock.Controller
	recorder *MockAddressApiMockRecorder
}

// MockAddressApiMockRecorder is the mock recorder for MockAddressApi.
type MockAddressApiMockRecorder struct {
	mock *MockAddressApi
}

// NewMockAddressApi creates a new mock instance.
func NewMockAddressApi(ctrl *gomock.Controller) *MockAddressApi {
	mock := &MockAddressApi{ctrl: ctrl}
	mock.recorder = &MockAddressApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressApi) EXPECT() *MockAddressApiMockRecorder {
	return m.recorder
}

// CreateByPubkey mocks base method.
func (m *MockAddressApi) CreateByPubkey(pubkey *types.Pubkey, addressType types.AddressType) (*types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByPubkey", pubkey, addressType)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByPubkey indicates an expected call of CreateByPubkey.
func (mr *MockAddressApiMockRecorder) CreateByPubkey(pubkey, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByPubkey", reflect.TypeOf((*MockAddressApi)(nil).CreateByPubkey), pubkey, addressType)
}

// CreateByScript mocks base method.
func (m *MockAddressApi) CreateByScript(redeemScript *types.Script, addressType types.AddressType) (*types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByScript", redeemScript, addressType)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByScript indicates an expected call of CreateByScript.
func (mr *MockAddressApiMockRecorder) CreateByScript(redeemScript, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByScript", reflect.TypeOf((*MockAddressApi)(nil).CreateByScript), redeemScript, addressType)
}

// CreateMultisigAddress mocks base method.
func (m *MockAddressApi) CreateMultisigAddress(pubkeys *[]types.Pubkey, requireNum uint32, addressType types.AddressType) (*types.Address, *types.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultisigAddress", pubkeys, requireNum, addressType)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(*types.Script)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMultisigAddress indicates an expected call of CreateMultisigAddress.
func (mr *MockAddressApiMockRecorder) CreateMultisigAddress(pubkeys, requireNum, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultisigAddress", reflect.TypeOf((*MockAddressApi)(nil).CreateMultisigAddress), pubkeys, requireNum, addressType)
}

// GetNetworkTypes mocks base method.
func (m *MockAddressApi) GetNetworkTypes() []types.NetworkType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTypes")
	ret0, _ := ret[0].([]types.NetworkType)
	return ret0
}

// GetNetworkTypes indicates an expected call of GetNetworkTypes.
func (mr *MockAddressApiMockRecorder) GetNetworkTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTypes", reflect.TypeOf((*MockAddressApi)(nil).GetNetworkTypes))
}

// ParseAddress mocks base method.
func (m *MockAddressApi) ParseAddress(addressString string) (*types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAddress", addressString)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAddress indicates an expected call of ParseAddress.
func (mr *MockAddressApiMockRecorder) ParseAddress(addressString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAddress", reflect.TypeOf((*MockAddressApi)(nil).ParseAddress), addressString)
}

// MockElementsAddressApi is a mock of ElementsAddressApi interface.
type MockElementsAddressApi struct {
	ctrl     *gomock.Controller
	recorder *MockElementsAddressApiMockRecorder
}

// MockElementsAddressApiMockRecorder is the mock recorder for MockElementsAddressApi.
type MockElementsAddressApiMockRecorder struct {
	mock *MockElementsAddressApi
}

// NewMockElementsAddressApi creates a new mock instance.
func NewMockElementsAddressApi(ctrl *gomock.Controller) *MockElementsAddressApi {
	mock := &MockElementsAddressApi{ctrl: ctrl}
	mock.recorder = &MockElementsAddressApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElementsAddressApi) EXPECT() *MockElementsAddressApiMockRecorder {
	return m.recorder
}

// CreateByPubkey mocks base method.
func (m *MockElementsAddressApi) CreateByPubkey(pubkey *types.Pubkey, addressType types.AddressType) (*types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByPubkey", pubkey, addressType)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByPubkey indicates an expected call of CreateByPubkey.
func (mr *MockElementsAddressApiMockRecorder) CreateByPubkey(pubkey, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByPubkey", reflect.TypeOf((*MockElementsAddressApi)(nil).CreateByPubkey), pubkey, addressType)
}

// CreateByScript mocks base method.
func (m *MockElementsAddressApi) CreateByScript(redeemScript *types.Script, addressType types.AddressType) (*types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByScript", redeemScript, addressType)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByScript indicates an expected call of CreateByScript.
func (mr *MockElementsAddressApiMockRecorder) CreateByScript(redeemScript, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByScript", reflect.TypeOf((*MockElementsAddressApi)(nil).CreateByScript), redeemScript, addressType)
}

// CreateMultisigAddress mocks base method.
func (m *MockElementsAddressApi) CreateMultisigAddress(pubkeys *[]types.Pubkey, requireNum uint32, addressType types.AddressType) (*types.Address, *types.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultisigAddress", pubkeys, requireNum, addressType)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(*types.Script)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMultisigAddress indicates an expected call of CreateMultisigAddress.
func (mr *MockElementsAddressApiMockRecorder) CreateMultisigAddress(pubkeys, requireNum, addressType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultisigAddress", reflect.TypeOf((*MockElementsAddressApi)(nil).CreateMultisigAddress), pubkeys, requireNum, addressType)
}

// GetNetworkTypes mocks base method.
func (m *MockElementsAddressApi) GetNetworkTypes() []types.NetworkType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkTypes")
	ret0, _ := ret[0].([]types.NetworkType)
	return ret0
}

// GetNetworkTypes indicates an expected call of GetNetworkTypes.
func (mr *MockElementsAddressApiMockRecorder) GetNetworkTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkTypes", reflect.TypeOf((*MockElementsAddressApi)(nil).GetNetworkTypes))
}

// GetPeginAddressByPubkey mocks base method.
func (m *MockElementsAddressApi) GetPeginAddressByPubkey(addressType types.AddressType, fedpegScript, pubkey string) (*types.Address, *types.Script, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeginAddressByPubkey", addressType, fedpegScript, pubkey)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(*types.Script)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPeginAddressByPubkey indicates an expected call of GetPeginAddressByPubkey.
func (mr *MockElementsAddressApiMockRecorder) GetPeginAddressByPubkey(addressType, fedpegScript, pubkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeginAddressByPubkey", reflect.TypeOf((*MockElementsAddressApi)(nil).GetPeginAddressByPubkey), addressType, fedpegScript, pubkey)
}

// GetPegoutAddress mocks base method.
func (m *MockElementsAddressApi) GetPegoutAddress(addressType types.AddressType, descriptorOrXpub string, bip32Counter uint32) (*types.Address, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPegoutAddress", addressType, descriptorOrXpub, bip32Counter)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPegoutAddress indicates an expected call of GetPegoutAddress.
func (mr *MockElementsAddressApiMockRecorder) GetPegoutAddress(addressType, descriptorOrXpub, bip32Counter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPegoutAddress", reflect.TypeOf((*MockElementsAddressApi)(nil).GetPegoutAddress), addressType, descriptorOrXpub, bip32Counter)
}

// ParseAddress mocks base method.
func (m *MockElementsAddressApi) ParseAddress(addressString string) (*types.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAddress", addressString)
	ret0, _ := ret[0].(*types.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAddress indicates an expected call of ParseAddress.
func (mr *MockElementsAddressApiMockRecorder) ParseAddress(addressString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAddress", reflect.TypeOf((*MockElementsAddressApi)(nil).ParseAddress), addressString)
}
