/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: swig.i

package cfdgo

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef int intgo;
typedef unsigned int uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#cgo CFLAGS: -I./external/cfd/include -I../cfd/include
#cgo LDFLAGS: -L/usr/local/lib -L${SRCDIR}/build/Release -L${SRCDIR}/build/Debug -lcfd

typedef _gostring_ swig_type_1;
typedef _gostring_ swig_type_2;
typedef _gostring_ swig_type_3;
typedef _gostring_ swig_type_4;
typedef _gostring_ swig_type_5;
typedef _gostring_ swig_type_6;
typedef _gostring_ swig_type_7;
typedef _gostring_ swig_type_8;
typedef _gostring_ swig_type_9;
typedef _gostring_ swig_type_10;
typedef _gostring_ swig_type_11;
typedef _gostring_ swig_type_12;
typedef _gostring_ swig_type_13;
typedef _gostring_ swig_type_14;
typedef _gostring_ swig_type_15;
typedef _gostring_ swig_type_16;
typedef _gostring_ swig_type_17;
typedef _gostring_ swig_type_18;
typedef _gostring_ swig_type_19;
typedef _gostring_ swig_type_20;
typedef _gostring_ swig_type_21;
typedef _gostring_ swig_type_22;
typedef _gostring_ swig_type_23;
typedef _gostring_ swig_type_24;
typedef _gostring_ swig_type_25;
typedef _gostring_ swig_type_26;
typedef _gostring_ swig_type_27;
typedef _gostring_ swig_type_28;
typedef _gostring_ swig_type_29;
typedef _gostring_ swig_type_30;
typedef _gostring_ swig_type_31;
typedef _gostring_ swig_type_32;
typedef _gostring_ swig_type_33;
typedef _gostring_ swig_type_34;
typedef _gostring_ swig_type_35;
typedef _gostring_ swig_type_36;
typedef _gostring_ swig_type_37;
typedef _gostring_ swig_type_38;
typedef _gostring_ swig_type_39;
typedef _gostring_ swig_type_40;
typedef _gostring_ swig_type_41;
typedef _gostring_ swig_type_42;
typedef _gostring_ swig_type_43;
typedef _gostring_ swig_type_44;
typedef _gostring_ swig_type_45;
typedef _gostring_ swig_type_46;
typedef _gostring_ swig_type_47;
typedef _gostring_ swig_type_48;
typedef _gostring_ swig_type_49;
typedef _gostring_ swig_type_50;
typedef _gostring_ swig_type_51;
typedef _gostring_ swig_type_52;
typedef _gostring_ swig_type_53;
typedef _gostring_ swig_type_54;
typedef _gostring_ swig_type_55;
typedef _gostring_ swig_type_56;
typedef _gostring_ swig_type_57;
typedef _gostring_ swig_type_58;
typedef _gostring_ swig_type_59;
typedef _gostring_ swig_type_60;
typedef _gostring_ swig_type_61;
typedef _gostring_ swig_type_62;
typedef _gostring_ swig_type_63;
typedef _gostring_ swig_type_64;
typedef _gostring_ swig_type_65;
typedef _gostring_ swig_type_66;
typedef _gostring_ swig_type_67;
typedef _gostring_ swig_type_68;
typedef _gostring_ swig_type_69;
typedef _gostring_ swig_type_70;
typedef _gostring_ swig_type_71;
typedef _gostring_ swig_type_72;
typedef _gostring_ swig_type_73;
typedef _gostring_ swig_type_74;
typedef _gostring_ swig_type_75;
typedef _gostring_ swig_type_76;
typedef _gostring_ swig_type_77;
typedef _gostring_ swig_type_78;
typedef _gostring_ swig_type_79;
typedef _gostring_ swig_type_80;
typedef _gostring_ swig_type_81;
typedef _gostring_ swig_type_82;
typedef _gostring_ swig_type_83;
typedef _gostring_ swig_type_84;
typedef _gostring_ swig_type_85;
typedef _gostring_ swig_type_86;
typedef _gostring_ swig_type_87;
typedef _gostring_ swig_type_88;
typedef _gostring_ swig_type_89;
typedef _gostring_ swig_type_90;
typedef _gostring_ swig_type_91;
typedef _gostring_ swig_type_92;
extern void _wrap_Swig_free_cfdgo_ad764160e503176a(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_cfdgo_ad764160e503176a(swig_intgo arg1);
extern swig_intgo _wrap_kCfdSuccess_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdUnknownError_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdInternalError_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdMemoryFullError_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdIllegalArgumentError_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdIllegalStateError_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdOutOfRangeError_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdInvalidSettingError_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdConnectionError_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDiskAccessError_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdEnableBitcoin_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdEnableElements_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_CfdGetSupportedFunction_cfdgo_ad764160e503176a(uintptr_t arg1);
extern swig_intgo _wrap_CfdInitialize_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_CfdFinalize_cfdgo_ad764160e503176a(_Bool arg1);
extern swig_intgo _wrap_CfdCreateHandle_cfdgo_ad764160e503176a(swig_voidp arg1);
extern swig_intgo _wrap_CfdCreateSimpleHandle_cfdgo_ad764160e503176a(swig_voidp arg1);
extern swig_intgo _wrap_CfdFreeHandle_cfdgo_ad764160e503176a(uintptr_t arg1);
extern swig_intgo _wrap_CfdFreeBuffer_cfdgo_ad764160e503176a(uintptr_t arg1);
extern swig_intgo _wrap_CfdGetLastErrorCode_cfdgo_ad764160e503176a(uintptr_t arg1);
extern swig_intgo _wrap_CfdGetLastErrorMessage_cfdgo_ad764160e503176a(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_kCfdNetworkMainnet_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdNetworkTestnet_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdNetworkRegtest_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdNetworkLiquidv1_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdNetworkElementsRegtest_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdNetworkCustomChain_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2shAddress_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2pkhAddress_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2wshAddress_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2wpkhAddress_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2shP2wshAddress_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2shP2wpkhAddress_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2sh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2pkh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2wsh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2wpkh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2shP2wsh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdP2shP2wpkh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdSigHashAll_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdSigHashNone_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdSigHashSingle_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptNull_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptSh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptWsh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptPk_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptPkh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptWpkh_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptCombo_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptMulti_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptSortedMulti_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptAddr_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorScriptRaw_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorKeyNull_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorKeyPublic_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorKeyBip32_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdDescriptorKeyBip32Priv_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_CfdCreateAddress_cfdgo_ad764160e503176a(uintptr_t arg1, swig_intgo arg2, swig_type_1 arg3, swig_type_2 arg4, swig_intgo arg5, swig_voidp arg6, swig_voidp arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdInitializeMultisigScript_cfdgo_ad764160e503176a(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdAddMultisigScriptData_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, swig_type_3 arg3);
extern swig_intgo _wrap_CfdFinalizeMultisigScript_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_voidp arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdFreeMultisigScriptHandle_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdParseDescriptor_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_4 arg2, swig_intgo arg3, swig_type_5 arg4, swig_voidp arg5, uintptr_t arg6);
extern swig_intgo _wrap_CfdGetDescriptorData_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6, swig_voidp arg7, swig_voidp arg8, swig_voidp arg9, swig_voidp arg10, swig_voidp arg11, swig_voidp arg12, swig_voidp arg13, swig_voidp arg14, swig_voidp arg15, uintptr_t arg16);
extern swig_intgo _wrap_CfdGetDescriptorMultisigKey_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_voidp arg5, swig_voidp arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdFreeDescriptorHandle_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdGetAddressesFromMultisig_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_6 arg2, swig_intgo arg3, swig_intgo arg4, swig_voidp arg5, uintptr_t arg6);
extern swig_intgo _wrap_CfdGetAddressFromMultisigKey_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdFreeAddressesMultisigHandle_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdGetAddressFromLockingScript_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_7 arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdCreateConfidentialAddress_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_8 arg2, swig_type_9 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdParseConfidentialAddress_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_10 arg2, swig_voidp arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdInitializeConfidentialTx_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdAddConfidentialTxIn_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_11 arg2, swig_type_12 arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdAddConfidentialTxOut_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_13 arg2, swig_type_14 arg3, uintptr_t arg4, swig_type_15 arg5, swig_type_16 arg6, swig_type_17 arg7, swig_type_18 arg8, swig_voidp arg9);
extern swig_intgo _wrap_CfdUpdateConfidentialTxOut_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_19 arg2, uintptr_t arg3, swig_type_20 arg4, uintptr_t arg5, swig_type_21 arg6, swig_type_22 arg7, swig_type_23 arg8, swig_type_24 arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdGetConfidentialTxInfo_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_25 arg2, swig_voidp arg3, swig_voidp arg4, swig_voidp arg5, uintptr_t arg6, uintptr_t arg7, uintptr_t arg8, uintptr_t arg9, uintptr_t arg10);
extern swig_intgo _wrap_CfdGetConfidentialTxIn_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_26 arg2, uintptr_t arg3, swig_voidp arg4, uintptr_t arg5, uintptr_t arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdGetConfidentialTxInWitness_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_27 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdGetTxInIssuanceInfo_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_28 arg2, uintptr_t arg3, swig_voidp arg4, swig_voidp arg5, uintptr_t arg6, swig_voidp arg7, uintptr_t arg8, swig_voidp arg9, swig_voidp arg10, swig_voidp arg11);
extern swig_intgo _wrap_CfdGetConfidentialTxOut_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_29 arg2, uintptr_t arg3, swig_voidp arg4, uintptr_t arg5, swig_voidp arg6, swig_voidp arg7, swig_voidp arg8, swig_voidp arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdGetConfidentialTxInCount_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_30 arg2, uintptr_t arg3);
extern swig_intgo _wrap_CfdGetConfidentialTxInWitnessCount_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_31 arg2, uintptr_t arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdGetConfidentialTxOutCount_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_32 arg2, uintptr_t arg3);
extern swig_intgo _wrap_CfdSetRawReissueAsset_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_33 arg2, swig_type_34 arg3, uintptr_t arg4, uintptr_t arg5, swig_type_35 arg6, swig_type_36 arg7, swig_type_37 arg8, swig_type_38 arg9, swig_voidp arg10, swig_voidp arg11);
extern swig_intgo _wrap_CfdGetIssuanceBlindingKey_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_39 arg2, swig_type_40 arg3, uintptr_t arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdInitializeBlindTx_cfdgo_ad764160e503176a(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdAddBlindTxInData_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, swig_type_41 arg3, uintptr_t arg4, swig_type_42 arg5, swig_type_43 arg6, swig_type_44 arg7, uintptr_t arg8, swig_type_45 arg9, swig_type_46 arg10);
extern swig_intgo _wrap_CfdAddBlindTxOutData_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_type_47 arg4);
extern swig_intgo _wrap_CfdFinalizeBlindTx_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, swig_type_48 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdFreeBlindHandle_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdAddConfidentialTxSign_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_49 arg2, swig_type_50 arg3, uintptr_t arg4, _Bool arg5, swig_type_51 arg6, _Bool arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdAddConfidentialTxDerSign_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_52 arg2, swig_type_53 arg3, uintptr_t arg4, _Bool arg5, swig_type_54 arg6, swig_intgo arg7, _Bool arg8, _Bool arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdFinalizeElementsMultisigSign_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, swig_type_55 arg3, swig_type_56 arg4, uintptr_t arg5, swig_intgo arg6, swig_type_57 arg7, swig_type_58 arg8, _Bool arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdCreateConfidentialSighash_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_59 arg2, swig_type_60 arg3, uintptr_t arg4, swig_intgo arg5, swig_type_61 arg6, swig_type_62 arg7, uintptr_t arg8, swig_type_63 arg9, swig_intgo arg10, _Bool arg11, swig_voidp arg12);
extern swig_intgo _wrap_CfdUnblindTxOut_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_64 arg2, uintptr_t arg3, swig_type_65 arg4, swig_voidp arg5, uintptr_t arg6, swig_voidp arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdUnblindIssuance_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_66 arg2, uintptr_t arg3, swig_type_67 arg4, swig_type_68 arg5, swig_voidp arg6, uintptr_t arg7, swig_voidp arg8, swig_voidp arg9, swig_voidp arg10, uintptr_t arg11, swig_voidp arg12, swig_voidp arg13);
extern swig_intgo _wrap_kCfdExtPrivkey_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdExtPubkey_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_CfdCalculateEcSignature_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_69 arg2, swig_type_70 arg3, swig_type_71 arg4, swig_intgo arg5, _Bool arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdEncodeSignatureByDer_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_72 arg2, swig_intgo arg3, _Bool arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdCreateKeyPair_cfdgo_ad764160e503176a(uintptr_t arg1, _Bool arg2, swig_intgo arg3, swig_voidp arg4, swig_voidp arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdGetPrivkeyFromWif_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_73 arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetPubkeyFromPrivkey_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_74 arg2, swig_type_75 arg3, _Bool arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdCreateExtkeyFromSeed_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_76 arg2, swig_intgo arg3, swig_intgo arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdCreateExtkeyFromParentPath_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_77 arg2, swig_type_78 arg3, swig_intgo arg4, swig_intgo arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdCreateExtPubkey_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_79 arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetPrivkeyFromExtkey_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_80 arg2, swig_intgo arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdGetPubkeyFromExtkey_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_81 arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdParseScript_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_82 arg2, swig_voidp arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdGetScriptItem_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdFreeScriptItemHandle_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdConvertScriptAsmToHex_cfdgo_ad764160e503176a(uintptr_t arg1, swig_type_83 arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdInitializeMultisigScriptSig_cfdgo_ad764160e503176a(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdAddMultisigScriptSigData_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, swig_type_84 arg3, swig_type_85 arg4);
extern swig_intgo _wrap_CfdAddMultisigScriptSigDataToDer_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, swig_type_86 arg3, swig_intgo arg4, _Bool arg5, swig_type_87 arg6);
extern swig_intgo _wrap_CfdFinalizeMultisigScriptSig_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, swig_type_88 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdFreeMultisigScriptSigHandle_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_kCfdSequenceLockTimeDisable_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_kCfdSequenceLockTimeEnableMax_cfdgo_ad764160e503176a(void);
extern swig_intgo _wrap_CfdInitializeMultisigSign_cfdgo_ad764160e503176a(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdAddMultisigSignData_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, swig_type_89 arg3, swig_type_90 arg4);
extern swig_intgo _wrap_CfdAddMultisigSignDataToDer_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2, swig_type_91 arg3, swig_intgo arg4, _Bool arg5, swig_type_92 arg6);
extern swig_intgo _wrap_CfdFreeMultisigSignHandle_cfdgo_ad764160e503176a(uintptr_t arg1, uintptr_t arg2);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"
import "fmt"
import "strings"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_cfdgo_ad764160e503176a(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type Enum_SS_CfdErrorCode int
func _swig_getkCfdSuccess() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdSuccess_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdSuccess Enum_SS_CfdErrorCode = _swig_getkCfdSuccess()
func _swig_getkCfdUnknownError() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdUnknownError_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdUnknownError Enum_SS_CfdErrorCode = _swig_getkCfdUnknownError()
func _swig_getkCfdInternalError() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdInternalError_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdInternalError Enum_SS_CfdErrorCode = _swig_getkCfdInternalError()
func _swig_getkCfdMemoryFullError() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdMemoryFullError_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdMemoryFullError Enum_SS_CfdErrorCode = _swig_getkCfdMemoryFullError()
func _swig_getkCfdIllegalArgumentError() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdIllegalArgumentError_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdIllegalArgumentError Enum_SS_CfdErrorCode = _swig_getkCfdIllegalArgumentError()
func _swig_getkCfdIllegalStateError() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdIllegalStateError_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdIllegalStateError Enum_SS_CfdErrorCode = _swig_getkCfdIllegalStateError()
func _swig_getkCfdOutOfRangeError() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdOutOfRangeError_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdOutOfRangeError Enum_SS_CfdErrorCode = _swig_getkCfdOutOfRangeError()
func _swig_getkCfdInvalidSettingError() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdInvalidSettingError_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdInvalidSettingError Enum_SS_CfdErrorCode = _swig_getkCfdInvalidSettingError()
func _swig_getkCfdConnectionError() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdConnectionError_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdConnectionError Enum_SS_CfdErrorCode = _swig_getkCfdConnectionError()
func _swig_getkCfdDiskAccessError() (_swig_ret Enum_SS_CfdErrorCode) {
	var swig_r Enum_SS_CfdErrorCode
	swig_r = (Enum_SS_CfdErrorCode)(C._wrap_kCfdDiskAccessError_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDiskAccessError Enum_SS_CfdErrorCode = _swig_getkCfdDiskAccessError()
type Enum_SS_CfdLibraryFunction int
func _swig_getkCfdEnableBitcoin() (_swig_ret Enum_SS_CfdLibraryFunction) {
	var swig_r Enum_SS_CfdLibraryFunction
	swig_r = (Enum_SS_CfdLibraryFunction)(C._wrap_kCfdEnableBitcoin_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdEnableBitcoin Enum_SS_CfdLibraryFunction = _swig_getkCfdEnableBitcoin()
func _swig_getkCfdEnableElements() (_swig_ret Enum_SS_CfdLibraryFunction) {
	var swig_r Enum_SS_CfdLibraryFunction
	swig_r = (Enum_SS_CfdLibraryFunction)(C._wrap_kCfdEnableElements_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdEnableElements Enum_SS_CfdLibraryFunction = _swig_getkCfdEnableElements()
func CfdGetSupportedFunction(arg1 Uint64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetSupportedFunction_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func CfdInitialize() (_swig_ret int) {
	var swig_r int
	swig_r = (int)(C._wrap_CfdInitialize_cfdgo_ad764160e503176a())
	return swig_r
}

func CfdFinalize(arg1 bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdFinalize_cfdgo_ad764160e503176a(C._Bool(_swig_i_0)))
	return swig_r
}

func CfdCreateHandle(arg1 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdCreateHandle_cfdgo_ad764160e503176a(C.swig_voidp(_swig_i_0)))
	return swig_r
}

func CfdCreateSimpleHandle(arg1 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdCreateSimpleHandle_cfdgo_ad764160e503176a(C.swig_voidp(_swig_i_0)))
	return swig_r
}

func CfdFreeHandle(arg1 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdFreeHandle_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func CfdFreeBuffer(arg1 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdFreeBuffer_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func CfdGetLastErrorCode(arg1 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdGetLastErrorCode_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func CfdGetLastErrorMessage(arg1 uintptr, arg2 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdGetLastErrorMessage_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

type Enum_SS_CfdNetworkType int
func _swig_getkCfdNetworkMainnet() (_swig_ret Enum_SS_CfdNetworkType) {
	var swig_r Enum_SS_CfdNetworkType
	swig_r = (Enum_SS_CfdNetworkType)(C._wrap_kCfdNetworkMainnet_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdNetworkMainnet Enum_SS_CfdNetworkType = _swig_getkCfdNetworkMainnet()
func _swig_getkCfdNetworkTestnet() (_swig_ret Enum_SS_CfdNetworkType) {
	var swig_r Enum_SS_CfdNetworkType
	swig_r = (Enum_SS_CfdNetworkType)(C._wrap_kCfdNetworkTestnet_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdNetworkTestnet Enum_SS_CfdNetworkType = _swig_getkCfdNetworkTestnet()
func _swig_getkCfdNetworkRegtest() (_swig_ret Enum_SS_CfdNetworkType) {
	var swig_r Enum_SS_CfdNetworkType
	swig_r = (Enum_SS_CfdNetworkType)(C._wrap_kCfdNetworkRegtest_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdNetworkRegtest Enum_SS_CfdNetworkType = _swig_getkCfdNetworkRegtest()
func _swig_getkCfdNetworkLiquidv1() (_swig_ret Enum_SS_CfdNetworkType) {
	var swig_r Enum_SS_CfdNetworkType
	swig_r = (Enum_SS_CfdNetworkType)(C._wrap_kCfdNetworkLiquidv1_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdNetworkLiquidv1 Enum_SS_CfdNetworkType = _swig_getkCfdNetworkLiquidv1()
func _swig_getkCfdNetworkElementsRegtest() (_swig_ret Enum_SS_CfdNetworkType) {
	var swig_r Enum_SS_CfdNetworkType
	swig_r = (Enum_SS_CfdNetworkType)(C._wrap_kCfdNetworkElementsRegtest_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdNetworkElementsRegtest Enum_SS_CfdNetworkType = _swig_getkCfdNetworkElementsRegtest()
func _swig_getkCfdNetworkCustomChain() (_swig_ret Enum_SS_CfdNetworkType) {
	var swig_r Enum_SS_CfdNetworkType
	swig_r = (Enum_SS_CfdNetworkType)(C._wrap_kCfdNetworkCustomChain_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdNetworkCustomChain Enum_SS_CfdNetworkType = _swig_getkCfdNetworkCustomChain()
type Enum_SS_CfdAddressType int
func _swig_getkCfdP2shAddress() (_swig_ret Enum_SS_CfdAddressType) {
	var swig_r Enum_SS_CfdAddressType
	swig_r = (Enum_SS_CfdAddressType)(C._wrap_kCfdP2shAddress_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2shAddress Enum_SS_CfdAddressType = _swig_getkCfdP2shAddress()
func _swig_getkCfdP2pkhAddress() (_swig_ret Enum_SS_CfdAddressType) {
	var swig_r Enum_SS_CfdAddressType
	swig_r = (Enum_SS_CfdAddressType)(C._wrap_kCfdP2pkhAddress_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2pkhAddress Enum_SS_CfdAddressType = _swig_getkCfdP2pkhAddress()
func _swig_getkCfdP2wshAddress() (_swig_ret Enum_SS_CfdAddressType) {
	var swig_r Enum_SS_CfdAddressType
	swig_r = (Enum_SS_CfdAddressType)(C._wrap_kCfdP2wshAddress_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2wshAddress Enum_SS_CfdAddressType = _swig_getkCfdP2wshAddress()
func _swig_getkCfdP2wpkhAddress() (_swig_ret Enum_SS_CfdAddressType) {
	var swig_r Enum_SS_CfdAddressType
	swig_r = (Enum_SS_CfdAddressType)(C._wrap_kCfdP2wpkhAddress_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2wpkhAddress Enum_SS_CfdAddressType = _swig_getkCfdP2wpkhAddress()
func _swig_getkCfdP2shP2wshAddress() (_swig_ret Enum_SS_CfdAddressType) {
	var swig_r Enum_SS_CfdAddressType
	swig_r = (Enum_SS_CfdAddressType)(C._wrap_kCfdP2shP2wshAddress_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2shP2wshAddress Enum_SS_CfdAddressType = _swig_getkCfdP2shP2wshAddress()
func _swig_getkCfdP2shP2wpkhAddress() (_swig_ret Enum_SS_CfdAddressType) {
	var swig_r Enum_SS_CfdAddressType
	swig_r = (Enum_SS_CfdAddressType)(C._wrap_kCfdP2shP2wpkhAddress_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2shP2wpkhAddress Enum_SS_CfdAddressType = _swig_getkCfdP2shP2wpkhAddress()
type Enum_SS_CfdHashType int
func _swig_getkCfdP2sh() (_swig_ret Enum_SS_CfdHashType) {
	var swig_r Enum_SS_CfdHashType
	swig_r = (Enum_SS_CfdHashType)(C._wrap_kCfdP2sh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2sh Enum_SS_CfdHashType = _swig_getkCfdP2sh()
func _swig_getkCfdP2pkh() (_swig_ret Enum_SS_CfdHashType) {
	var swig_r Enum_SS_CfdHashType
	swig_r = (Enum_SS_CfdHashType)(C._wrap_kCfdP2pkh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2pkh Enum_SS_CfdHashType = _swig_getkCfdP2pkh()
func _swig_getkCfdP2wsh() (_swig_ret Enum_SS_CfdHashType) {
	var swig_r Enum_SS_CfdHashType
	swig_r = (Enum_SS_CfdHashType)(C._wrap_kCfdP2wsh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2wsh Enum_SS_CfdHashType = _swig_getkCfdP2wsh()
func _swig_getkCfdP2wpkh() (_swig_ret Enum_SS_CfdHashType) {
	var swig_r Enum_SS_CfdHashType
	swig_r = (Enum_SS_CfdHashType)(C._wrap_kCfdP2wpkh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2wpkh Enum_SS_CfdHashType = _swig_getkCfdP2wpkh()
func _swig_getkCfdP2shP2wsh() (_swig_ret Enum_SS_CfdHashType) {
	var swig_r Enum_SS_CfdHashType
	swig_r = (Enum_SS_CfdHashType)(C._wrap_kCfdP2shP2wsh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2shP2wsh Enum_SS_CfdHashType = _swig_getkCfdP2shP2wsh()
func _swig_getkCfdP2shP2wpkh() (_swig_ret Enum_SS_CfdHashType) {
	var swig_r Enum_SS_CfdHashType
	swig_r = (Enum_SS_CfdHashType)(C._wrap_kCfdP2shP2wpkh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdP2shP2wpkh Enum_SS_CfdHashType = _swig_getkCfdP2shP2wpkh()
type Enum_SS_CfdSighashType int
func _swig_getkCfdSigHashAll() (_swig_ret Enum_SS_CfdSighashType) {
	var swig_r Enum_SS_CfdSighashType
	swig_r = (Enum_SS_CfdSighashType)(C._wrap_kCfdSigHashAll_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdSigHashAll Enum_SS_CfdSighashType = _swig_getkCfdSigHashAll()
func _swig_getkCfdSigHashNone() (_swig_ret Enum_SS_CfdSighashType) {
	var swig_r Enum_SS_CfdSighashType
	swig_r = (Enum_SS_CfdSighashType)(C._wrap_kCfdSigHashNone_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdSigHashNone Enum_SS_CfdSighashType = _swig_getkCfdSigHashNone()
func _swig_getkCfdSigHashSingle() (_swig_ret Enum_SS_CfdSighashType) {
	var swig_r Enum_SS_CfdSighashType
	swig_r = (Enum_SS_CfdSighashType)(C._wrap_kCfdSigHashSingle_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdSigHashSingle Enum_SS_CfdSighashType = _swig_getkCfdSigHashSingle()
type Enum_SS_CfdDescriptorScriptType int
func _swig_getkCfdDescriptorScriptNull() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptNull_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptNull Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptNull()
func _swig_getkCfdDescriptorScriptSh() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptSh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptSh Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptSh()
func _swig_getkCfdDescriptorScriptWsh() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptWsh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptWsh Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptWsh()
func _swig_getkCfdDescriptorScriptPk() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptPk_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptPk Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptPk()
func _swig_getkCfdDescriptorScriptPkh() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptPkh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptPkh Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptPkh()
func _swig_getkCfdDescriptorScriptWpkh() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptWpkh_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptWpkh Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptWpkh()
func _swig_getkCfdDescriptorScriptCombo() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptCombo_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptCombo Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptCombo()
func _swig_getkCfdDescriptorScriptMulti() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptMulti_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptMulti Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptMulti()
func _swig_getkCfdDescriptorScriptSortedMulti() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptSortedMulti_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptSortedMulti Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptSortedMulti()
func _swig_getkCfdDescriptorScriptAddr() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptAddr_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptAddr Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptAddr()
func _swig_getkCfdDescriptorScriptRaw() (_swig_ret Enum_SS_CfdDescriptorScriptType) {
	var swig_r Enum_SS_CfdDescriptorScriptType
	swig_r = (Enum_SS_CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptRaw_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorScriptRaw Enum_SS_CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptRaw()
type Enum_SS_CfdDescriptorKeyType int
func _swig_getkCfdDescriptorKeyNull() (_swig_ret Enum_SS_CfdDescriptorKeyType) {
	var swig_r Enum_SS_CfdDescriptorKeyType
	swig_r = (Enum_SS_CfdDescriptorKeyType)(C._wrap_kCfdDescriptorKeyNull_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorKeyNull Enum_SS_CfdDescriptorKeyType = _swig_getkCfdDescriptorKeyNull()
func _swig_getkCfdDescriptorKeyPublic() (_swig_ret Enum_SS_CfdDescriptorKeyType) {
	var swig_r Enum_SS_CfdDescriptorKeyType
	swig_r = (Enum_SS_CfdDescriptorKeyType)(C._wrap_kCfdDescriptorKeyPublic_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorKeyPublic Enum_SS_CfdDescriptorKeyType = _swig_getkCfdDescriptorKeyPublic()
func _swig_getkCfdDescriptorKeyBip32() (_swig_ret Enum_SS_CfdDescriptorKeyType) {
	var swig_r Enum_SS_CfdDescriptorKeyType
	swig_r = (Enum_SS_CfdDescriptorKeyType)(C._wrap_kCfdDescriptorKeyBip32_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorKeyBip32 Enum_SS_CfdDescriptorKeyType = _swig_getkCfdDescriptorKeyBip32()
func _swig_getkCfdDescriptorKeyBip32Priv() (_swig_ret Enum_SS_CfdDescriptorKeyType) {
	var swig_r Enum_SS_CfdDescriptorKeyType
	swig_r = (Enum_SS_CfdDescriptorKeyType)(C._wrap_kCfdDescriptorKeyBip32Priv_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdDescriptorKeyBip32Priv Enum_SS_CfdDescriptorKeyType = _swig_getkCfdDescriptorKeyBip32Priv()
func CfdCreateAddress(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 int, arg6 *string, arg7 *string, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdCreateAddress_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_1)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_2)(unsafe.Pointer(&_swig_i_3)), C.swig_intgo(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdInitializeMultisigScript(arg1 uintptr, arg2 int, arg3 int, arg4 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdInitializeMultisigScript_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func CfdAddMultisigScriptData(arg1 uintptr, arg2 uintptr, arg3 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdAddMultisigScriptData_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_3)(unsafe.Pointer(&_swig_i_2))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdFinalizeMultisigScript(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string, arg5 *string, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdFinalizeMultisigScript_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func CfdFreeMultisigScriptHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeMultisigScriptHandle_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdParseDescriptor(arg1 uintptr, arg2 string, arg3 int, arg4 string, arg5 *uintptr, arg6 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	swig_r = (int)(C._wrap_CfdParseDescriptor_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_4)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), *(*C.swig_type_5)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdGetDescriptorData(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 Uint32_t, arg5 Uint32_t, arg6 *int, arg7 *string, arg8 *string, arg9 *int, arg10 *string, arg11 *int, arg12 *string, arg13 *string, arg14 *string, arg15 *bool, arg16 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetDescriptorData_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_voidp(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_voidp(_swig_i_12), C.swig_voidp(_swig_i_13), C.swig_voidp(_swig_i_14), C.uintptr_t(_swig_i_15)))
	return swig_r
}

func CfdGetDescriptorMultisigKey(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *int, arg5 *string, arg6 *string, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdGetDescriptorMultisigKey_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6)))
	return swig_r
}

func CfdFreeDescriptorHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeDescriptorHandle_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdGetAddressesFromMultisig(arg1 uintptr, arg2 string, arg3 int, arg4 int, arg5 *uintptr, arg6 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetAddressesFromMultisig_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_6)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_intgo(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetAddressFromMultisigKey(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetAddressFromMultisigKey_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	return swig_r
}

func CfdFreeAddressesMultisigHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeAddressesMultisigHandle_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdGetAddressFromLockingScript(arg1 uintptr, arg2 string, arg3 int, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetAddressFromLockingScript_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_7)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdCreateConfidentialAddress(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdCreateConfidentialAddress_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_8)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_9)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdParseConfidentialAddress(arg1 uintptr, arg2 string, arg3 *string, arg4 *string, arg5 *int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdParseConfidentialAddress_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_10)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdInitializeConfidentialTx(arg1 uintptr, arg2 Uint32_t, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdInitializeConfidentialTx_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func CfdAddConfidentialTxIn(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 Uint32_t, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdAddConfidentialTxIn_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_11)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_12)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdAddConfidentialTxOut(arg1 uintptr, arg2 string, arg3 string, arg4 Int64_t, arg5 string, arg6 string, arg7 string, arg8 string, arg9 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	swig_r = (int)(C._wrap_CfdAddConfidentialTxOut_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_13)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_14)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), *(*C.swig_type_15)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_16)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_17)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_18)(unsafe.Pointer(&_swig_i_7)), C.swig_voidp(_swig_i_8)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdUpdateConfidentialTxOut(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 string, arg5 Int64_t, arg6 string, arg7 string, arg8 string, arg9 string, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdUpdateConfidentialTxOut_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_19)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), *(*C.swig_type_20)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), *(*C.swig_type_21)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_22)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_23)(unsafe.Pointer(&_swig_i_7)), *(*C.swig_type_24)(unsafe.Pointer(&_swig_i_8)), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	return swig_r
}

func CfdGetConfidentialTxInfo(arg1 uintptr, arg2 string, arg3 *string, arg4 *string, arg5 *string, arg6 Uint32_t, arg7 Uint32_t, arg8 Uint32_t, arg9 Uint32_t, arg10 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInfo_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_25)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7), C.uintptr_t(_swig_i_8), C.uintptr_t(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxIn(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 *string, arg5 Uint32_t, arg6 Uint32_t, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdGetConfidentialTxIn_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_26)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxInWitness(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 Uint32_t, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInWitness_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_27)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetTxInIssuanceInfo(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 *string, arg5 *string, arg6 Int64_t, arg7 *string, arg8 Int64_t, arg9 *string, arg10 *string, arg11 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	swig_r = (int)(C._wrap_CfdGetTxInIssuanceInfo_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_28)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6), C.uintptr_t(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_voidp(_swig_i_10)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxOut(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 *string, arg5 Int64_t, arg6 *string, arg7 *string, arg8 *string, arg9 *string, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdGetConfidentialTxOut_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_29)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxInCount(arg1 uintptr, arg2 string, arg3 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInCount_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_30)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxInWitnessCount(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInWitnessCount_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_31)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxOutCount(arg1 uintptr, arg2 string, arg3 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxOutCount_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_32)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdSetRawReissueAsset(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 Int64_t, arg6 string, arg7 string, arg8 string, arg9 string, arg10 *string, arg11 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	swig_r = (int)(C._wrap_CfdSetRawReissueAsset_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_33)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_34)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), *(*C.swig_type_35)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_36)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_37)(unsafe.Pointer(&_swig_i_7)), *(*C.swig_type_38)(unsafe.Pointer(&_swig_i_8)), C.swig_voidp(_swig_i_9), C.swig_voidp(_swig_i_10)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	return swig_r
}

func CfdGetIssuanceBlindingKey(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetIssuanceBlindingKey_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_39)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_40)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdInitializeBlindTx(arg1 uintptr, arg2 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdInitializeBlindTx_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdAddBlindTxInData(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 string, arg6 string, arg7 string, arg8 Int64_t, arg9 string, arg10 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdAddBlindTxInData_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_41)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), *(*C.swig_type_42)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_43)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_44)(unsafe.Pointer(&_swig_i_6)), C.uintptr_t(_swig_i_7), *(*C.swig_type_45)(unsafe.Pointer(&_swig_i_8)), *(*C.swig_type_46)(unsafe.Pointer(&_swig_i_9))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg10
	}
	return swig_r
}

func CfdAddBlindTxOutData(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdAddBlindTxOutData_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), *(*C.swig_type_47)(unsafe.Pointer(&_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdFinalizeBlindTx(arg1 uintptr, arg2 uintptr, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdFinalizeBlindTx_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_48)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdFreeBlindHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeBlindHandle_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdAddConfidentialTxSign(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 bool, arg6 string, arg7 bool, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdAddConfidentialTxSign_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_49)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_50)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C._Bool(_swig_i_4), *(*C.swig_type_51)(unsafe.Pointer(&_swig_i_5)), C._Bool(_swig_i_6), C.swig_voidp(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdAddConfidentialTxDerSign(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 bool, arg6 string, arg7 int, arg8 bool, arg9 bool, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdAddConfidentialTxDerSign_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_52)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_53)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C._Bool(_swig_i_4), *(*C.swig_type_54)(unsafe.Pointer(&_swig_i_5)), C.swig_intgo(_swig_i_6), C._Bool(_swig_i_7), C._Bool(_swig_i_8), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdFinalizeElementsMultisigSign(arg1 uintptr, arg2 uintptr, arg3 string, arg4 string, arg5 Uint32_t, arg6 int, arg7 string, arg8 string, arg9 bool, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdFinalizeElementsMultisigSign_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_55)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_56)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.swig_intgo(_swig_i_5), *(*C.swig_type_57)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_58)(unsafe.Pointer(&_swig_i_7)), C._Bool(_swig_i_8), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdCreateConfidentialSighash(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 int, arg6 string, arg7 string, arg8 Int64_t, arg9 string, arg10 int, arg11 bool, arg12 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	swig_r = (int)(C._wrap_CfdCreateConfidentialSighash_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_59)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_60)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.swig_intgo(_swig_i_4), *(*C.swig_type_61)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_62)(unsafe.Pointer(&_swig_i_6)), C.uintptr_t(_swig_i_7), *(*C.swig_type_63)(unsafe.Pointer(&_swig_i_8)), C.swig_intgo(_swig_i_9), C._Bool(_swig_i_10), C.swig_voidp(_swig_i_11)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	return swig_r
}

func CfdUnblindTxOut(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 string, arg5 *string, arg6 Int64_t, arg7 *string, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdUnblindTxOut_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_64)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), *(*C.swig_type_65)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdUnblindIssuance(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 string, arg5 string, arg6 *string, arg7 Int64_t, arg8 *string, arg9 *string, arg10 *string, arg11 Int64_t, arg12 *string, arg13 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11.Swigcptr()
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	swig_r = (int)(C._wrap_CfdUnblindIssuance_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_66)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), *(*C.swig_type_67)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_68)(unsafe.Pointer(&_swig_i_4)), C.swig_voidp(_swig_i_5), C.uintptr_t(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9), C.uintptr_t(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_voidp(_swig_i_12)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	return swig_r
}

type Enum_SS_CfdExtKeyType int
func _swig_getkCfdExtPrivkey() (_swig_ret Enum_SS_CfdExtKeyType) {
	var swig_r Enum_SS_CfdExtKeyType
	swig_r = (Enum_SS_CfdExtKeyType)(C._wrap_kCfdExtPrivkey_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdExtPrivkey Enum_SS_CfdExtKeyType = _swig_getkCfdExtPrivkey()
func _swig_getkCfdExtPubkey() (_swig_ret Enum_SS_CfdExtKeyType) {
	var swig_r Enum_SS_CfdExtKeyType
	swig_r = (Enum_SS_CfdExtKeyType)(C._wrap_kCfdExtPubkey_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdExtPubkey Enum_SS_CfdExtKeyType = _swig_getkCfdExtPubkey()
func CfdCalculateEcSignature(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 int, arg6 bool, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdCalculateEcSignature_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_69)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_70)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_71)(unsafe.Pointer(&_swig_i_3)), C.swig_intgo(_swig_i_4), C._Bool(_swig_i_5), C.swig_voidp(_swig_i_6)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdEncodeSignatureByDer(arg1 uintptr, arg2 string, arg3 int, arg4 bool, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdEncodeSignatureByDer_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_72)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C._Bool(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdCreateKeyPair(arg1 uintptr, arg2 bool, arg3 int, arg4 *string, arg5 *string, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdCreateKeyPair_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C._Bool(_swig_i_1), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func CfdGetPrivkeyFromWif(arg1 uintptr, arg2 string, arg3 int, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetPrivkeyFromWif_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_73)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetPubkeyFromPrivkey(arg1 uintptr, arg2 string, arg3 string, arg4 bool, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetPubkeyFromPrivkey_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_74)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_75)(unsafe.Pointer(&_swig_i_2)), C._Bool(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdCreateExtkeyFromSeed(arg1 uintptr, arg2 string, arg3 int, arg4 int, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdCreateExtkeyFromSeed_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_76)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_intgo(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdCreateExtkeyFromParentPath(arg1 uintptr, arg2 string, arg3 string, arg4 int, arg5 int, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdCreateExtkeyFromParentPath_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_77)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_78)(unsafe.Pointer(&_swig_i_2)), C.swig_intgo(_swig_i_3), C.swig_intgo(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdCreateExtPubkey(arg1 uintptr, arg2 string, arg3 int, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdCreateExtPubkey_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_79)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetPrivkeyFromExtkey(arg1 uintptr, arg2 string, arg3 int, arg4 *string, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetPrivkeyFromExtkey_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_80)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetPubkeyFromExtkey(arg1 uintptr, arg2 string, arg3 int, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetPubkeyFromExtkey_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_81)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdParseScript(arg1 uintptr, arg2 string, arg3 *uintptr, arg4 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdParseScript_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_82)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.uintptr_t(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetScriptItem(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetScriptItem_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func CfdFreeScriptItemHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeScriptItemHandle_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdConvertScriptAsmToHex(arg1 uintptr, arg2 string, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdConvertScriptAsmToHex_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), *(*C.swig_type_83)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdInitializeMultisigScriptSig(arg1 uintptr, arg2 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdInitializeMultisigScriptSig_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdAddMultisigScriptSigData(arg1 uintptr, arg2 uintptr, arg3 string, arg4 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdAddMultisigScriptSigData_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_84)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_85)(unsafe.Pointer(&_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdAddMultisigScriptSigDataToDer(arg1 uintptr, arg2 uintptr, arg3 string, arg4 int, arg5 bool, arg6 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdAddMultisigScriptSigDataToDer_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_86)(unsafe.Pointer(&_swig_i_2)), C.swig_intgo(_swig_i_3), C._Bool(_swig_i_4), *(*C.swig_type_87)(unsafe.Pointer(&_swig_i_5))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdFinalizeMultisigScriptSig(arg1 uintptr, arg2 uintptr, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdFinalizeMultisigScriptSig_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_88)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdFreeMultisigScriptSigHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeMultisigScriptSigHandle_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

type Enum_SS_CfdSequenceLockTime int
func _swig_getkCfdSequenceLockTimeDisable() (_swig_ret Enum_SS_CfdSequenceLockTime) {
	var swig_r Enum_SS_CfdSequenceLockTime
	swig_r = (Enum_SS_CfdSequenceLockTime)(C._wrap_kCfdSequenceLockTimeDisable_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdSequenceLockTimeDisable Enum_SS_CfdSequenceLockTime = _swig_getkCfdSequenceLockTimeDisable()
func _swig_getkCfdSequenceLockTimeEnableMax() (_swig_ret Enum_SS_CfdSequenceLockTime) {
	var swig_r Enum_SS_CfdSequenceLockTime
	swig_r = (Enum_SS_CfdSequenceLockTime)(C._wrap_kCfdSequenceLockTimeEnableMax_cfdgo_ad764160e503176a())
	return swig_r
}

var KCfdSequenceLockTimeEnableMax Enum_SS_CfdSequenceLockTime = _swig_getkCfdSequenceLockTimeEnableMax()
func CfdInitializeMultisigSign(arg1 uintptr, arg2 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdInitializeMultisigSign_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdAddMultisigSignData(arg1 uintptr, arg2 uintptr, arg3 string, arg4 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdAddMultisigSignData_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_89)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_90)(unsafe.Pointer(&_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdAddMultisigSignDataToDer(arg1 uintptr, arg2 uintptr, arg3 string, arg4 int, arg5 bool, arg6 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdAddMultisigSignDataToDer_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_91)(unsafe.Pointer(&_swig_i_2)), C.swig_intgo(_swig_i_3), C._Bool(_swig_i_4), *(*C.swig_type_92)(unsafe.Pointer(&_swig_i_5))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdFreeMultisigSignHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeMultisigSignHandle_cfdgo_ad764160e503176a(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}


/**
 * Convert return code to golang built-in error struct.
 * param: retCode   return code from cfd
 * return: err      built-in error struct.
 */
func convertCfdErrorCode(retCode int) (err error) {
	switch retCode {
		case (int)(KCfdSuccess):
			return nil
		case (int)(KCfdUnknownError):
			err = fmt.Errorf("CFD Error: Unknown error occered.: errorCode=[%d]", retCode)
		case (int)(KCfdInternalError):
			err = fmt.Errorf("CFD Error: Internal error occered.: errorCode=[%d]", retCode)
		case (int)(KCfdMemoryFullError):
			err = fmt.Errorf("CFD Error: Memory is full.: errorCode=[%d]", retCode)
		case (int)(KCfdIllegalArgumentError):
			err = fmt.Errorf("CFD Error: Illegal argument passed.: errorCode=[%d]", retCode)
		case (int)(KCfdIllegalStateError):
			err = fmt.Errorf("CFD Error: Illegal state api call.: errorCode=[%d]", retCode)
		case (int)(KCfdOutOfRangeError):
			err = fmt.Errorf("CFD Error: Out of range access occered.: errorCode=[%d]", retCode)
		case (int)(KCfdInvalidSettingError):
			err = fmt.Errorf("CFD Error: Invalid setting api call.: errorCode=[%d]", retCode)
		case (int)(KCfdConnectionError):
			err = fmt.Errorf("CFD Error: Connection error occered.: errorCode=[%d]", retCode)
		case (int)(KCfdDiskAccessError):
			err = fmt.Errorf("CFD Error: Disk access error occered.: errorCode=[%d]", retCode)
	}
	return
}

/**
 * Convert handle and error code to Golang built-in error.
 * detail: if handle is nil, return fixed message by the error code.
 * param: retCode   cfd return code.
 * param: handle    cfd handle.
 * return: err      built-in error struct.
 */
func convertCfdError(retCode int, handle uintptr) (err error) {
	if retCode == (int)(KCfdSuccess) {
		return
	}

	var errorMsg string
	if handle ==  uintptr(0) {
		err = convertCfdErrorCode(retCode)
	} else if ret := CfdGetLastErrorMessage(handle, &errorMsg); ret != (int)(KCfdSuccess) {
		err = convertCfdErrorCode(retCode)
	} else {
		err = fmt.Errorf("CFD Error: messaga=[%s], code=[%d]", errorMsg, retCode)
	}
	return
}

/**
 * Get supported function.
 * return: funcFlag    function flag.
 * return: err         error struct
 */
func CfdGoGetSupportedFunction() (funcFlag uint64, err error) {
	funcFlagValue := SwigcptrUint64_t(uintptr(unsafe.Pointer(&funcFlag)))
	ret := CfdGetSupportedFunction(funcFlagValue)
	err = convertCfdError(ret, uintptr(0))
	return funcFlag, err
}

/**
 * Create cfd handle.
 * return: handle      cfd handle. release: CfdGoFreeHandle
 * return: err         error struct
 */
func CfdGoCreateHandle() (handle uintptr, err error) {
	ret := CfdCreateSimpleHandle(&handle)
	err = convertCfdError(ret, handle)
	return handle, err
}

/**
 * Free cfd handle.
 * param: handle       cfd handle
 * return: err         error struct
 */
func CfdGoFreeHandle(handle uintptr) (err error) {
	ret := CfdFreeHandle(handle)
	err = convertCfdError(ret, uintptr(0))
	return
}

/**
 * Get last error message.
 * param: handle   cfd handle
 * return: message     last error message
 * return: err         error
 */
func CfdGoGetLastErrorMessage(handle uintptr) (message string, err error) {
	ret := CfdGetLastErrorMessage(handle, &message)
	// Do not use the Free API as it will be released by Go-GC.
	err = convertCfdError(ret, handle)
	return message, err
}

/**
 * Create Address.
 * param: handle        cfd handle
 * param: hashType      hash type (p2pkh, p2sh, etc...)
 * param: pubkey        pubkey (pubkey hash only)
 * param: redeemScript  redeem script (script hash only)
 * param: networkType   network type
 * return: address                  address string
 * return: lockingScript            locking script
 * return: p2shSegwitLockingScript  p2sh-segwit witness program
 * return: err                      error
 */
func CfdGoCreateAddress(handle uintptr, hashType int, pubkey string, redeemScript string, networkType int) (address string, lockingScript string, p2shSegwitLockingScript string, err error) {
	ret := CfdCreateAddress(handle, hashType, pubkey, redeemScript, networkType, &address, &lockingScript, &p2shSegwitLockingScript)
	err = convertCfdError(ret, handle)
	return address, lockingScript, p2shSegwitLockingScript, err
}

/**
 * Create multisig script and address.
 * param: handle        cfd handle
 * param: networkType   network type
 * param: hashType      hash type (p2sh, p2wsh, etc...)
 * param: pubkeys       pubkey list (max 15 key)
 * param: requireNum    pubkey require signature
 * return: address        address string
 * return: redeemScript   redeem script
 * return: witnessScript  witness script
 * return: err            error
 */
func CfdGoCreateMultisigScript(handle uintptr, networkType int, hashType int, pubkeys []string, requireNum uint32) (address string, redeemScript string, witnessScript string, err error) {
	var multisigHandle uintptr
	ret := CfdInitializeMultisigScript(handle, networkType, hashType, &multisigHandle)
	if ret == (int)(KCfdSuccess) {
		for i := 0; i < len(pubkeys); i++ {
			ret = CfdAddMultisigScriptData(handle, multisigHandle, pubkeys[i])
			if ret != (int)(KCfdSuccess) {
				break
			}
		}

		if ret == (int)(KCfdSuccess) {
			reqNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&requireNum)))
			ret = CfdFinalizeMultisigScript(handle, multisigHandle, reqNumPtr, &address, &redeemScript, &witnessScript)
		}

		freeRet := CfdFreeMultisigScriptHandle(handle, multisigHandle)
		if ret == (int)(KCfdSuccess) {
			ret = freeRet
		}
	}

	if ret == (int)(KCfdSuccess) {
		return address, redeemScript, witnessScript, err
	} else {
		err = convertCfdError(ret, handle)
		return "", "", "", err
	}
}

/**
 * Descriptor data struct.
 */
type CfdDescriptorData struct {
	Depth uint32
	ScriptType int
	LockingScript string
	Address string
	HashType int
	RedeemScript string
	KeyType int
	Pubkey string
	ExtPubkey string
	ExtPrivkey string
	IsMultisig bool
}

/**
 * Descriptor key data struct.
 */
type CfdDescriptorKeyData struct {
	KeyType int
	Pubkey string
	ExtPubkey string
	ExtPrivkey string
}

/**
 * Parse Output Descriptor.
 * param: handle               cfd handle
 * param: descriptor           output descriptor
 * param: networkType          network type
 * param: bip32DerivationPath  derive path
 * return: descriptorDataList  descriptor data struct list
 * return: multisigList        multisig key struct list
 * return: err                 error
 */
func CfdGoParseDescriptor(handle uintptr, descriptor string, networkType int, bip32DerivationPath string) (descriptorDataList []CfdDescriptorData, multisigList []CfdDescriptorKeyData, err error) {
	var descriptorHandle uintptr
	var maxIndex uint32
	maxIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&maxIndex)))
	ret := CfdParseDescriptor(handle, descriptor, networkType, bip32DerivationPath, &descriptorHandle, maxIndexPtr)
	if ret == (int)(KCfdSuccess) {
		var maxMultisigKeyNum uint32
		lastMultisigFlag := false
		keyNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&maxMultisigKeyNum)))
		for i := uint32(0); i <= maxIndex; i++ {
			var data CfdDescriptorData
			var maxNum uint32
			maxNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&maxNum)))
			depthPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&(data.Depth))))
			index := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
			ret = CfdGetDescriptorData(handle, descriptorHandle, index, maxNumPtr,
					depthPtr, &data.ScriptType, &data.LockingScript,
					&data.Address, &data.HashType, &data.RedeemScript,
					&data.KeyType, &data.Pubkey, &data.ExtPubkey, &data.ExtPrivkey,
					&data.IsMultisig, keyNumPtr)
			if ret != (int)(KCfdSuccess) {
				break
			}
			descriptorDataList = append(descriptorDataList, data)
			lastMultisigFlag = data.IsMultisig
		}

		if lastMultisigFlag && (ret == (int)(KCfdSuccess)) {
			for i := uint32(0); i < maxMultisigKeyNum; i++ {
				var keyData CfdDescriptorKeyData
				index := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
				ret = CfdGetDescriptorMultisigKey(handle, descriptorHandle,
						index, &keyData.KeyType, &keyData.Pubkey,
						&keyData.ExtPubkey, &keyData.ExtPrivkey)
				if ret != (int)(KCfdSuccess) {
					break
				}
				multisigList = append(multisigList, keyData)
			}
		}

		freeRet := CfdFreeDescriptorHandle(handle, descriptorHandle)
		if ret == (int)(KCfdSuccess) {
			ret = freeRet
		}
	}
	if ret == (int)(KCfdSuccess) {
		return descriptorDataList, multisigList, err
	} else {
		err = convertCfdError(ret, handle)
		return []CfdDescriptorData{}, []CfdDescriptorKeyData{}, err
	}
}

/**
 * Get multisig pubkeys address.
 * param: handle        cfd handle
 * param: redeemScript  multisig script
 * param: networkType   network type
 * param: hashType      hash type (p2sh, p2wsh, etc...)
 * return: addressList  address list
 * return: pubkeyList   pubkey list
 * return: err          error
 */
func CfdGoGetAddressesFromMultisig(handle uintptr, redeemScript string, networkType int, hashType int) (addressList []string, pubkeyList []string, err error) {
	var multisigHandle uintptr
	var maxKeyNum uint32
	maxKeyNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&maxKeyNum)))

	ret := CfdGetAddressesFromMultisig(handle, redeemScript, networkType,
			hashType, &multisigHandle, maxKeyNumPtr)
	if ret == (int)(KCfdSuccess) {
		for i := uint32(0); i < maxKeyNum; i++ {
			var pubkey string
			var address string
			index := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
			ret = CfdGetAddressFromMultisigKey(handle, multisigHandle,
					index, &address, &pubkey)
			if ret != (int)(KCfdSuccess) {
				break
			}
			addressList = append(addressList, address)
			pubkeyList = append(pubkeyList, pubkey)
		}

		freeRet := CfdFreeAddressesMultisigHandle(handle, multisigHandle)
		if ret == (int)(KCfdSuccess) {
			ret = freeRet
		}
	}
	if ret == (int)(KCfdSuccess) {
		return addressList, pubkeyList, err
	} else {
		err = convertCfdError(ret, handle)
		return []string{}, []string{}, err
	}
}

/**
 * Get address from locking script.
 * param: handle         cfd handle
 * param: lockingScript  locking script
 * param: networkType    network type
 * param: hashType       hash type (p2sh, p2wsh, etc...)
 * return: address       address
 * return: err           error
 */
func CfdGoGetAddressFromLockingScript(handle uintptr, lockingScript string, networkType int) (address string, err error) {
	ret := CfdGetAddressFromLockingScript(handle, lockingScript, networkType, &address)
	err = convertCfdError(ret, handle)
	return address, err
}

/**
 * Get initialized confidential transaction.
 * param: handle        cfd handle
 * param: version       transaction version
 * param: locktime      locktime
 * return: txHex        transaction hex
 * return: err          error
 */
func CfdGoInitializeConfidentialTx(handle uintptr, version uint32, locktime uint32) (txHex string, err error) {
	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&locktime)))
	ret := CfdInitializeConfidentialTx(handle, versionPtr, locktimePtr, &txHex)
	err = convertCfdError(ret, handle)
	return txHex, err
}

/**
 * Add txin to confidential transaction.
 * param: handle        cfd handle
 * param: txHex         transaction hex
 * param: txid          txid
 * param: vout          vout
 * param: sequence      sequence
 * return: outputTxHex  output transaction hex
 * return: err          error
 */
func CfdGoAddConfidentialTxIn(handle uintptr, txHex string, txid string, vout uint32, sequence uint32) (outputTxHex string, err error) {
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	sequencePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sequence)))
	ret := CfdAddConfidentialTxIn(handle, txHex, txid, voutPtr, sequencePtr, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add txout to confidential transaction.
 * param: handle              cfd handle
 * param: txHex               transaction hex
 * param: asset               asset
 * param: satoshiAmount       amount by satoshi
 * param: valueCommitment     amount by commitment bytes.
 * param: address             destination address
 * param: directLockingScript  locking script for direct insert.
 * param: nonce               confidential nonce
 * return: outputTxHex        output transaction hex
 * return: err                error
 */
func CfdGoAddConfidentialTxOut(handle uintptr, txHex string, asset string, satoshiAmount int64, valueCommitment string, address string, directLockingScript string, nonce string) (outputTxHex string, err error) {
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdAddConfidentialTxOut(handle, txHex, asset, satoshiPtr, valueCommitment, address, directLockingScript, nonce, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Update txout of confidential transaction.
 * param: handle              cfd handle
 * param: txHex               transaction hex
 * param: index               txout index
 * param: asset               asset
 * param: satoshiAmount       amount by satoshi
 * param: valueCommitment     amount by commitment bytes.
 * param: address             destination address
 * param: directLockingScript  lockingScript for direct insert.
 * param: nonce               confidential nonce
 * return: outputTxHex        output transaction hex
 * return: err                error
 */
func CfdGoUpdateConfidentialTxOut(handle uintptr, txHex string, index uint32, asset string, satoshiAmount int64, valueCommitment string, address string, directLockingScript string, nonce string) (outputTxHex string, err error) {
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdUpdateConfidentialTxOut(handle, txHex, indexPtr, asset, satoshiPtr, valueCommitment, address, directLockingScript, nonce, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * TxData data struct.
 */
type CfdTxData struct {
	Txid string
	Wtxid string
	WitHash string
	Size uint32
	Vsize uint32
	Weight uint32
	Version uint32
	LockTime uint32
}

/**
 * Get confidential transaction data.
 * param: handle        cfd handle
 * param: txHex         transaction hex
 * return: data         transaction data
 * return: err          error
 */
func CfdGoGetConfidentialTxData(handle uintptr, txHex string) (data CfdTxData, err error) {
	sizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Size)))
	vsizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Vsize)))
	weightPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Weight)))
	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.LockTime)))
	ret := CfdGetConfidentialTxInfo(handle, txHex, &data.Txid, &data.Wtxid, &data.WitHash, sizePtr, vsizePtr, weightPtr, versionPtr, locktimePtr)
	err = convertCfdError(ret, handle)
	return data, err
}

/**
 * Get txin on confidential transaction.
 * param: handle        cfd handle
 * param: txHex         transaction hex
 * param: index         txin index
 * return: txid         txid
 * return: vout         vout
 * return: sequence     sequence
 * return: scriptSig    unlockingScript
 * return: err          error
 */
func CfdGoGetConfidentialTxIn(handle uintptr, txHex string, index uint32) (txid string, vout uint32, sequence uint32, scriptSig string, err error) {
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	sequencePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sequence)))
	ret := CfdGetConfidentialTxIn(handle, txHex, indexPtr, &txid, voutPtr, sequencePtr, &scriptSig)
	err = convertCfdError(ret, handle)
	return txid, vout, sequence, scriptSig, err
}

/**
 * Get witness stack on confidential transaction input.
 * param: handle        cfd handle
 * param: txHex         transaction hex
 * param: txinIndex     txin index
 * param: stackIndex    witness stack index
 * return: stackData    witness stack data
 * return: err          error
 */
func CfdGoGetConfidentialTxInWitness(handle uintptr, txHex string, txinIndex uint32, stackIndex uint32) (stackData string, err error) {
	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	stackIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&stackIndex)))
	ret := CfdGetConfidentialTxInWitness(handle, txHex, txinIndexPtr, stackIndexPtr, &stackData)
	err = convertCfdError(ret, handle)
	return stackData, err
}

/**
 * Get txin issuance on confidential transaction.
 * param: handle            cfd handle
 * param: txHex             transaction hex
 * param: index             txin index
 * return: entropy          blinding asset entropy
 * return: nonce            blinding nonce
 * return: assetAmount      asset amount value
 * return: assetValue       asset commitment value
 * return: tokenAmount      token amount value
 * return: tokenValue       token commitment value
 * return: assetRangeproof  asset rangeproof
 * return: tokenRangeproof  token rangeproof
 * return: err              error
 */
func CfdGoGetTxInIssuanceInfo(handle uintptr, txHex string, index uint32) (entropy string, nonce string, assetAmount int64, assetValue string, tokenAmount int64, tokenValue string, assetRangeproof string, tokenRangeproof string, err error) {
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	assetAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&assetAmount)))
	tokenAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&tokenAmount)))
	ret := CfdGetTxInIssuanceInfo(handle, txHex, indexPtr, &entropy, &nonce, assetAmountPtr, &assetValue, tokenAmountPtr, &tokenValue, &assetRangeproof, &tokenRangeproof)
	err = convertCfdError(ret, handle)
	return entropy, nonce, assetAmount, assetValue, tokenAmount, tokenValue, assetRangeproof, tokenRangeproof, err
}

/**
 * Get txout on confidential transaction.
 * param: handle        cfd handle
 * param: txHex         transaction hex
 * param: index         txin index
 * return: asset            asset
 * return: satoshiAmount    amount by satoshi
 * return: valueCommitment  amount by commitment bytes.
 * return: nonce            confidential nonce
 * return: lockingScript    locking script
 * return: surjectionProof  asset surjection proof.
 * return: rangeproof       amount rangeproof.
 * return: err              error
 */
func CfdGoGetConfidentialTxOut(handle uintptr, txHex string, index uint32) (asset string, satoshiAmount int64, valueCommitment string, nonce string, lockingScript string, surjectionProof string, rangeproof string, err error) {
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdGetConfidentialTxOut(handle, txHex, indexPtr, &asset, satoshiPtr, &valueCommitment, &nonce, &lockingScript, &surjectionProof, &rangeproof)
	err = convertCfdError(ret, handle)
	return asset, satoshiAmount, valueCommitment, nonce, lockingScript, surjectionProof, rangeproof, err
}

/**
 * Get txin count on confidential transaction.
 * param: handle        cfd handle
 * param: txHex         transaction hex
 * return: count        txin count
 * return: err          error
 */
func CfdGoGetConfidentialTxInCount(handle uintptr, txHex string) (count uint32, err error) {
	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetConfidentialTxInCount(handle, txHex, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

/**
 * Get witness stack count on confidential transaction input.
 * param: handle        cfd handle
 * param: txHex         transaction hex
 * param: txinIndex     txin index
 * return: count        witness stack count
 * return: err          error
 */
func CfdGoGetConfidentialTxInWitnessCount(handle uintptr, txHex string, txinIndex uint32) (count uint32, err error) {
	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetConfidentialTxInWitnessCount(handle, txHex, txinIndexPtr, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

/**
 * Get txout count on confidential transaction.
 * param: handle        cfd handle
 * param: txHex         transaction hex
 * return: count        txout count
 * return: err          error
 */
func CfdGoGetConfidentialTxOutCount(handle uintptr, txHex string) (count uint32, err error) {
	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetConfidentialTxOutCount(handle, txHex, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

/**
 * Set reissuance asset to confidential transaction.
 * param: handle               cfd handle
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: assetSatoshiAmount   generate asset amount
 * param: blindingNonce        blinding nonce
 * param: entropy              entropy
 * param: address              destination address
 * param: directLockingScript  txout locking script on direct.
 * return: asset               generate asset
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoSetRawReissueAsset(handle uintptr, txHex string, txid string, vout uint32, assetSatoshiAmount int64, blindingNonce string, entropy string, address string, directLockingScript string) (asset string, outputTxHex string, err error) {
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&assetSatoshiAmount)))
	ret := CfdSetRawReissueAsset(handle, txHex, txid, voutPtr, satoshiPtr, blindingNonce, entropy, address, directLockingScript, &asset, &outputTxHex)
	err = convertCfdError(ret, handle)
	return asset, outputTxHex, err
}

/**
 * Get issuance blinding key.
 * param: handle               cfd handle
 * param: masterBlindingKey    master blinding key
 * param: txid                 utxo txid
 * param: vout                 utxo vout
 * return: blindingKey         issuance blinding key
 * return: err                 error
 */
func CfdGoGetIssuanceBlindingKey(handle uintptr, masterBlindingKey string, txid string, vout uint32) (blindingKey string, err error) {
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdGetIssuanceBlindingKey(handle, masterBlindingKey, txid, voutPtr, &blindingKey)
	err = convertCfdError(ret, handle)
	return blindingKey, err
}

/**
 * Get blind transaction handle.
 * param: handle               cfd handle
 * return: blindHandle         blindTx handle. release: CfdGoFreeBlindHandle
 * return: err                 error
 */
func CfdGoInitializeBlindTx(handle uintptr) (blindHandle uintptr, err error) {
	ret := CfdInitializeBlindTx(handle, &blindHandle)
	err = convertCfdError(ret, handle)
	return blindHandle, err
}

/**
 * Add blind transaction txin data.
 * param: handle               cfd handle
 * param: blindHandle          blindTx handle
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: asset                utxo asset
 * param: assetBlindFactor     utxo asset blind factor
 * param: valueBlindFactor     utxo amount blind factor
 * param: satoshiAmount        utxo amount
 * param: assetKey             issuance asset blinding key
 * param: tokenKey             issuance token blinding key
 * return: err                 error
 */
func CfdGoAddBlindTxInData(handle uintptr, blindHandle uintptr, txid string, vout uint32, asset string, assetBlindFactor string, valueBlindFactor string, satoshiAmount int64, assetKey string, tokenKey string) (err error) {
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdAddBlindTxInData(handle, blindHandle, txid, voutPtr, asset, assetBlindFactor, valueBlindFactor, satoshiPtr, assetKey, tokenKey)
	err = convertCfdError(ret, handle)
	return err
}

/**
 * Add blind transaction txout data.
 * param: handle               cfd handle
 * param: blindHandle          blindTx handle
 * param: index                txout index
 * param: confidentialKey      confidential key
 * return: err                 error
 */
func CfdGoAddBlindTxOutData(handle uintptr, blindHandle uintptr, index uint32, confidentialKey string) (err error) {
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	ret := CfdAddBlindTxOutData(handle, blindHandle, indexPtr, confidentialKey)
	err = convertCfdError(ret, handle)
	return err
}

/**
 * Generate blind transaction.
 * param: handle               cfd handle
 * param: blindHandle          blindTx handle
 * param: txHex                transaction hex
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoFinalizeBlindTx(handle uintptr, blindHandle uintptr, txHex string) (outputTxHex string, err error) {
	ret := CfdFinalizeBlindTx(handle, blindHandle, txHex, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Free blind handle.
 * param: handle               cfd handle
 * param: blindHandle          blindTx handle
 * return: err                 error
 */
func CfdGoFreeBlindHandle(handle uintptr, blindHandle uintptr) (err error) {
	ret := CfdFreeBlindHandle(handle, blindHandle)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Add sign data to confidential transaction.
 * param: handle               cfd handle
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: isWitness            insert sign data to witness stack
 * param: signDataHex          sign data hex
 * param: clearStack           cleanup stack
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddConfidentialTxSign(handle uintptr, txHex string, txid string, vout uint32, isWitness bool, signDataHex string, clearStack bool) (outputTxHex string, err error) {
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdAddConfidentialTxSign(handle, txHex, txid, voutPtr, isWitness, signDataHex, clearStack, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Convert to der encode, and add sign data to confidential transaction.
 * param: handle               cfd handle
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: isWitness            insert sign data to witness stack
 * param: signDataHex          sign data hex
 * param: sighashType          sighash type
 * param: sighashAnyoneCanPay  sighash anyone can pay flag
 * param: clearStack           cleanup stack
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddConfidentialTxDerSign(handle uintptr, txHex string, txid string, vout uint32, isWitness bool, signDataHex string, sighashType int, sighashAnyoneCanPay bool, clearStack bool) (outputTxHex string, err error) {
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdAddConfidentialTxDerSign(handle, txHex, txid, voutPtr, isWitness, signDataHex, sighashType, sighashAnyoneCanPay, clearStack, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add multisig sign data to confidential transaction.
 * param: handle               cfd handle
 * param: multiSignHandle      multisig sign handle
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: hashType             hash type
 * param: witnessScript        witness script (p2wsh, p2sh-p2wsh)
 * param: redeemScript         redeem script (p2sh, p2sh-p2wsh)
 * param: clearStack           cleanup stack
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoFinalizeElementsMultisigSign(handle uintptr, multiSignHandle uintptr, txHex string, txid string, vout uint32, hashType int, witnessScript string, redeemScript string, clearStack bool) (outputTxHex string, err error) {
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdFinalizeElementsMultisigSign(handle, multiSignHandle, txHex, txid, voutPtr, hashType, witnessScript, redeemScript, clearStack, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Create sighash from confidential transaction.
 * param: handle               cfd handle
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: hashType             hash type
 * param: pubkey               pubkey (p2pkh, p2wpkh, p2sh-p2wpkh)
 * param: redeemScript         redeem script (p2Sh, p2wsh, p2sh-p2wsh)
 * param: satoshiAmount        amount by satoshi
 * param: valueCommitment      amount by commitment bytes.
 * param: sighashType          sighash type
 * param: sighashAnyoneCanPay  sighash anyone can pay flag
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoCreateConfidentialSighash(handle uintptr, txHex string, txid string, vout uint32, hashType int, pubkey string, redeemScript string, satoshiAmount int64, valueCommitment string, sighashType int, sighashAnyoneCanPay bool) (sighash string, err error) {
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdCreateConfidentialSighash(handle, txHex, txid, voutPtr, hashType, pubkey, redeemScript, satoshiPtr, valueCommitment, sighashType, sighashAnyoneCanPay, &sighash)
	err = convertCfdError(ret, handle)
	return sighash, err
}

/**
 * Unblind txout on confidential transaction.
 * param: handle               cfd handle
 * param: txHex                transaction hex
 * param: index                txout index
 * param: blindingKey          blinding key
 * return: asset               asset
 * return: satoshiAmount       satoshi amount
 * return: assetBlindFactor    asset blind factor
 * return: valueBlindFactor    amount blind factor
 * return: err                 error
 */
func CfdGoUnblindTxOut(handle uintptr, txHex string, index uint32, blindingKey string) (asset string, satoshiAmount int64, assetBlindFactor string, valueBlindFactor string, err error) {
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdUnblindTxOut(handle, txHex, indexPtr, blindingKey, &asset, satoshiPtr, &assetBlindFactor, &valueBlindFactor)
	err = convertCfdError(ret, handle)
	return asset, satoshiAmount, assetBlindFactor, valueBlindFactor, err
}

/**
 * Unblind txin issuance on confidential transaction.
 * param: handle                  cfd handle
 * param: txHex                   transaction hex
 * param: index                   txin index
 * param: assetBlindingKey        asset blinding key
 * param: tokenBlindingKey        token blinding key
 * return: asset                  asset
 * return: assetAmount            asset amount
 * return: assetBlindFactor       issueAsset asset blind factor
 * return: assetValueBlindFactor  issueAsset value blind factor
 * return: token                  token
 * return: tokenAmount            token amount
 * return: tokenBlindFactor       issueToken asset blind factor
 * return: tokenValueBlindFactor  issueToken value blind factor
 * return: err                 error
 */
func CfdGoUnblindIssuance(handle uintptr, txHex string, index uint32, assetBlindingKey string, tokenBlindingKey string) (asset string, assetAmount int64, assetBlindFactor string, assetValueBlindFactor string, token string, tokenAmount int64, tokenBlindFactor string, tokenValueBlindFactor string, err error) {
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	assetSatoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&assetAmount)))
	tokenSatoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&tokenAmount)))
	ret := CfdUnblindIssuance(handle, txHex, indexPtr, assetBlindingKey, tokenBlindingKey, &asset, assetSatoshiPtr, &assetBlindFactor, &assetValueBlindFactor, &token, tokenSatoshiPtr, &tokenBlindFactor, &tokenValueBlindFactor)
	err = convertCfdError(ret, handle)
	return asset, assetAmount, assetBlindFactor, assetValueBlindFactor, token, tokenAmount, tokenBlindFactor, tokenValueBlindFactor, err
}

/**
 * Generate multisig sign handle.
 * param: handle               cfd handle
 * return: multisigSignHandle  multisig sign handle. release: CfdGoFreeMultisigSignHandle
 * return: err                 error
 */
func CfdGoInitializeMultisigSign(handle uintptr) (multisigSignHandle uintptr, err error) {
	ret := CfdInitializeMultisigSign(handle, &multisigSignHandle)
	err = convertCfdError(ret, handle)
	return multisigSignHandle, err
}

/**
 * Add multisig sign data.
 * param: handle                  cfd handle
 * param: multisigSignHandle      multisig sign handle
 * param: signature            signature
 * param: relatedPubkey        signature related pubkey
 * return: err                 error
 */
func CfdGoAddMultisigSignData(handle uintptr, multisigSignHandle uintptr, signature string, relatedPubkey string) (err error) {
	ret := CfdAddMultisigSignData(handle, multisigSignHandle, signature, relatedPubkey)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Convert to der encode, and add multisig sign data.
 * param: handle               cfd handle
 * param: multisigSignHandle      multisig sign handle
 * param: signature            signature
 * param: sighashType          sighash type
 * param: sighashAnyoneCanPay  sighash anyone can pay flag
 * param: relatedPubkey        signature related pubkey
 * return: err                 error
 */
func CfdGoAddMultisigSignDataToDer(handle uintptr, multisigSignHandle uintptr, signature string, sighashType int, sighashAnyoneCanPay bool, relatedPubkey string) (err error) {
	ret := CfdAddMultisigSignDataToDer(handle, multisigSignHandle, signature, sighashType, sighashAnyoneCanPay, relatedPubkey)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Free multisig sign handle.
 * param: handle               cfd handle
 * param: multisigSignHandle   multisig sign handle
 * return: err                 error
 */
func CfdGoFreeMultisigSignHandle(handle uintptr, multisigSignHandle uintptr) (err error) {
	ret := CfdFreeMultisigSignHandle(handle, multisigSignHandle)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Create confidential address.
 * param: handle                cfd handle
 * param: address               address
 * param: confidentialKey       confidential key
 * return: confidentialAddress  confidential address
 * return: err                  error
 */
func CfdGoCreateConfidentialAddress(handle uintptr, address string, confidentialKey string) (confidentialAddress string, err error) {
	ret := CfdCreateConfidentialAddress(handle, address, confidentialKey, &confidentialAddress)
	err = convertCfdError(ret, handle)
	return confidentialAddress, err
}

/**
 * Get address and confidentialKey from confidentialAddress.
 * param: handle               cfd handle
 * param: confidentialAddress  confidential address
 * return: address             address
 * return: confidentialKey     confidential key
 * return: networkType         network type
 * return: err                 error
 */
func CfdGoParseConfidentialAddress(handle uintptr, confidentialAddress string) (address string, confidentialKey string, networkType int, err error) {
	ret := CfdParseConfidentialAddress(handle, confidentialAddress,
			&address, &confidentialKey, &networkType)
	err = convertCfdError(ret, handle)
	return address, confidentialKey, networkType, err
}

/**
 * Calculate ec-signature from privkey.
 * param: handle               cfd handle
 * param: sighash              signatufe hash
 * param: privkeyHex           privkey hex (Specify either privkeyHex or privkeyWif)
 * param: privkeyWif           privkey WIF (Specify either privkeyHex or privkeyWif)
 * param: wifNetworkType       network type (for privkey WIF)
 * param: hasGrindR            grind-r flag
 * return: signature           signature
 * return: err                 error
 */
func CfdGoCalculateEcSignature(handle uintptr, sighash string, privkeyHex string, privkeyWif string, wifNetworkType int, hasGrindR bool) (signature string, err error) {
	ret := CfdCalculateEcSignature(handle, sighash, privkeyHex, privkeyWif, wifNetworkType, hasGrindR, &signature)
	err = convertCfdError(ret, handle)
	return signature, err
}

/**
 * Encode ec signature by der encoding.
 * param: handle                  cfd handle.
 * param: signature               compact format signature.
 * param: sighashType             sighash type.
 * param: sighash_anyone_can_pay  flag of signing only the current input.
 * return: derSignature   signature encoded by der encodeing.
 * return: err            error
 */
func CfdGoEncodeSignatureByDer(handle uintptr, signature string, sighashType int, sighash_anyone_can_pay bool) (derSignature string, err error) {
	ret := CfdEncodeSignatureByDer(handle, signature, sighashType, sighash_anyone_can_pay, &derSignature)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Create key pair.
 * param: handle          cfd handle.
 * param: isCompress      pubkey compressed.
 * param: networkType     privkey wif network type.
 * return: pubkey         pubkey.
 * return: privkeyHex     privkey hex.
 * return: privkeyWif     privkey wif.
 * return: err            error
 */
func CfdGoCreateKeyPair(handle uintptr, isCompress bool, networkType int) (pubkey string, privkeyHex string, privkeyWif string, err error) {
	ret := CfdCreateKeyPair(handle, isCompress, networkType, &pubkey, &privkeyHex, &privkeyWif)
	err = convertCfdError(ret, handle)
	return pubkey, privkeyHex, privkeyWif, err
}

/**
 * Get privkey from WIF.
 * param: handle          cfd handle.
 * param: privkeyWif      privkey wif.
 * param: networkType     privkey wif network type.
 * return: privkeyHex     privkey hex.
 * return: err            error
 */
func CfdGoGetPrivkeyFromWif(handle uintptr, privkeyWif string, networkType int) (privkeyHex string, err error) {
	ret := CfdGetPrivkeyFromWif(handle, privkeyWif, networkType, &privkeyHex)
	err = convertCfdError(ret, handle)
	return privkeyHex, err
}

/**
 * Get pubkey from privkey.
 * param: handle          cfd handle.
 * param: privkeyHex      privkey hex. (or privkeyWif)
 * param: privkeyWif      privkey wif. (or privkeyHex)
 * param: isCompress      pubkey compressed.
 * return: pubkey         pubkey hex.
 * return: err            error
 */
func CfdGoGetPubkeyFromPrivkey(handle uintptr, privkeyHex string, privkeyWif string, isCompress bool) (pubkey string, err error) {
	ret := CfdGetPubkeyFromPrivkey(handle, privkeyHex, privkeyWif, isCompress, &pubkey)
	err = convertCfdError(ret, handle)
	return pubkey, err
}

/**
 * Create extkey from seed.
 * param: handle          cfd handle.
 * param: seed            seed data(hex).
 * param: networkType     network type.
 * param: keyType         extkey type.
 * return: extkey         extkey.
 * return: err            error
 */
func CfdGoCreateExtkeyFromSeed(handle uintptr, seed string, networkType int, keyType int) (extkey string, err error) {
	ret := CfdCreateExtkeyFromSeed(handle, seed, networkType, keyType, &extkey)
	err = convertCfdError(ret, handle)
	return extkey, err
}

/**
 * Create extkey from parent path.
 * param: handle          cfd handle.
 * param: extkey          parent extkey.
 * param: path            bip32 key path.(ex: 0/0h/0'/0)
 * param: networkType     network type.
 * param: keyType         extkey type.
 * return: childExtkey    child extkey.
 * return: err            error
 */
func CfdGoCreateExtkeyFromParentPath(handle uintptr, extkey string, path string, networkType int, keyType int) (childExtkey string, err error) {
	ret := CfdCreateExtkeyFromParentPath(handle, extkey, path, networkType, keyType, &childExtkey)
	err = convertCfdError(ret, handle)
	return childExtkey, err
}

/**
 * Create extpubkey from extprivkey.
 * param: handle          cfd handle.
 * param: extkey          ext privkey.
 * param: networkType     network type.
 * return: extPubkey      ext pubkey.
 * return: err            error
 */
func CfdGoCreateExtPubkey(handle uintptr, extkey string, networkType int) (extPubkey string, err error) {
	ret := CfdCreateExtPubkey(handle, extkey, networkType, &extPubkey)
	err = convertCfdError(ret, handle)
	return extPubkey, err
}

/**
 * Get privkey from extprivkey.
 * param: handle          cfd handle.
 * param: extkey          ext privkey.
 * param: networkType     network type.
 * return: privkeyHex     privkey hex.
 * return: privkeyWif     privkey wif.
 * return: err            error
 */
func CfdGoGetPrivkeyFromExtkey(handle uintptr, extkey string, networkType int) (privkeyHex string, privkeyWif string, err error) {
	ret := CfdGetPrivkeyFromExtkey(handle, extkey, networkType, &privkeyHex, &privkeyWif)
	err = convertCfdError(ret, handle)
	return privkeyHex, privkeyWif, err
}

/**
 * Get pubkey from extkey.
 * param: handle          cfd handle.
 * param: extkey          extkey.
 * param: networkType     network type.
 * return: pubkey         pubkey.
 * return: err            error
 */
func CfdGoGetPubkeyFromExtkey(handle uintptr, extkey string, networkType int) (pubkey string, err error) {
	ret := CfdGetPubkeyFromExtkey(handle, extkey, networkType, &pubkey)
	err = convertCfdError(ret, handle)
	return pubkey, err
}

/**
 * Parse script items from script.
 * param: handle          cfd handle.
 * param: script          script.
 * return: scriptItems    script items.
 * return: err            error
 */
func CfdGoParseScript(handle uintptr, script string) (scriptItems []string, err error) {
	cfdErrHandle := handle
	if handle == uintptr(0) {
		errHandle, err := CfdGoCreateHandle()
		if err != nil {
			return nil, err
		}
		defer CfdGoFreeHandle(errHandle)
		cfdErrHandle = errHandle
	}
	var scriptItemHandle uintptr
	var itemNum uint32
	itemNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&itemNum)))
	var ret int

	if ret = CfdParseScript(cfdErrHandle, script, &scriptItemHandle, itemNumPtr); ret == (int)(KCfdSuccess) {
		scriptItems = make([]string, 0, itemNum)
		for i := uint32(0); i < itemNum; i++ {
			var item string
			index := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
			if ret = CfdGetScriptItem(cfdErrHandle, scriptItemHandle, index, &item); ret == (int)(KCfdSuccess) {
				scriptItems = append(scriptItems, item)
			}
		}

		if freeRet := CfdFreeScriptItemHandle(cfdErrHandle, scriptItemHandle); ret == (int)(KCfdSuccess) {
			ret = freeRet
		}
	}
	
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, cfdErrHandle)
		scriptItems = nil
	}
	return
}

/**
 * Convert script asm to hex.
 * param: handle          cfd handle.
 * param: scriptAsm       script assembly string.
 * return: script         hex encodeed script.
 * return: err            error
 */
func CfdGoConvertScriptAsmToHex(handle uintptr, scriptAsm string) (script string, err error) {
	if ret := CfdConvertScriptAsmToHex(handle, scriptAsm, &script); ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		script = ""
	}

	return
}

/**
 * Create script from script items.
 * param: handle          cfd handle.
 * param: scriptItems     array of script element string.
 * return: script         hex encoded script.
 * return: err            error
 */
func CfdGoCreateScript(handle uintptr, scriptItems []string) (script string, err error) {
	scriptAsm := strings.Join(scriptItems, " ");
	script, err = CfdGoConvertScriptAsmToHex(handle, scriptAsm);

	return
}

/**
 * Multisig sign data struct.
 */
type CfdMultisigSignData struct {
	Signature string
	IsDerEncode bool
	SighashType int
	SighashAnyoneCanPay bool
	RelatedPubkey string
}

/**
 * Create multisig scriptsig.
 * param: handle          cfd handle.
 * param: signItems       array of multisig sign data struct.
 * param: redeemScript    hex encoded multisig script.
 * return: scriptsig      hex encoded script.
 * return: err            error
 */
func CfdGoCreateMultisigScriptSig(handle uintptr, signItems []CfdMultisigSignData, redeemScript string) (scriptsig string, err error) {
	scriptsig = ""
	cfdErrHandle := handle
	if handle == uintptr(0) {
		errHandle, err := CfdGoCreateHandle()
		if err != nil {
			return "", err
		}
		defer CfdGoFreeHandle(errHandle)
		cfdErrHandle = errHandle
	}

	var multisigHandle uintptr
	ret := CfdInitializeMultisigScriptSig(cfdErrHandle, &multisigHandle)
	if ret != (int)(KCfdSuccess) {
		return "", convertCfdError(ret, cfdErrHandle)
	}
	defer CfdFreeMultisigScriptSigHandle(cfdErrHandle, multisigHandle)

	for i := 0; i < len(signItems); i++ {
		if signItems[i].IsDerEncode {
			ret = CfdAddMultisigScriptSigDataToDer(cfdErrHandle, multisigHandle,
					signItems[i].Signature, signItems[i].SighashType,
					signItems[i].SighashAnyoneCanPay, signItems[i].RelatedPubkey)
		} else {
			ret = CfdAddMultisigScriptSigData(cfdErrHandle, multisigHandle,
					signItems[i].Signature, signItems[i].RelatedPubkey)
		}
		if ret != (int)(KCfdSuccess) {
			break
		}
	}

	if ret == (int)(KCfdSuccess) {
		ret = CfdFinalizeMultisigScriptSig(cfdErrHandle, multisigHandle, redeemScript, &scriptsig)
	}
	return scriptsig, convertCfdError(ret, cfdErrHandle)
}


type SwigcptrUint64_t uintptr
type Uint64_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint64_t) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrUint32_t uintptr
type Uint32_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint32_t) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrInt64_t uintptr
type Int64_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrInt64_t) Swigcptr() uintptr {
	return uintptr(p)
}

