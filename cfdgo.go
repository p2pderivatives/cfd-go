/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: swig.i

package cfdgo

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef int intgo;
typedef unsigned int uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#cgo CXXFLAGS: -I./external/cfd/include -I../cfd/include -I/usr/local/include -I/c/usr/local/include -IC:/usr/local/include
#cgo LDFLAGS: -L/usr/local/lib -L/usr/local/lib64 -L/c/usr/local/lib -LC:/usr/local/lib -L${SRCDIR}/build/Release -L${SRCDIR}/build/Debug -lcfd -lcfdcore -lunivalue -lwally

typedef _gostring_ swig_type_1;
typedef _gostring_ swig_type_2;
typedef _gostring_ swig_type_3;
typedef _gostring_ swig_type_4;
typedef _gostring_ swig_type_5;
typedef _gostring_ swig_type_6;
typedef _gostring_ swig_type_7;
typedef _gostring_ swig_type_8;
typedef _gostring_ swig_type_9;
typedef _gostring_ swig_type_10;
typedef _gostring_ swig_type_11;
typedef _gostring_ swig_type_12;
typedef _gostring_ swig_type_13;
typedef _gostring_ swig_type_14;
typedef _gostring_ swig_type_15;
typedef _gostring_ swig_type_16;
typedef _gostring_ swig_type_17;
typedef _gostring_ swig_type_18;
typedef _gostring_ swig_type_19;
typedef _gostring_ swig_type_20;
typedef _gostring_ swig_type_21;
typedef _gostring_ swig_type_22;
typedef _gostring_ swig_type_23;
typedef _gostring_ swig_type_24;
typedef _gostring_ swig_type_25;
typedef _gostring_ swig_type_26;
typedef _gostring_ swig_type_27;
typedef _gostring_ swig_type_28;
typedef _gostring_ swig_type_29;
typedef _gostring_ swig_type_30;
typedef _gostring_ swig_type_31;
typedef _gostring_ swig_type_32;
typedef _gostring_ swig_type_33;
typedef _gostring_ swig_type_34;
typedef _gostring_ swig_type_35;
typedef _gostring_ swig_type_36;
typedef _gostring_ swig_type_37;
typedef _gostring_ swig_type_38;
typedef _gostring_ swig_type_39;
typedef _gostring_ swig_type_40;
typedef _gostring_ swig_type_41;
typedef _gostring_ swig_type_42;
typedef _gostring_ swig_type_43;
typedef _gostring_ swig_type_44;
typedef _gostring_ swig_type_45;
typedef _gostring_ swig_type_46;
typedef _gostring_ swig_type_47;
typedef _gostring_ swig_type_48;
typedef _gostring_ swig_type_49;
typedef _gostring_ swig_type_50;
typedef _gostring_ swig_type_51;
typedef _gostring_ swig_type_52;
typedef _gostring_ swig_type_53;
typedef _gostring_ swig_type_54;
typedef _gostring_ swig_type_55;
typedef _gostring_ swig_type_56;
typedef _gostring_ swig_type_57;
typedef _gostring_ swig_type_58;
typedef _gostring_ swig_type_59;
typedef _gostring_ swig_type_60;
typedef _gostring_ swig_type_61;
typedef _gostring_ swig_type_62;
typedef _gostring_ swig_type_63;
typedef _gostring_ swig_type_64;
typedef _gostring_ swig_type_65;
typedef _gostring_ swig_type_66;
typedef _gostring_ swig_type_67;
typedef _gostring_ swig_type_68;
typedef _gostring_ swig_type_69;
typedef _gostring_ swig_type_70;
typedef _gostring_ swig_type_71;
typedef _gostring_ swig_type_72;
typedef _gostring_ swig_type_73;
typedef _gostring_ swig_type_74;
typedef _gostring_ swig_type_75;
typedef _gostring_ swig_type_76;
typedef _gostring_ swig_type_77;
typedef _gostring_ swig_type_78;
typedef _gostring_ swig_type_79;
typedef _gostring_ swig_type_80;
typedef _gostring_ swig_type_81;
typedef _gostring_ swig_type_82;
typedef _gostring_ swig_type_83;
typedef _gostring_ swig_type_84;
typedef _gostring_ swig_type_85;
typedef _gostring_ swig_type_86;
typedef _gostring_ swig_type_87;
typedef _gostring_ swig_type_88;
typedef _gostring_ swig_type_89;
typedef _gostring_ swig_type_90;
typedef _gostring_ swig_type_91;
typedef _gostring_ swig_type_92;
typedef _gostring_ swig_type_93;
typedef _gostring_ swig_type_94;
typedef _gostring_ swig_type_95;
typedef _gostring_ swig_type_96;
typedef _gostring_ swig_type_97;
typedef _gostring_ swig_type_98;
typedef _gostring_ swig_type_99;
typedef _gostring_ swig_type_100;
typedef _gostring_ swig_type_101;
typedef _gostring_ swig_type_102;
typedef _gostring_ swig_type_103;
typedef _gostring_ swig_type_104;
typedef _gostring_ swig_type_105;
typedef _gostring_ swig_type_106;
typedef _gostring_ swig_type_107;
typedef _gostring_ swig_type_108;
typedef _gostring_ swig_type_109;
typedef _gostring_ swig_type_110;
typedef _gostring_ swig_type_111;
typedef _gostring_ swig_type_112;
typedef _gostring_ swig_type_113;
typedef _gostring_ swig_type_114;
typedef _gostring_ swig_type_115;
typedef _gostring_ swig_type_116;
typedef _gostring_ swig_type_117;
typedef _gostring_ swig_type_118;
typedef _gostring_ swig_type_119;
typedef _gostring_ swig_type_120;
typedef _gostring_ swig_type_121;
typedef _gostring_ swig_type_122;
typedef _gostring_ swig_type_123;
typedef _gostring_ swig_type_124;
typedef _gostring_ swig_type_125;
typedef _gostring_ swig_type_126;
typedef _gostring_ swig_type_127;
typedef _gostring_ swig_type_128;
typedef _gostring_ swig_type_129;
typedef _gostring_ swig_type_130;
typedef _gostring_ swig_type_131;
typedef _gostring_ swig_type_132;
typedef _gostring_ swig_type_133;
typedef _gostring_ swig_type_134;
typedef _gostring_ swig_type_135;
typedef _gostring_ swig_type_136;
typedef _gostring_ swig_type_137;
typedef _gostring_ swig_type_138;
typedef _gostring_ swig_type_139;
typedef _gostring_ swig_type_140;
typedef _gostring_ swig_type_141;
typedef _gostring_ swig_type_142;
typedef _gostring_ swig_type_143;
typedef _gostring_ swig_type_144;
typedef _gostring_ swig_type_145;
typedef _gostring_ swig_type_146;
typedef _gostring_ swig_type_147;
typedef _gostring_ swig_type_148;
typedef _gostring_ swig_type_149;
typedef _gostring_ swig_type_150;
typedef _gostring_ swig_type_151;
typedef _gostring_ swig_type_152;
typedef _gostring_ swig_type_153;
typedef _gostring_ swig_type_154;
typedef _gostring_ swig_type_155;
typedef _gostring_ swig_type_156;
typedef _gostring_ swig_type_157;
typedef _gostring_ swig_type_158;
typedef _gostring_ swig_type_159;
typedef _gostring_ swig_type_160;
typedef _gostring_ swig_type_161;
typedef _gostring_ swig_type_162;
typedef _gostring_ swig_type_163;
typedef _gostring_ swig_type_164;
typedef _gostring_ swig_type_165;
typedef _gostring_ swig_type_166;
typedef _gostring_ swig_type_167;
typedef _gostring_ swig_type_168;
typedef _gostring_ swig_type_169;
typedef _gostring_ swig_type_170;
typedef _gostring_ swig_type_171;
typedef _gostring_ swig_type_172;
typedef _gostring_ swig_type_173;
typedef _gostring_ swig_type_174;
typedef _gostring_ swig_type_175;
typedef _gostring_ swig_type_176;
typedef _gostring_ swig_type_177;
typedef _gostring_ swig_type_178;
typedef _gostring_ swig_type_179;
typedef _gostring_ swig_type_180;
typedef _gostring_ swig_type_181;
typedef _gostring_ swig_type_182;
typedef _gostring_ swig_type_183;
typedef _gostring_ swig_type_184;
typedef _gostring_ swig_type_185;
typedef _gostring_ swig_type_186;
typedef _gostring_ swig_type_187;
typedef _gostring_ swig_type_188;
typedef _gostring_ swig_type_189;
typedef _gostring_ swig_type_190;
typedef _gostring_ swig_type_191;
typedef _gostring_ swig_type_192;
typedef _gostring_ swig_type_193;
typedef _gostring_ swig_type_194;
typedef _gostring_ swig_type_195;
typedef _gostring_ swig_type_196;
typedef _gostring_ swig_type_197;
typedef _gostring_ swig_type_198;
typedef _gostring_ swig_type_199;
typedef _gostring_ swig_type_200;
typedef _gostring_ swig_type_201;
typedef _gostring_ swig_type_202;
typedef _gostring_ swig_type_203;
typedef _gostring_ swig_type_204;
typedef _gostring_ swig_type_205;
typedef _gostring_ swig_type_206;
typedef _gostring_ swig_type_207;
typedef _gostring_ swig_type_208;
typedef _gostring_ swig_type_209;
typedef _gostring_ swig_type_210;
typedef _gostring_ swig_type_211;
typedef _gostring_ swig_type_212;
typedef _gostring_ swig_type_213;
typedef _gostring_ swig_type_214;
typedef _gostring_ swig_type_215;
typedef _gostring_ swig_type_216;
typedef _gostring_ swig_type_217;
typedef _gostring_ swig_type_218;
typedef _gostring_ swig_type_219;
typedef _gostring_ swig_type_220;
typedef _gostring_ swig_type_221;
typedef _gostring_ swig_type_222;
typedef _gostring_ swig_type_223;
typedef _gostring_ swig_type_224;
typedef _gostring_ swig_type_225;
typedef _gostring_ swig_type_226;
typedef _gostring_ swig_type_227;
typedef _gostring_ swig_type_228;
typedef _gostring_ swig_type_229;
typedef _gostring_ swig_type_230;
typedef _gostring_ swig_type_231;
typedef _gostring_ swig_type_232;
typedef _gostring_ swig_type_233;
typedef _gostring_ swig_type_234;
typedef _gostring_ swig_type_235;
typedef _gostring_ swig_type_236;
typedef _gostring_ swig_type_237;
typedef _gostring_ swig_type_238;
typedef _gostring_ swig_type_239;
typedef _gostring_ swig_type_240;
typedef _gostring_ swig_type_241;
typedef _gostring_ swig_type_242;
typedef _gostring_ swig_type_243;
typedef _gostring_ swig_type_244;
typedef _gostring_ swig_type_245;
typedef _gostring_ swig_type_246;
typedef _gostring_ swig_type_247;
typedef _gostring_ swig_type_248;
typedef _gostring_ swig_type_249;
typedef _gostring_ swig_type_250;
typedef _gostring_ swig_type_251;
typedef _gostring_ swig_type_252;
typedef _gostring_ swig_type_253;
typedef _gostring_ swig_type_254;
typedef _gostring_ swig_type_255;
typedef _gostring_ swig_type_256;
typedef _gostring_ swig_type_257;
typedef _gostring_ swig_type_258;
typedef _gostring_ swig_type_259;
typedef _gostring_ swig_type_260;
typedef _gostring_ swig_type_261;
typedef _gostring_ swig_type_262;
typedef _gostring_ swig_type_263;
typedef _gostring_ swig_type_264;
typedef _gostring_ swig_type_265;
typedef _gostring_ swig_type_266;
typedef _gostring_ swig_type_267;
typedef _gostring_ swig_type_268;
typedef _gostring_ swig_type_269;
typedef _gostring_ swig_type_270;
typedef _gostring_ swig_type_271;
typedef _gostring_ swig_type_272;
typedef _gostring_ swig_type_273;
typedef _gostring_ swig_type_274;
typedef _gostring_ swig_type_275;
typedef _gostring_ swig_type_276;
typedef _gostring_ swig_type_277;
typedef _gostring_ swig_type_278;
typedef _gostring_ swig_type_279;
typedef _gostring_ swig_type_280;
typedef _gostring_ swig_type_281;
typedef _gostring_ swig_type_282;
typedef _gostring_ swig_type_283;
typedef _gostring_ swig_type_284;
typedef _gostring_ swig_type_285;
typedef _gostring_ swig_type_286;
typedef _gostring_ swig_type_287;
typedef _gostring_ swig_type_288;
typedef _gostring_ swig_type_289;
typedef _gostring_ swig_type_290;
typedef _gostring_ swig_type_291;
typedef _gostring_ swig_type_292;
typedef _gostring_ swig_type_293;
typedef _gostring_ swig_type_294;
typedef _gostring_ swig_type_295;
typedef _gostring_ swig_type_296;
typedef _gostring_ swig_type_297;
typedef _gostring_ swig_type_298;
typedef _gostring_ swig_type_299;
extern void _wrap_Swig_free_cfdgo_a091b56f08bd78e6(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_cfdgo_a091b56f08bd78e6(swig_intgo arg1);
extern swig_intgo _wrap_kCfdSuccess_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdUnknownError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdInternalError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdMemoryFullError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdIllegalArgumentError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdIllegalStateError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdOutOfRangeError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdInvalidSettingError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdConnectionError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDiskAccessError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdSignVerificationError_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdEnableBitcoin_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdEnableElements_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_CfdGetSupportedFunction_cfdgo_a091b56f08bd78e6(uintptr_t arg1);
extern swig_intgo _wrap_CfdInitialize_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_CfdFinalize_cfdgo_a091b56f08bd78e6(_Bool arg1);
extern swig_intgo _wrap_CfdCreateHandle_cfdgo_a091b56f08bd78e6(swig_voidp arg1);
extern swig_intgo _wrap_CfdCreateSimpleHandle_cfdgo_a091b56f08bd78e6(swig_voidp arg1);
extern swig_intgo _wrap_CfdCloneHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdCopyErrorState_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdFreeHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1);
extern swig_intgo _wrap_CfdFreeBuffer_cfdgo_a091b56f08bd78e6(uintptr_t arg1);
extern swig_intgo _wrap_CfdGetLastErrorCode_cfdgo_a091b56f08bd78e6(uintptr_t arg1);
extern swig_intgo _wrap_CfdGetLastErrorMessage_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdRequestExecuteJson_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_1 arg2, swig_type_2 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdSerializeByteData_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_3 arg2, swig_voidp arg3);
extern swig_intgo _wrap_kCfdNetworkMainnet_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdNetworkTestnet_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdNetworkRegtest_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdNetworkLiquidv1_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdNetworkElementsRegtest_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdNetworkCustomChain_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2shAddress_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2pkhAddress_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2wshAddress_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2wpkhAddress_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2shP2wshAddress_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2shP2wpkhAddress_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2sh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2pkh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2wsh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2wpkh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2shP2wsh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdP2shP2wpkh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersionNone_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion0_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion1_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion2_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion3_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion4_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion5_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion6_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion7_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion8_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion9_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion10_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion11_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion12_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion13_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion14_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion15_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdWitnessVersion16_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdSigHashAll_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdSigHashNone_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdSigHashSingle_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptNull_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptSh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptWsh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptPk_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptPkh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptWpkh_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptCombo_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptMulti_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptSortedMulti_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptAddr_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorScriptRaw_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorKeyNull_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorKeyPublic_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorKeyBip32_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdDescriptorKeyBip32Priv_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_CfdCreateAddress_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_4 arg3, swig_type_5 arg4, swig_intgo arg5, swig_voidp arg6, swig_voidp arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdInitializeMultisigScript_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdAddMultisigScriptData_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_6 arg3);
extern swig_intgo _wrap_CfdFinalizeMultisigScript_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_voidp arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdFreeMultisigScriptHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdParseDescriptor_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_7 arg2, swig_intgo arg3, swig_type_8 arg4, swig_voidp arg5, uintptr_t arg6);
extern swig_intgo _wrap_CfdGetDescriptorData_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6, swig_voidp arg7, swig_voidp arg8, swig_voidp arg9, swig_voidp arg10, swig_voidp arg11, swig_voidp arg12, swig_voidp arg13, swig_voidp arg14, swig_voidp arg15, uintptr_t arg16, uintptr_t arg17);
extern swig_intgo _wrap_CfdGetDescriptorMultisigKey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_voidp arg5, swig_voidp arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdFreeDescriptorHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdGetDescriptorChecksum_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_9 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetAddressesFromMultisig_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_10 arg2, swig_intgo arg3, swig_intgo arg4, swig_voidp arg5, uintptr_t arg6);
extern swig_intgo _wrap_CfdGetAddressFromMultisigKey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdFreeAddressesMultisigHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdGetAddressFromLockingScript_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_11 arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetAddressInfo_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_12 arg2, swig_voidp arg3, swig_voidp arg4, swig_voidp arg5, swig_voidp arg6, swig_voidp arg7);
extern swig_intgo _wrap_kCfdCoinSelectionExponent_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdCoinSelectionMinimumBits_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdEstimateFeeExponent_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdEstimateFeeMinimumBits_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_CfdInitializeCoinSelection_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_type_13 arg4, uintptr_t arg5, double arg6, double arg7, double arg8, uintptr_t arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdAddCoinSelectionUtxo_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_type_14 arg4, uintptr_t arg5, uintptr_t arg6, swig_type_15 arg7, swig_type_16 arg8);
extern swig_intgo _wrap_CfdAddCoinSelectionUtxoTemplate_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_type_17 arg4, uintptr_t arg5, uintptr_t arg6, swig_type_18 arg7, swig_type_19 arg8, swig_type_20 arg9);
extern swig_intgo _wrap_CfdAddCoinSelectionAmount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, swig_type_21 arg5);
extern swig_intgo _wrap_CfdSetOptionCoinSelection_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, uintptr_t arg4, double arg5, _Bool arg6);
extern swig_intgo _wrap_CfdFinalizeCoinSelection_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern swig_intgo _wrap_CfdGetSelectedCoinIndex_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdGetSelectedCoinAssetAmount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdFreeCoinSelectionHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdInitializeEstimateFee_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_voidp arg2, _Bool arg3);
extern swig_intgo _wrap_CfdAddTxInForEstimateFee_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_22 arg3, uintptr_t arg4, swig_type_23 arg5, swig_type_24 arg6, _Bool arg7, _Bool arg8, _Bool arg9, uintptr_t arg10, swig_type_25 arg11);
extern swig_intgo _wrap_CfdAddTxInTemplateForEstimateFee_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_26 arg3, uintptr_t arg4, swig_type_27 arg5, swig_type_28 arg6, _Bool arg7, _Bool arg8, _Bool arg9, uintptr_t arg10, swig_type_29 arg11, swig_type_30 arg12);
extern swig_intgo _wrap_CfdSetOptionEstimateFee_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, uintptr_t arg4, double arg5, _Bool arg6);
extern swig_intgo _wrap_CfdFinalizeEstimateFee_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_31 arg3, swig_type_32 arg4, uintptr_t arg5, uintptr_t arg6, _Bool arg7, double arg8);
extern swig_intgo _wrap_CfdFreeEstimateFeeHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdCreateConfidentialAddress_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_33 arg2, swig_type_34 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdParseConfidentialAddress_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_35 arg2, swig_voidp arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_intgo _wrap_kCfdBlindOptionMinimumRangeValue_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdBlindOptionExponent_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdBlindOptionMinimumBits_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_CfdInitializeConfidentialTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdAddConfidentialTxIn_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_36 arg2, swig_type_37 arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdAddConfidentialTxOut_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_38 arg2, swig_type_39 arg3, uintptr_t arg4, swig_type_40 arg5, swig_type_41 arg6, swig_type_42 arg7, swig_type_43 arg8, swig_voidp arg9);
extern swig_intgo _wrap_CfdUpdateConfidentialTxOut_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_44 arg2, uintptr_t arg3, swig_type_45 arg4, uintptr_t arg5, swig_type_46 arg6, swig_type_47 arg7, swig_type_48 arg8, swig_type_49 arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdGetConfidentialTxInfo_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_50 arg2, swig_voidp arg3, swig_voidp arg4, swig_voidp arg5, uintptr_t arg6, uintptr_t arg7, uintptr_t arg8, uintptr_t arg9, uintptr_t arg10);
extern swig_intgo _wrap_CfdGetConfidentialTxIn_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_51 arg2, uintptr_t arg3, swig_voidp arg4, uintptr_t arg5, uintptr_t arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdGetConfidentialTxInWitness_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_52 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdGetConfidentialTxInPeginWitness_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_53 arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdGetTxInIssuanceInfo_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_54 arg2, uintptr_t arg3, swig_voidp arg4, swig_voidp arg5, uintptr_t arg6, swig_voidp arg7, uintptr_t arg8, swig_voidp arg9, swig_voidp arg10, swig_voidp arg11);
extern swig_intgo _wrap_CfdGetConfidentialTxOut_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_55 arg2, uintptr_t arg3, swig_voidp arg4, uintptr_t arg5, swig_voidp arg6, swig_voidp arg7, swig_voidp arg8, swig_voidp arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdGetConfidentialTxInCount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_56 arg2, uintptr_t arg3);
extern swig_intgo _wrap_CfdGetConfidentialTxInWitnessCount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_57 arg2, uintptr_t arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdGetConfidentialTxInPeginWitnessCount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_58 arg2, uintptr_t arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdGetConfidentialTxOutCount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_59 arg2, uintptr_t arg3);
extern swig_intgo _wrap_CfdGetConfidentialTxInIndex_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_60 arg2, swig_type_61 arg3, uintptr_t arg4, uintptr_t arg5);
extern swig_intgo _wrap_CfdGetConfidentialTxOutIndex_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_62 arg2, swig_type_63 arg3, swig_type_64 arg4, uintptr_t arg5);
extern swig_intgo _wrap_CfdGetConfidentialTxInfoByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3, swig_voidp arg4, swig_voidp arg5, uintptr_t arg6, uintptr_t arg7, uintptr_t arg8, uintptr_t arg9, uintptr_t arg10);
extern swig_intgo _wrap_CfdGetTxInIssuanceInfoByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, swig_voidp arg5, uintptr_t arg6, swig_voidp arg7, uintptr_t arg8, swig_voidp arg9, swig_voidp arg10, swig_voidp arg11);
extern swig_intgo _wrap_CfdGetConfidentialTxOutSimpleByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, uintptr_t arg5, swig_voidp arg6, swig_voidp arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdGetConfidentialTxOutByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, uintptr_t arg5, swig_voidp arg6, swig_voidp arg7, swig_voidp arg8, swig_voidp arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdSetRawReissueAsset_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_65 arg2, swig_type_66 arg3, uintptr_t arg4, uintptr_t arg5, swig_type_67 arg6, swig_type_68 arg7, swig_type_69 arg8, swig_type_70 arg9, swig_voidp arg10, swig_voidp arg11);
extern swig_intgo _wrap_CfdGetIssuanceBlindingKey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_71 arg2, swig_type_72 arg3, uintptr_t arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdGetDefaultBlindingKey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_73 arg2, swig_type_74 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdInitializeBlindTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdSetBlindTxOption_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdAddBlindTxInData_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_75 arg3, uintptr_t arg4, swig_type_76 arg5, swig_type_77 arg6, swig_type_78 arg7, uintptr_t arg8, swig_type_79 arg9, swig_type_80 arg10);
extern swig_intgo _wrap_CfdAddBlindTxOutData_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_type_81 arg4);
extern swig_intgo _wrap_CfdAddBlindTxOutByAddress_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_82 arg3);
extern swig_intgo _wrap_CfdFinalizeBlindTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_83 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdFreeBlindHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdAddConfidentialTxSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_84 arg2, swig_type_85 arg3, uintptr_t arg4, _Bool arg5, swig_type_86 arg6, _Bool arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdAddConfidentialTxDerSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_87 arg2, swig_type_88 arg3, uintptr_t arg4, _Bool arg5, swig_type_89 arg6, swig_intgo arg7, _Bool arg8, _Bool arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdFinalizeElementsMultisigSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_90 arg3, swig_type_91 arg4, uintptr_t arg5, swig_intgo arg6, swig_type_92 arg7, swig_type_93 arg8, _Bool arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdAddConfidentialTxSignWithPrivkeySimple_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_94 arg2, swig_type_95 arg3, uintptr_t arg4, swig_intgo arg5, swig_type_96 arg6, swig_type_97 arg7, uintptr_t arg8, swig_type_98 arg9, swig_intgo arg10, _Bool arg11, _Bool arg12, swig_voidp arg13);
extern swig_intgo _wrap_CfdCreateConfidentialSighash_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_99 arg2, swig_type_100 arg3, uintptr_t arg4, swig_intgo arg5, swig_type_101 arg6, swig_type_102 arg7, uintptr_t arg8, swig_type_103 arg9, swig_intgo arg10, _Bool arg11, swig_voidp arg12);
extern swig_intgo _wrap_CfdUnblindTxOut_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_104 arg2, uintptr_t arg3, swig_type_105 arg4, swig_voidp arg5, uintptr_t arg6, swig_voidp arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdUnblindIssuance_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_106 arg2, uintptr_t arg3, swig_type_107 arg4, swig_type_108 arg5, swig_voidp arg6, uintptr_t arg7, swig_voidp arg8, swig_voidp arg9, swig_voidp arg10, uintptr_t arg11, swig_voidp arg12, swig_voidp arg13);
extern swig_intgo _wrap_CfdVerifyConfidentialTxSignature_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_109 arg2, swig_type_110 arg3, swig_type_111 arg4, swig_type_112 arg5, swig_type_113 arg6, uintptr_t arg7, swig_intgo arg8, _Bool arg9, uintptr_t arg10, swig_type_114 arg11, swig_intgo arg12);
extern swig_intgo _wrap_CfdVerifyConfidentialTxSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_115 arg2, swig_type_116 arg3, uintptr_t arg4, swig_type_117 arg5, swig_intgo arg6, swig_type_118 arg7, uintptr_t arg8, swig_type_119 arg9);
extern swig_intgo _wrap_CfdGetConfidentialValueHex_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, _Bool arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetAssetCommitment_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_120 arg2, swig_type_121 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetValueCommitment_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_122 arg3, swig_type_123 arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdAddConfidentialTxOutput_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_type_124 arg4, swig_type_125 arg5, swig_type_126 arg6, swig_type_127 arg7);
extern swig_intgo _wrap_kCfdExtPrivkey_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdExtPubkey_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_CfdCalculateEcSignature_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_128 arg2, swig_type_129 arg3, swig_type_130 arg4, swig_intgo arg5, _Bool arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdVerifyEcSignature_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_131 arg2, swig_type_132 arg3, swig_type_133 arg4);
extern swig_intgo _wrap_CfdSignEcdsaAdaptor_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_134 arg2, swig_type_135 arg3, swig_type_136 arg4, swig_voidp arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdAdaptEcdsaAdaptor_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_137 arg2, swig_type_138 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdExtractEcdsaAdaptorSecret_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_139 arg2, swig_type_140 arg3, swig_type_141 arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdVerifyEcdsaAdaptor_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_142 arg2, swig_type_143 arg3, swig_type_144 arg4, swig_type_145 arg5, swig_type_146 arg6);
extern swig_intgo _wrap_CfdGetSchnorrPubkeyFromPrivkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_147 arg2, swig_voidp arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetSchnorrPubkeyFromPubkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_148 arg2, swig_voidp arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdSchnorrPubkeyTweakAdd_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_149 arg2, swig_type_150 arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdSchnorrKeyPairTweakAdd_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_151 arg2, swig_type_152 arg3, swig_voidp arg4, swig_voidp arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdCheckTweakAddFromSchnorrPubkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_153 arg2, _Bool arg3, swig_type_154 arg4, swig_type_155 arg5);
extern swig_intgo _wrap_CfdSignSchnorr_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_156 arg2, swig_type_157 arg3, swig_type_158 arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdSignSchnorrWithNonce_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_159 arg2, swig_type_160 arg3, swig_type_161 arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdComputeSchnorrSigPoint_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_162 arg2, swig_type_163 arg3, swig_type_164 arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdVerifySchnorr_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_165 arg2, swig_type_166 arg3, swig_type_167 arg4);
extern swig_intgo _wrap_CfdSplitSchnorrSignature_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_168 arg2, swig_voidp arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdEncodeSignatureByDer_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_169 arg2, swig_intgo arg3, _Bool arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdDecodeSignatureFromDer_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_170 arg2, swig_voidp arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdNormalizeSignature_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_171 arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdCreateKeyPair_cfdgo_a091b56f08bd78e6(uintptr_t arg1, _Bool arg2, swig_intgo arg3, swig_voidp arg4, swig_voidp arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdGetPrivkeyFromWif_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_172 arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetPrivkeyWif_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_173 arg2, swig_intgo arg3, _Bool arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdParsePrivkeyWif_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_174 arg2, swig_voidp arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdGetPubkeyFromPrivkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_175 arg2, swig_type_176 arg3, _Bool arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdCompressPubkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_177 arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdUncompressPubkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_178 arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdInitializeCombinePubkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdAddCombinePubkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_179 arg3);
extern swig_intgo _wrap_CfdFinalizeCombinePubkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdFreeCombinePubkeyHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdPubkeyTweakAdd_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_180 arg2, swig_type_181 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdPubkeyTweakMul_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_182 arg2, swig_type_183 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdNegatePubkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_184 arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdPrivkeyTweakAdd_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_185 arg2, swig_type_186 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdPrivkeyTweakMul_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_187 arg2, swig_type_188 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdNegatePrivkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_189 arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdCreateExtkeyFromSeed_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_190 arg2, swig_intgo arg3, swig_intgo arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdCreateExtkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_intgo arg3, swig_type_191 arg4, swig_type_192 arg5, swig_type_193 arg6, swig_type_194 arg7, char arg8, uintptr_t arg9, swig_voidp arg10);
extern swig_intgo _wrap_CfdCreateExtkeyFromParent_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_195 arg2, uintptr_t arg3, _Bool arg4, swig_intgo arg5, swig_intgo arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdCreateExtkeyFromParentPath_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_196 arg2, swig_type_197 arg3, swig_intgo arg4, swig_intgo arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdCreateExtPubkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_198 arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetPrivkeyFromExtkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_199 arg2, swig_intgo arg3, swig_voidp arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdGetPubkeyFromExtkey_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_200 arg2, swig_intgo arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdGetParentExtkeyPathData_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_201 arg2, swig_type_202 arg3, swig_intgo arg4, swig_voidp arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdGetExtkeyInformation_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_203 arg2, swig_voidp arg3, swig_voidp arg4, swig_voidp arg5, uintptr_t arg6, uintptr_t arg7);
extern swig_intgo _wrap_CfdInitializeMnemonicWordList_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_204 arg2, swig_voidp arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdGetMnemonicWord_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdFreeMnemonicWordList_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdConvertMnemonicToSeed_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_205 arg2, swig_type_206 arg3, _Bool arg4, swig_type_207 arg5, _Bool arg6, swig_voidp arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdConvertEntropyToMnemonic_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_208 arg2, swig_type_209 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdInitializeTxSerializeForLedger_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdAddTxOutMetaDataForLedger_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_type_210 arg4, swig_type_211 arg5, swig_type_212 arg6);
extern swig_intgo _wrap_CfdFinalizeTxSerializeForLedger_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, swig_type_213 arg4, _Bool arg5, _Bool arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdFinalizeTxSerializeHashForLedger_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, swig_type_214 arg4, _Bool arg5, _Bool arg6, _Bool arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdFreeTxSerializeForLedger_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdParseScript_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_215 arg2, swig_voidp arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdGetScriptItem_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdFreeScriptItemHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdConvertScriptAsmToHex_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_type_216 arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdInitializeMultisigScriptSig_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdAddMultisigScriptSigData_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_217 arg3, swig_type_218 arg4);
extern swig_intgo _wrap_CfdAddMultisigScriptSigDataToDer_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_219 arg3, swig_intgo arg4, _Bool arg5, swig_type_220 arg6);
extern swig_intgo _wrap_CfdFinalizeMultisigScriptSig_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_221 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdFreeMultisigScriptSigHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_kCfdSequenceLockTimeDisable_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdSequenceLockTimeEnableMax_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdTxWitnessStackNormal_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdTxWitnessStackPegin_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdFundTxIsBlind_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdFundTxDustFeeRate_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdFundTxLongTermFeeRate_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdFundTxKnapsackMinChange_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdFundTxBlindExponent_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_kCfdFundTxBlindMinimumBits_cfdgo_a091b56f08bd78e6(void);
extern swig_intgo _wrap_CfdInitializeTransaction_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, uintptr_t arg3, uintptr_t arg4, swig_type_222 arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdAddTransactionInput_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_223 arg3, uintptr_t arg4, uintptr_t arg5);
extern swig_intgo _wrap_CfdAddTransactionOutput_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_type_224 arg4, swig_type_225 arg5, swig_type_226 arg6);
extern swig_intgo _wrap_CfdFinalizeTransaction_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdFreeTransactionHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdUpdateTxOutAmount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_227 arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdAddTxSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_228 arg3, swig_type_229 arg4, uintptr_t arg5, swig_intgo arg6, swig_type_230 arg7, _Bool arg8, swig_intgo arg9, _Bool arg10, _Bool arg11, swig_voidp arg12);
extern swig_intgo _wrap_CfdAddPubkeyHashSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_231 arg3, swig_type_232 arg4, uintptr_t arg5, swig_intgo arg6, swig_type_233 arg7, swig_type_234 arg8, _Bool arg9, swig_intgo arg10, _Bool arg11, swig_voidp arg12);
extern swig_intgo _wrap_CfdAddScriptHashSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_235 arg3, swig_type_236 arg4, uintptr_t arg5, swig_intgo arg6, swig_type_237 arg7, _Bool arg8, swig_voidp arg9);
extern swig_intgo _wrap_CfdAddSignWithPrivkeySimple_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_238 arg3, swig_type_239 arg4, uintptr_t arg5, swig_intgo arg6, swig_type_240 arg7, swig_type_241 arg8, uintptr_t arg9, swig_intgo arg10, _Bool arg11, _Bool arg12, swig_voidp arg13);
extern swig_intgo _wrap_CfdInitializeMultisigSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_voidp arg2);
extern swig_intgo _wrap_CfdAddMultisigSignData_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_242 arg3, swig_type_243 arg4);
extern swig_intgo _wrap_CfdAddMultisigSignDataToDer_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_244 arg3, swig_intgo arg4, _Bool arg5, swig_type_245 arg6);
extern swig_intgo _wrap_CfdFinalizeMultisigSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, swig_type_246 arg4, swig_type_247 arg5, uintptr_t arg6, swig_intgo arg7, swig_type_248 arg8, swig_voidp arg9);
extern swig_intgo _wrap_CfdFreeMultisigSignHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdVerifySignature_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_249 arg3, swig_type_250 arg4, swig_intgo arg5, swig_type_251 arg6, swig_type_252 arg7, swig_type_253 arg8, uintptr_t arg9, swig_intgo arg10, _Bool arg11, uintptr_t arg12, swig_type_254 arg13);
extern swig_intgo _wrap_CfdVerifyTxSign_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_255 arg3, swig_type_256 arg4, uintptr_t arg5, swig_type_257 arg6, swig_intgo arg7, swig_type_258 arg8, uintptr_t arg9, swig_type_259 arg10);
extern swig_intgo _wrap_CfdCreateSighash_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_260 arg3, swig_type_261 arg4, uintptr_t arg5, swig_intgo arg6, swig_type_262 arg7, swig_type_263 arg8, uintptr_t arg9, swig_intgo arg10, _Bool arg11, swig_voidp arg12);
extern swig_intgo _wrap_CfdGetTxInfo_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_264 arg3, swig_voidp arg4, swig_voidp arg5, uintptr_t arg6, uintptr_t arg7, uintptr_t arg8, uintptr_t arg9, uintptr_t arg10);
extern swig_intgo _wrap_CfdGetTxIn_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_265 arg3, uintptr_t arg4, swig_voidp arg5, uintptr_t arg6, uintptr_t arg7, swig_voidp arg8);
extern swig_intgo _wrap_CfdGetTxInWitness_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_266 arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdGetTxOut_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_267 arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdGetTxInCount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_268 arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdGetTxInWitnessCount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_269 arg3, uintptr_t arg4, uintptr_t arg5);
extern swig_intgo _wrap_CfdGetTxOutCount_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_270 arg3, uintptr_t arg4);
extern swig_intgo _wrap_CfdGetTxInIndex_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_271 arg3, swig_type_272 arg4, uintptr_t arg5, uintptr_t arg6);
extern swig_intgo _wrap_CfdGetTxOutIndex_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_273 arg3, swig_type_274 arg4, swig_type_275 arg5, uintptr_t arg6);
extern swig_intgo _wrap_CfdInitializeTxDataHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, swig_type_276 arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdFreeTxDataHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
extern swig_intgo _wrap_CfdGetModifiedTxByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3);
extern swig_intgo _wrap_CfdGetTxInfoByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_voidp arg3, swig_voidp arg4, uintptr_t arg5, uintptr_t arg6, uintptr_t arg7, uintptr_t arg8, uintptr_t arg9);
extern swig_intgo _wrap_CfdGetTxInByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4, uintptr_t arg5, uintptr_t arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdGetTxInWitnessByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, uintptr_t arg4, uintptr_t arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdGetTxOutByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, swig_voidp arg5, swig_voidp arg6);
extern swig_intgo _wrap_CfdGetTxInCountByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern swig_intgo _wrap_CfdGetTxInWitnessCountByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, uintptr_t arg4, uintptr_t arg5);
extern swig_intgo _wrap_CfdGetTxOutCountByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern swig_intgo _wrap_CfdGetTxInIndexByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_277 arg3, uintptr_t arg4, uintptr_t arg5);
extern swig_intgo _wrap_CfdGetTxOutIndexByHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_278 arg3, swig_type_279 arg4, uintptr_t arg5);
extern swig_intgo _wrap_CfdInitializeFundRawTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, swig_intgo arg2, uintptr_t arg3, swig_type_280 arg4, swig_voidp arg5);
extern swig_intgo _wrap_CfdAddTxInForFundRawTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_281 arg3, uintptr_t arg4, uintptr_t arg5, swig_type_282 arg6, swig_type_283 arg7, _Bool arg8, _Bool arg9, _Bool arg10, uintptr_t arg11, swig_type_284 arg12);
extern swig_intgo _wrap_CfdAddTxInTemplateForFundRawTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_285 arg3, uintptr_t arg4, uintptr_t arg5, swig_type_286 arg6, swig_type_287 arg7, _Bool arg8, _Bool arg9, _Bool arg10, uintptr_t arg11, swig_type_288 arg12, swig_type_289 arg13);
extern swig_intgo _wrap_CfdAddUtxoForFundRawTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_290 arg3, uintptr_t arg4, uintptr_t arg5, swig_type_291 arg6, swig_type_292 arg7);
extern swig_intgo _wrap_CfdAddUtxoTemplateForFundRawTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_293 arg3, uintptr_t arg4, uintptr_t arg5, swig_type_294 arg6, swig_type_295 arg7, swig_type_296 arg8);
extern swig_intgo _wrap_CfdAddTargetAmountForFundRawTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, swig_type_297 arg5, swig_type_298 arg6);
extern swig_intgo _wrap_CfdSetOptionFundRawTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, uintptr_t arg4, double arg5, _Bool arg6);
extern swig_intgo _wrap_CfdFinalizeFundRawTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, swig_type_299 arg3, double arg4, uintptr_t arg5, uintptr_t arg6, swig_voidp arg7);
extern swig_intgo _wrap_CfdGetAppendTxOutFundRawTx_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, swig_voidp arg4);
extern swig_intgo _wrap_CfdFreeFundRawTxHandle_cfdgo_a091b56f08bd78e6(uintptr_t arg1, uintptr_t arg2);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"
import "encoding/hex"
import "fmt"
import "strings"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_cfdgo_a091b56f08bd78e6(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type CfdErrorCode int
func _swig_getkCfdSuccess() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdSuccess_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdSuccess CfdErrorCode = _swig_getkCfdSuccess()
func _swig_getkCfdUnknownError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdUnknownError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdUnknownError CfdErrorCode = _swig_getkCfdUnknownError()
func _swig_getkCfdInternalError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdInternalError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdInternalError CfdErrorCode = _swig_getkCfdInternalError()
func _swig_getkCfdMemoryFullError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdMemoryFullError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdMemoryFullError CfdErrorCode = _swig_getkCfdMemoryFullError()
func _swig_getkCfdIllegalArgumentError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdIllegalArgumentError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdIllegalArgumentError CfdErrorCode = _swig_getkCfdIllegalArgumentError()
func _swig_getkCfdIllegalStateError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdIllegalStateError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdIllegalStateError CfdErrorCode = _swig_getkCfdIllegalStateError()
func _swig_getkCfdOutOfRangeError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdOutOfRangeError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdOutOfRangeError CfdErrorCode = _swig_getkCfdOutOfRangeError()
func _swig_getkCfdInvalidSettingError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdInvalidSettingError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdInvalidSettingError CfdErrorCode = _swig_getkCfdInvalidSettingError()
func _swig_getkCfdConnectionError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdConnectionError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdConnectionError CfdErrorCode = _swig_getkCfdConnectionError()
func _swig_getkCfdDiskAccessError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdDiskAccessError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDiskAccessError CfdErrorCode = _swig_getkCfdDiskAccessError()
func _swig_getkCfdSignVerificationError() (_swig_ret CfdErrorCode) {
	var swig_r CfdErrorCode
	swig_r = (CfdErrorCode)(C._wrap_kCfdSignVerificationError_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdSignVerificationError CfdErrorCode = _swig_getkCfdSignVerificationError()
type CfdLibraryFunction int
func _swig_getkCfdEnableBitcoin() (_swig_ret CfdLibraryFunction) {
	var swig_r CfdLibraryFunction
	swig_r = (CfdLibraryFunction)(C._wrap_kCfdEnableBitcoin_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdEnableBitcoin CfdLibraryFunction = _swig_getkCfdEnableBitcoin()
func _swig_getkCfdEnableElements() (_swig_ret CfdLibraryFunction) {
	var swig_r CfdLibraryFunction
	swig_r = (CfdLibraryFunction)(C._wrap_kCfdEnableElements_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdEnableElements CfdLibraryFunction = _swig_getkCfdEnableElements()
func CfdGetSupportedFunction(arg1 Uint64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetSupportedFunction_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func CfdInitialize() (_swig_ret int) {
	var swig_r int
	swig_r = (int)(C._wrap_CfdInitialize_cfdgo_a091b56f08bd78e6())
	return swig_r
}

func CfdFinalize(arg1 bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdFinalize_cfdgo_a091b56f08bd78e6(C._Bool(_swig_i_0)))
	return swig_r
}

func CfdCreateHandle(arg1 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdCreateHandle_cfdgo_a091b56f08bd78e6(C.swig_voidp(_swig_i_0)))
	return swig_r
}

func CfdCreateSimpleHandle(arg1 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdCreateSimpleHandle_cfdgo_a091b56f08bd78e6(C.swig_voidp(_swig_i_0)))
	return swig_r
}

func CfdCloneHandle(arg1 uintptr, arg2 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdCloneHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdCopyErrorState(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdCopyErrorState_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdFreeHandle(arg1 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdFreeHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func CfdFreeBuffer(arg1 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdFreeBuffer_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func CfdGetLastErrorCode(arg1 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_CfdGetLastErrorCode_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func CfdGetLastErrorMessage(arg1 uintptr, arg2 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdGetLastErrorMessage_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdRequestExecuteJson(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdRequestExecuteJson_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_1)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_2)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdSerializeByteData(arg1 uintptr, arg2 string, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdSerializeByteData_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_3)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

type CfdNetworkType int
func _swig_getkCfdNetworkMainnet() (_swig_ret CfdNetworkType) {
	var swig_r CfdNetworkType
	swig_r = (CfdNetworkType)(C._wrap_kCfdNetworkMainnet_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdNetworkMainnet CfdNetworkType = _swig_getkCfdNetworkMainnet()
func _swig_getkCfdNetworkTestnet() (_swig_ret CfdNetworkType) {
	var swig_r CfdNetworkType
	swig_r = (CfdNetworkType)(C._wrap_kCfdNetworkTestnet_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdNetworkTestnet CfdNetworkType = _swig_getkCfdNetworkTestnet()
func _swig_getkCfdNetworkRegtest() (_swig_ret CfdNetworkType) {
	var swig_r CfdNetworkType
	swig_r = (CfdNetworkType)(C._wrap_kCfdNetworkRegtest_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdNetworkRegtest CfdNetworkType = _swig_getkCfdNetworkRegtest()
func _swig_getkCfdNetworkLiquidv1() (_swig_ret CfdNetworkType) {
	var swig_r CfdNetworkType
	swig_r = (CfdNetworkType)(C._wrap_kCfdNetworkLiquidv1_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdNetworkLiquidv1 CfdNetworkType = _swig_getkCfdNetworkLiquidv1()
func _swig_getkCfdNetworkElementsRegtest() (_swig_ret CfdNetworkType) {
	var swig_r CfdNetworkType
	swig_r = (CfdNetworkType)(C._wrap_kCfdNetworkElementsRegtest_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdNetworkElementsRegtest CfdNetworkType = _swig_getkCfdNetworkElementsRegtest()
func _swig_getkCfdNetworkCustomChain() (_swig_ret CfdNetworkType) {
	var swig_r CfdNetworkType
	swig_r = (CfdNetworkType)(C._wrap_kCfdNetworkCustomChain_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdNetworkCustomChain CfdNetworkType = _swig_getkCfdNetworkCustomChain()
type CfdAddressType int
func _swig_getkCfdP2shAddress() (_swig_ret CfdAddressType) {
	var swig_r CfdAddressType
	swig_r = (CfdAddressType)(C._wrap_kCfdP2shAddress_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2shAddress CfdAddressType = _swig_getkCfdP2shAddress()
func _swig_getkCfdP2pkhAddress() (_swig_ret CfdAddressType) {
	var swig_r CfdAddressType
	swig_r = (CfdAddressType)(C._wrap_kCfdP2pkhAddress_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2pkhAddress CfdAddressType = _swig_getkCfdP2pkhAddress()
func _swig_getkCfdP2wshAddress() (_swig_ret CfdAddressType) {
	var swig_r CfdAddressType
	swig_r = (CfdAddressType)(C._wrap_kCfdP2wshAddress_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2wshAddress CfdAddressType = _swig_getkCfdP2wshAddress()
func _swig_getkCfdP2wpkhAddress() (_swig_ret CfdAddressType) {
	var swig_r CfdAddressType
	swig_r = (CfdAddressType)(C._wrap_kCfdP2wpkhAddress_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2wpkhAddress CfdAddressType = _swig_getkCfdP2wpkhAddress()
func _swig_getkCfdP2shP2wshAddress() (_swig_ret CfdAddressType) {
	var swig_r CfdAddressType
	swig_r = (CfdAddressType)(C._wrap_kCfdP2shP2wshAddress_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2shP2wshAddress CfdAddressType = _swig_getkCfdP2shP2wshAddress()
func _swig_getkCfdP2shP2wpkhAddress() (_swig_ret CfdAddressType) {
	var swig_r CfdAddressType
	swig_r = (CfdAddressType)(C._wrap_kCfdP2shP2wpkhAddress_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2shP2wpkhAddress CfdAddressType = _swig_getkCfdP2shP2wpkhAddress()
type CfdHashType int
func _swig_getkCfdP2sh() (_swig_ret CfdHashType) {
	var swig_r CfdHashType
	swig_r = (CfdHashType)(C._wrap_kCfdP2sh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2sh CfdHashType = _swig_getkCfdP2sh()
func _swig_getkCfdP2pkh() (_swig_ret CfdHashType) {
	var swig_r CfdHashType
	swig_r = (CfdHashType)(C._wrap_kCfdP2pkh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2pkh CfdHashType = _swig_getkCfdP2pkh()
func _swig_getkCfdP2wsh() (_swig_ret CfdHashType) {
	var swig_r CfdHashType
	swig_r = (CfdHashType)(C._wrap_kCfdP2wsh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2wsh CfdHashType = _swig_getkCfdP2wsh()
func _swig_getkCfdP2wpkh() (_swig_ret CfdHashType) {
	var swig_r CfdHashType
	swig_r = (CfdHashType)(C._wrap_kCfdP2wpkh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2wpkh CfdHashType = _swig_getkCfdP2wpkh()
func _swig_getkCfdP2shP2wsh() (_swig_ret CfdHashType) {
	var swig_r CfdHashType
	swig_r = (CfdHashType)(C._wrap_kCfdP2shP2wsh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2shP2wsh CfdHashType = _swig_getkCfdP2shP2wsh()
func _swig_getkCfdP2shP2wpkh() (_swig_ret CfdHashType) {
	var swig_r CfdHashType
	swig_r = (CfdHashType)(C._wrap_kCfdP2shP2wpkh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdP2shP2wpkh CfdHashType = _swig_getkCfdP2shP2wpkh()
type CfdWitnessVersion int
func _swig_getkCfdWitnessVersionNone() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersionNone_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersionNone CfdWitnessVersion = _swig_getkCfdWitnessVersionNone()
func _swig_getkCfdWitnessVersion0() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion0_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion0 CfdWitnessVersion = _swig_getkCfdWitnessVersion0()
func _swig_getkCfdWitnessVersion1() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion1_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion1 CfdWitnessVersion = _swig_getkCfdWitnessVersion1()
func _swig_getkCfdWitnessVersion2() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion2_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion2 CfdWitnessVersion = _swig_getkCfdWitnessVersion2()
func _swig_getkCfdWitnessVersion3() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion3_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion3 CfdWitnessVersion = _swig_getkCfdWitnessVersion3()
func _swig_getkCfdWitnessVersion4() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion4_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion4 CfdWitnessVersion = _swig_getkCfdWitnessVersion4()
func _swig_getkCfdWitnessVersion5() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion5_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion5 CfdWitnessVersion = _swig_getkCfdWitnessVersion5()
func _swig_getkCfdWitnessVersion6() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion6_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion6 CfdWitnessVersion = _swig_getkCfdWitnessVersion6()
func _swig_getkCfdWitnessVersion7() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion7_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion7 CfdWitnessVersion = _swig_getkCfdWitnessVersion7()
func _swig_getkCfdWitnessVersion8() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion8_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion8 CfdWitnessVersion = _swig_getkCfdWitnessVersion8()
func _swig_getkCfdWitnessVersion9() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion9_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion9 CfdWitnessVersion = _swig_getkCfdWitnessVersion9()
func _swig_getkCfdWitnessVersion10() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion10_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion10 CfdWitnessVersion = _swig_getkCfdWitnessVersion10()
func _swig_getkCfdWitnessVersion11() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion11_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion11 CfdWitnessVersion = _swig_getkCfdWitnessVersion11()
func _swig_getkCfdWitnessVersion12() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion12_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion12 CfdWitnessVersion = _swig_getkCfdWitnessVersion12()
func _swig_getkCfdWitnessVersion13() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion13_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion13 CfdWitnessVersion = _swig_getkCfdWitnessVersion13()
func _swig_getkCfdWitnessVersion14() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion14_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion14 CfdWitnessVersion = _swig_getkCfdWitnessVersion14()
func _swig_getkCfdWitnessVersion15() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion15_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion15 CfdWitnessVersion = _swig_getkCfdWitnessVersion15()
func _swig_getkCfdWitnessVersion16() (_swig_ret CfdWitnessVersion) {
	var swig_r CfdWitnessVersion
	swig_r = (CfdWitnessVersion)(C._wrap_kCfdWitnessVersion16_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdWitnessVersion16 CfdWitnessVersion = _swig_getkCfdWitnessVersion16()
type CfdSighashType int
func _swig_getkCfdSigHashAll() (_swig_ret CfdSighashType) {
	var swig_r CfdSighashType
	swig_r = (CfdSighashType)(C._wrap_kCfdSigHashAll_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdSigHashAll CfdSighashType = _swig_getkCfdSigHashAll()
func _swig_getkCfdSigHashNone() (_swig_ret CfdSighashType) {
	var swig_r CfdSighashType
	swig_r = (CfdSighashType)(C._wrap_kCfdSigHashNone_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdSigHashNone CfdSighashType = _swig_getkCfdSigHashNone()
func _swig_getkCfdSigHashSingle() (_swig_ret CfdSighashType) {
	var swig_r CfdSighashType
	swig_r = (CfdSighashType)(C._wrap_kCfdSigHashSingle_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdSigHashSingle CfdSighashType = _swig_getkCfdSigHashSingle()
type CfdDescriptorScriptType int
func _swig_getkCfdDescriptorScriptNull() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptNull_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptNull CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptNull()
func _swig_getkCfdDescriptorScriptSh() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptSh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptSh CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptSh()
func _swig_getkCfdDescriptorScriptWsh() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptWsh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptWsh CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptWsh()
func _swig_getkCfdDescriptorScriptPk() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptPk_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptPk CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptPk()
func _swig_getkCfdDescriptorScriptPkh() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptPkh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptPkh CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptPkh()
func _swig_getkCfdDescriptorScriptWpkh() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptWpkh_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptWpkh CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptWpkh()
func _swig_getkCfdDescriptorScriptCombo() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptCombo_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptCombo CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptCombo()
func _swig_getkCfdDescriptorScriptMulti() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptMulti_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptMulti CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptMulti()
func _swig_getkCfdDescriptorScriptSortedMulti() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptSortedMulti_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptSortedMulti CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptSortedMulti()
func _swig_getkCfdDescriptorScriptAddr() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptAddr_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptAddr CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptAddr()
func _swig_getkCfdDescriptorScriptRaw() (_swig_ret CfdDescriptorScriptType) {
	var swig_r CfdDescriptorScriptType
	swig_r = (CfdDescriptorScriptType)(C._wrap_kCfdDescriptorScriptRaw_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorScriptRaw CfdDescriptorScriptType = _swig_getkCfdDescriptorScriptRaw()
type CfdDescriptorKeyType int
func _swig_getkCfdDescriptorKeyNull() (_swig_ret CfdDescriptorKeyType) {
	var swig_r CfdDescriptorKeyType
	swig_r = (CfdDescriptorKeyType)(C._wrap_kCfdDescriptorKeyNull_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorKeyNull CfdDescriptorKeyType = _swig_getkCfdDescriptorKeyNull()
func _swig_getkCfdDescriptorKeyPublic() (_swig_ret CfdDescriptorKeyType) {
	var swig_r CfdDescriptorKeyType
	swig_r = (CfdDescriptorKeyType)(C._wrap_kCfdDescriptorKeyPublic_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorKeyPublic CfdDescriptorKeyType = _swig_getkCfdDescriptorKeyPublic()
func _swig_getkCfdDescriptorKeyBip32() (_swig_ret CfdDescriptorKeyType) {
	var swig_r CfdDescriptorKeyType
	swig_r = (CfdDescriptorKeyType)(C._wrap_kCfdDescriptorKeyBip32_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorKeyBip32 CfdDescriptorKeyType = _swig_getkCfdDescriptorKeyBip32()
func _swig_getkCfdDescriptorKeyBip32Priv() (_swig_ret CfdDescriptorKeyType) {
	var swig_r CfdDescriptorKeyType
	swig_r = (CfdDescriptorKeyType)(C._wrap_kCfdDescriptorKeyBip32Priv_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdDescriptorKeyBip32Priv CfdDescriptorKeyType = _swig_getkCfdDescriptorKeyBip32Priv()
func CfdCreateAddress(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 int, arg6 *string, arg7 *string, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdCreateAddress_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_4)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_5)(unsafe.Pointer(&_swig_i_3)), C.swig_intgo(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdInitializeMultisigScript(arg1 uintptr, arg2 int, arg3 int, arg4 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdInitializeMultisigScript_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func CfdAddMultisigScriptData(arg1 uintptr, arg2 uintptr, arg3 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdAddMultisigScriptData_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_6)(unsafe.Pointer(&_swig_i_2))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdFinalizeMultisigScript(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string, arg5 *string, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdFinalizeMultisigScript_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func CfdFreeMultisigScriptHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeMultisigScriptHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdParseDescriptor(arg1 uintptr, arg2 string, arg3 int, arg4 string, arg5 *uintptr, arg6 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	swig_r = (int)(C._wrap_CfdParseDescriptor_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_7)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), *(*C.swig_type_8)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdGetDescriptorData(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 Uint32_t, arg5 Uint32_t, arg6 *int, arg7 *string, arg8 *string, arg9 *int, arg10 *string, arg11 *int, arg12 *string, arg13 *string, arg14 *string, arg15 *bool, arg16 Uint32_t, arg17 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	_swig_i_13 := arg14
	_swig_i_14 := arg15
	_swig_i_15 := arg16.Swigcptr()
	_swig_i_16 := arg17.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetDescriptorData_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_voidp(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_voidp(_swig_i_12), C.swig_voidp(_swig_i_13), C.swig_voidp(_swig_i_14), C.uintptr_t(_swig_i_15), C.uintptr_t(_swig_i_16)))
	return swig_r
}

func CfdGetDescriptorMultisigKey(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *int, arg5 *string, arg6 *string, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdGetDescriptorMultisigKey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6)))
	return swig_r
}

func CfdFreeDescriptorHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeDescriptorHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdGetDescriptorChecksum(arg1 uintptr, arg2 int, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetDescriptorChecksum_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_9)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetAddressesFromMultisig(arg1 uintptr, arg2 string, arg3 int, arg4 int, arg5 *uintptr, arg6 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetAddressesFromMultisig_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_10)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_intgo(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetAddressFromMultisigKey(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetAddressFromMultisigKey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	return swig_r
}

func CfdFreeAddressesMultisigHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeAddressesMultisigHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdGetAddressFromLockingScript(arg1 uintptr, arg2 string, arg3 int, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetAddressFromLockingScript_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_11)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetAddressInfo(arg1 uintptr, arg2 string, arg3 *int, arg4 *int, arg5 *int, arg6 *string, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdGetAddressInfo_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_12)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

type CfdCoinSelectionOption int
func _swig_getkCfdCoinSelectionExponent() (_swig_ret CfdCoinSelectionOption) {
	var swig_r CfdCoinSelectionOption
	swig_r = (CfdCoinSelectionOption)(C._wrap_kCfdCoinSelectionExponent_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdCoinSelectionExponent CfdCoinSelectionOption = _swig_getkCfdCoinSelectionExponent()
func _swig_getkCfdCoinSelectionMinimumBits() (_swig_ret CfdCoinSelectionOption) {
	var swig_r CfdCoinSelectionOption
	swig_r = (CfdCoinSelectionOption)(C._wrap_kCfdCoinSelectionMinimumBits_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdCoinSelectionMinimumBits CfdCoinSelectionOption = _swig_getkCfdCoinSelectionMinimumBits()
type CfdEstimateFeeOption int
func _swig_getkCfdEstimateFeeExponent() (_swig_ret CfdEstimateFeeOption) {
	var swig_r CfdEstimateFeeOption
	swig_r = (CfdEstimateFeeOption)(C._wrap_kCfdEstimateFeeExponent_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdEstimateFeeExponent CfdEstimateFeeOption = _swig_getkCfdEstimateFeeExponent()
func _swig_getkCfdEstimateFeeMinimumBits() (_swig_ret CfdEstimateFeeOption) {
	var swig_r CfdEstimateFeeOption
	swig_r = (CfdEstimateFeeOption)(C._wrap_kCfdEstimateFeeMinimumBits_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdEstimateFeeMinimumBits CfdEstimateFeeOption = _swig_getkCfdEstimateFeeMinimumBits()
func CfdInitializeCoinSelection(arg1 uintptr, arg2 Uint32_t, arg3 Uint32_t, arg4 string, arg5 Int64_t, arg6 float64, arg7 float64, arg8 float64, arg9 Int64_t, arg10 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdInitializeCoinSelection_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), *(*C.swig_type_13)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.double(_swig_i_5), C.double(_swig_i_6), C.double(_swig_i_7), C.uintptr_t(_swig_i_8), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdAddCoinSelectionUtxo(arg1 uintptr, arg2 uintptr, arg3 Int32_t, arg4 string, arg5 Uint32_t, arg6 Int64_t, arg7 string, arg8 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdAddCoinSelectionUtxo_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), *(*C.swig_type_14)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), *(*C.swig_type_15)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_16)(unsafe.Pointer(&_swig_i_7))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdAddCoinSelectionUtxoTemplate(arg1 uintptr, arg2 uintptr, arg3 Int32_t, arg4 string, arg5 Uint32_t, arg6 Int64_t, arg7 string, arg8 string, arg9 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	swig_r = (int)(C._wrap_CfdAddCoinSelectionUtxoTemplate_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), *(*C.swig_type_17)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), *(*C.swig_type_18)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_19)(unsafe.Pointer(&_swig_i_7)), *(*C.swig_type_20)(unsafe.Pointer(&_swig_i_8))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	return swig_r
}

func CfdAddCoinSelectionAmount(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 Int64_t, arg5 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdAddCoinSelectionAmount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), *(*C.swig_type_21)(unsafe.Pointer(&_swig_i_4))))
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	return swig_r
}

func CfdSetOptionCoinSelection(arg1 uintptr, arg2 uintptr, arg3 int, arg4 Int64_t, arg5 float64, arg6 bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdSetOptionCoinSelection_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), C.uintptr_t(_swig_i_3), C.double(_swig_i_4), C._Bool(_swig_i_5)))
	return swig_r
}

func CfdFinalizeCoinSelection(arg1 uintptr, arg2 uintptr, arg3 Int64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_CfdFinalizeCoinSelection_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func CfdGetSelectedCoinIndex(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 Int32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetSelectedCoinIndex_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3)))
	return swig_r
}

func CfdGetSelectedCoinAssetAmount(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 Int64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetSelectedCoinAssetAmount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3)))
	return swig_r
}

func CfdFreeCoinSelectionHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeCoinSelectionHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdInitializeEstimateFee(arg1 uintptr, arg2 *uintptr, arg3 bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdInitializeEstimateFee_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C._Bool(_swig_i_2)))
	return swig_r
}

func CfdAddTxInForEstimateFee(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 string, arg6 string, arg7 bool, arg8 bool, arg9 bool, arg10 Uint32_t, arg11 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10.Swigcptr()
	_swig_i_10 := arg11
	swig_r = (int)(C._wrap_CfdAddTxInForEstimateFee_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_22)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), *(*C.swig_type_23)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_24)(unsafe.Pointer(&_swig_i_5)), C._Bool(_swig_i_6), C._Bool(_swig_i_7), C._Bool(_swig_i_8), C.uintptr_t(_swig_i_9), *(*C.swig_type_25)(unsafe.Pointer(&_swig_i_10))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg11
	}
	return swig_r
}

func CfdAddTxInTemplateForEstimateFee(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 string, arg6 string, arg7 bool, arg8 bool, arg9 bool, arg10 Uint32_t, arg11 string, arg12 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10.Swigcptr()
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	swig_r = (int)(C._wrap_CfdAddTxInTemplateForEstimateFee_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_26)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), *(*C.swig_type_27)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_28)(unsafe.Pointer(&_swig_i_5)), C._Bool(_swig_i_6), C._Bool(_swig_i_7), C._Bool(_swig_i_8), C.uintptr_t(_swig_i_9), *(*C.swig_type_29)(unsafe.Pointer(&_swig_i_10)), *(*C.swig_type_30)(unsafe.Pointer(&_swig_i_11))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg11
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg12
	}
	return swig_r
}

func CfdSetOptionEstimateFee(arg1 uintptr, arg2 uintptr, arg3 int, arg4 Int64_t, arg5 float64, arg6 bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdSetOptionEstimateFee_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), C.uintptr_t(_swig_i_3), C.double(_swig_i_4), C._Bool(_swig_i_5)))
	return swig_r
}

func CfdFinalizeEstimateFee(arg1 uintptr, arg2 uintptr, arg3 string, arg4 string, arg5 Int64_t, arg6 Int64_t, arg7 bool, arg8 float64) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdFinalizeEstimateFee_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_31)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_32)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C._Bool(_swig_i_6), C.double(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdFreeEstimateFeeHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeEstimateFeeHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdCreateConfidentialAddress(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdCreateConfidentialAddress_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_33)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_34)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdParseConfidentialAddress(arg1 uintptr, arg2 string, arg3 *string, arg4 *string, arg5 *int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdParseConfidentialAddress_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_35)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

type CfdBlindOption int
func _swig_getkCfdBlindOptionMinimumRangeValue() (_swig_ret CfdBlindOption) {
	var swig_r CfdBlindOption
	swig_r = (CfdBlindOption)(C._wrap_kCfdBlindOptionMinimumRangeValue_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdBlindOptionMinimumRangeValue CfdBlindOption = _swig_getkCfdBlindOptionMinimumRangeValue()
func _swig_getkCfdBlindOptionExponent() (_swig_ret CfdBlindOption) {
	var swig_r CfdBlindOption
	swig_r = (CfdBlindOption)(C._wrap_kCfdBlindOptionExponent_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdBlindOptionExponent CfdBlindOption = _swig_getkCfdBlindOptionExponent()
func _swig_getkCfdBlindOptionMinimumBits() (_swig_ret CfdBlindOption) {
	var swig_r CfdBlindOption
	swig_r = (CfdBlindOption)(C._wrap_kCfdBlindOptionMinimumBits_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdBlindOptionMinimumBits CfdBlindOption = _swig_getkCfdBlindOptionMinimumBits()
func CfdInitializeConfidentialTx(arg1 uintptr, arg2 Uint32_t, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdInitializeConfidentialTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func CfdAddConfidentialTxIn(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 Uint32_t, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdAddConfidentialTxIn_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_36)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_37)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdAddConfidentialTxOut(arg1 uintptr, arg2 string, arg3 string, arg4 Int64_t, arg5 string, arg6 string, arg7 string, arg8 string, arg9 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	swig_r = (int)(C._wrap_CfdAddConfidentialTxOut_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_38)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_39)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), *(*C.swig_type_40)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_41)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_42)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_43)(unsafe.Pointer(&_swig_i_7)), C.swig_voidp(_swig_i_8)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdUpdateConfidentialTxOut(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 string, arg5 Int64_t, arg6 string, arg7 string, arg8 string, arg9 string, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdUpdateConfidentialTxOut_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_44)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), *(*C.swig_type_45)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), *(*C.swig_type_46)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_47)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_48)(unsafe.Pointer(&_swig_i_7)), *(*C.swig_type_49)(unsafe.Pointer(&_swig_i_8)), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	return swig_r
}

func CfdGetConfidentialTxInfo(arg1 uintptr, arg2 string, arg3 *string, arg4 *string, arg5 *string, arg6 Uint32_t, arg7 Uint32_t, arg8 Uint32_t, arg9 Uint32_t, arg10 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInfo_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_50)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7), C.uintptr_t(_swig_i_8), C.uintptr_t(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxIn(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 *string, arg5 Uint32_t, arg6 Uint32_t, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdGetConfidentialTxIn_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_51)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxInWitness(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 Uint32_t, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInWitness_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_52)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxInPeginWitness(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 Uint32_t, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInPeginWitness_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_53)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetTxInIssuanceInfo(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 *string, arg5 *string, arg6 Int64_t, arg7 *string, arg8 Int64_t, arg9 *string, arg10 *string, arg11 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	swig_r = (int)(C._wrap_CfdGetTxInIssuanceInfo_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_54)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6), C.uintptr_t(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_voidp(_swig_i_10)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxOut(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 *string, arg5 Int64_t, arg6 *string, arg7 *string, arg8 *string, arg9 *string, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdGetConfidentialTxOut_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_55)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxInCount(arg1 uintptr, arg2 string, arg3 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInCount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_56)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxInWitnessCount(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInWitnessCount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_57)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxInPeginWitnessCount(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInPeginWitnessCount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_58)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxOutCount(arg1 uintptr, arg2 string, arg3 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxOutCount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_59)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetConfidentialTxInIndex(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInIndex_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_60)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_61)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetConfidentialTxOutIndex(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxOutIndex_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_62)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_63)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_64)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdGetConfidentialTxInfoByHandle(arg1 uintptr, arg2 uintptr, arg3 *string, arg4 *string, arg5 *string, arg6 Uint32_t, arg7 Uint32_t, arg8 Uint32_t, arg9 Uint32_t, arg10 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetConfidentialTxInfoByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7), C.uintptr_t(_swig_i_8), C.uintptr_t(_swig_i_9)))
	return swig_r
}

func CfdGetTxInIssuanceInfoByHandle(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string, arg5 *string, arg6 Int64_t, arg7 *string, arg8 Int64_t, arg9 *string, arg10 *string, arg11 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	swig_r = (int)(C._wrap_CfdGetTxInIssuanceInfoByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6), C.uintptr_t(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9), C.swig_voidp(_swig_i_10)))
	return swig_r
}

func CfdGetConfidentialTxOutSimpleByHandle(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string, arg5 Int64_t, arg6 *string, arg7 *string, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdGetConfidentialTxOutSimpleByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7)))
	return swig_r
}

func CfdGetConfidentialTxOutByHandle(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string, arg5 Int64_t, arg6 *string, arg7 *string, arg8 *string, arg9 *string, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdGetConfidentialTxOutByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9)))
	return swig_r
}

func CfdSetRawReissueAsset(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 Int64_t, arg6 string, arg7 string, arg8 string, arg9 string, arg10 *string, arg11 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	swig_r = (int)(C._wrap_CfdSetRawReissueAsset_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_65)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_66)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), *(*C.swig_type_67)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_68)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_69)(unsafe.Pointer(&_swig_i_7)), *(*C.swig_type_70)(unsafe.Pointer(&_swig_i_8)), C.swig_voidp(_swig_i_9), C.swig_voidp(_swig_i_10)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	return swig_r
}

func CfdGetIssuanceBlindingKey(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetIssuanceBlindingKey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_71)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_72)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetDefaultBlindingKey(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetDefaultBlindingKey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_73)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_74)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdInitializeBlindTx(arg1 uintptr, arg2 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdInitializeBlindTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdSetBlindTxOption(arg1 uintptr, arg2 uintptr, arg3 int, arg4 Int64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdSetBlindTxOption_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), C.uintptr_t(_swig_i_3)))
	return swig_r
}

func CfdAddBlindTxInData(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 string, arg6 string, arg7 string, arg8 Int64_t, arg9 string, arg10 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdAddBlindTxInData_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_75)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), *(*C.swig_type_76)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_77)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_78)(unsafe.Pointer(&_swig_i_6)), C.uintptr_t(_swig_i_7), *(*C.swig_type_79)(unsafe.Pointer(&_swig_i_8)), *(*C.swig_type_80)(unsafe.Pointer(&_swig_i_9))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg10
	}
	return swig_r
}

func CfdAddBlindTxOutData(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdAddBlindTxOutData_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), *(*C.swig_type_81)(unsafe.Pointer(&_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdAddBlindTxOutByAddress(arg1 uintptr, arg2 uintptr, arg3 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdAddBlindTxOutByAddress_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_82)(unsafe.Pointer(&_swig_i_2))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdFinalizeBlindTx(arg1 uintptr, arg2 uintptr, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdFinalizeBlindTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_83)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdFreeBlindHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeBlindHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdAddConfidentialTxSign(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 bool, arg6 string, arg7 bool, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdAddConfidentialTxSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_84)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_85)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C._Bool(_swig_i_4), *(*C.swig_type_86)(unsafe.Pointer(&_swig_i_5)), C._Bool(_swig_i_6), C.swig_voidp(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdAddConfidentialTxDerSign(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 bool, arg6 string, arg7 int, arg8 bool, arg9 bool, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdAddConfidentialTxDerSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_87)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_88)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C._Bool(_swig_i_4), *(*C.swig_type_89)(unsafe.Pointer(&_swig_i_5)), C.swig_intgo(_swig_i_6), C._Bool(_swig_i_7), C._Bool(_swig_i_8), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdFinalizeElementsMultisigSign(arg1 uintptr, arg2 uintptr, arg3 string, arg4 string, arg5 Uint32_t, arg6 int, arg7 string, arg8 string, arg9 bool, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdFinalizeElementsMultisigSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_90)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_91)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.swig_intgo(_swig_i_5), *(*C.swig_type_92)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_93)(unsafe.Pointer(&_swig_i_7)), C._Bool(_swig_i_8), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdAddConfidentialTxSignWithPrivkeySimple(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 int, arg6 string, arg7 string, arg8 Int64_t, arg9 string, arg10 int, arg11 bool, arg12 bool, arg13 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	swig_r = (int)(C._wrap_CfdAddConfidentialTxSignWithPrivkeySimple_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_94)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_95)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.swig_intgo(_swig_i_4), *(*C.swig_type_96)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_97)(unsafe.Pointer(&_swig_i_6)), C.uintptr_t(_swig_i_7), *(*C.swig_type_98)(unsafe.Pointer(&_swig_i_8)), C.swig_intgo(_swig_i_9), C._Bool(_swig_i_10), C._Bool(_swig_i_11), C.swig_voidp(_swig_i_12)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	return swig_r
}

func CfdCreateConfidentialSighash(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 int, arg6 string, arg7 string, arg8 Int64_t, arg9 string, arg10 int, arg11 bool, arg12 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	swig_r = (int)(C._wrap_CfdCreateConfidentialSighash_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_99)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_100)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.swig_intgo(_swig_i_4), *(*C.swig_type_101)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_102)(unsafe.Pointer(&_swig_i_6)), C.uintptr_t(_swig_i_7), *(*C.swig_type_103)(unsafe.Pointer(&_swig_i_8)), C.swig_intgo(_swig_i_9), C._Bool(_swig_i_10), C.swig_voidp(_swig_i_11)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	return swig_r
}

func CfdUnblindTxOut(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 string, arg5 *string, arg6 Int64_t, arg7 *string, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdUnblindTxOut_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_104)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), *(*C.swig_type_105)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdUnblindIssuance(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 string, arg5 string, arg6 *string, arg7 Int64_t, arg8 *string, arg9 *string, arg10 *string, arg11 Int64_t, arg12 *string, arg13 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11.Swigcptr()
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	swig_r = (int)(C._wrap_CfdUnblindIssuance_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_106)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), *(*C.swig_type_107)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_108)(unsafe.Pointer(&_swig_i_4)), C.swig_voidp(_swig_i_5), C.uintptr_t(_swig_i_6), C.swig_voidp(_swig_i_7), C.swig_voidp(_swig_i_8), C.swig_voidp(_swig_i_9), C.uintptr_t(_swig_i_10), C.swig_voidp(_swig_i_11), C.swig_voidp(_swig_i_12)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	return swig_r
}

func CfdVerifyConfidentialTxSignature(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 string, arg6 string, arg7 Uint32_t, arg8 int, arg9 bool, arg10 Int64_t, arg11 string, arg12 int) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10.Swigcptr()
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	swig_r = (int)(C._wrap_CfdVerifyConfidentialTxSignature_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_109)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_110)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_111)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_112)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_113)(unsafe.Pointer(&_swig_i_5)), C.uintptr_t(_swig_i_6), C.swig_intgo(_swig_i_7), C._Bool(_swig_i_8), C.uintptr_t(_swig_i_9), *(*C.swig_type_114)(unsafe.Pointer(&_swig_i_10)), C.swig_intgo(_swig_i_11)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg11
	}
	return swig_r
}

func CfdVerifyConfidentialTxSign(arg1 uintptr, arg2 string, arg3 string, arg4 Uint32_t, arg5 string, arg6 int, arg7 string, arg8 Int64_t, arg9 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9
	swig_r = (int)(C._wrap_CfdVerifyConfidentialTxSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_115)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_116)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), *(*C.swig_type_117)(unsafe.Pointer(&_swig_i_4)), C.swig_intgo(_swig_i_5), *(*C.swig_type_118)(unsafe.Pointer(&_swig_i_6)), C.uintptr_t(_swig_i_7), *(*C.swig_type_119)(unsafe.Pointer(&_swig_i_8))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg9
	}
	return swig_r
}

func CfdGetConfidentialValueHex(arg1 uintptr, arg2 Int64_t, arg3 bool, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetConfidentialValueHex_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C._Bool(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func CfdGetAssetCommitment(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetAssetCommitment_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_120)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_121)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetValueCommitment(arg1 uintptr, arg2 Int64_t, arg3 string, arg4 string, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetValueCommitment_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_122)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_123)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdAddConfidentialTxOutput(arg1 uintptr, arg2 uintptr, arg3 Int64_t, arg4 string, arg5 string, arg6 string, arg7 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdAddConfidentialTxOutput_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), *(*C.swig_type_124)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_125)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_126)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_127)(unsafe.Pointer(&_swig_i_6))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	return swig_r
}

type CfdExtKeyType int
func _swig_getkCfdExtPrivkey() (_swig_ret CfdExtKeyType) {
	var swig_r CfdExtKeyType
	swig_r = (CfdExtKeyType)(C._wrap_kCfdExtPrivkey_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdExtPrivkey CfdExtKeyType = _swig_getkCfdExtPrivkey()
func _swig_getkCfdExtPubkey() (_swig_ret CfdExtKeyType) {
	var swig_r CfdExtKeyType
	swig_r = (CfdExtKeyType)(C._wrap_kCfdExtPubkey_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdExtPubkey CfdExtKeyType = _swig_getkCfdExtPubkey()
func CfdCalculateEcSignature(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 int, arg6 bool, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdCalculateEcSignature_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_128)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_129)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_130)(unsafe.Pointer(&_swig_i_3)), C.swig_intgo(_swig_i_4), C._Bool(_swig_i_5), C.swig_voidp(_swig_i_6)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdVerifyEcSignature(arg1 uintptr, arg2 string, arg3 string, arg4 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdVerifyEcSignature_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_131)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_132)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_133)(unsafe.Pointer(&_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdSignEcdsaAdaptor(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 *string, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdSignEcdsaAdaptor_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_134)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_135)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_136)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdAdaptEcdsaAdaptor(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdAdaptEcdsaAdaptor_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_137)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_138)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdExtractEcdsaAdaptorSecret(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdExtractEcdsaAdaptorSecret_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_139)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_140)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_141)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdVerifyEcdsaAdaptor(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 string, arg6 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdVerifyEcdsaAdaptor_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_142)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_143)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_144)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_145)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_146)(unsafe.Pointer(&_swig_i_5))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdGetSchnorrPubkeyFromPrivkey(arg1 uintptr, arg2 string, arg3 *string, arg4 *bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetSchnorrPubkeyFromPrivkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_147)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetSchnorrPubkeyFromPubkey(arg1 uintptr, arg2 string, arg3 *string, arg4 *bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetSchnorrPubkeyFromPubkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_148)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdSchnorrPubkeyTweakAdd(arg1 uintptr, arg2 string, arg3 string, arg4 *string, arg5 *bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdSchnorrPubkeyTweakAdd_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_149)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_150)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdSchnorrKeyPairTweakAdd(arg1 uintptr, arg2 string, arg3 string, arg4 *string, arg5 *bool, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdSchnorrKeyPairTweakAdd_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_151)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_152)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdCheckTweakAddFromSchnorrPubkey(arg1 uintptr, arg2 string, arg3 bool, arg4 string, arg5 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdCheckTweakAddFromSchnorrPubkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_153)(unsafe.Pointer(&_swig_i_1)), C._Bool(_swig_i_2), *(*C.swig_type_154)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_155)(unsafe.Pointer(&_swig_i_4))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	return swig_r
}

func CfdSignSchnorr(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdSignSchnorr_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_156)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_157)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_158)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdSignSchnorrWithNonce(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdSignSchnorrWithNonce_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_159)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_160)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_161)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdComputeSchnorrSigPoint(arg1 uintptr, arg2 string, arg3 string, arg4 string, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdComputeSchnorrSigPoint_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_162)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_163)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_164)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdVerifySchnorr(arg1 uintptr, arg2 string, arg3 string, arg4 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdVerifySchnorr_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_165)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_166)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_167)(unsafe.Pointer(&_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdSplitSchnorrSignature(arg1 uintptr, arg2 string, arg3 *string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdSplitSchnorrSignature_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_168)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdEncodeSignatureByDer(arg1 uintptr, arg2 string, arg3 int, arg4 bool, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdEncodeSignatureByDer_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_169)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C._Bool(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdDecodeSignatureFromDer(arg1 uintptr, arg2 string, arg3 *string, arg4 *int, arg5 *bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdDecodeSignatureFromDer_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_170)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdNormalizeSignature(arg1 uintptr, arg2 string, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdNormalizeSignature_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_171)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdCreateKeyPair(arg1 uintptr, arg2 bool, arg3 int, arg4 *string, arg5 *string, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdCreateKeyPair_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C._Bool(_swig_i_1), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func CfdGetPrivkeyFromWif(arg1 uintptr, arg2 string, arg3 int, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetPrivkeyFromWif_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_172)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetPrivkeyWif(arg1 uintptr, arg2 string, arg3 int, arg4 bool, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetPrivkeyWif_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_173)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C._Bool(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdParsePrivkeyWif(arg1 uintptr, arg2 string, arg3 *string, arg4 *int, arg5 *bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdParsePrivkeyWif_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_174)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetPubkeyFromPrivkey(arg1 uintptr, arg2 string, arg3 string, arg4 bool, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetPubkeyFromPrivkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_175)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_176)(unsafe.Pointer(&_swig_i_2)), C._Bool(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdCompressPubkey(arg1 uintptr, arg2 string, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdCompressPubkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_177)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdUncompressPubkey(arg1 uintptr, arg2 string, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdUncompressPubkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_178)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdInitializeCombinePubkey(arg1 uintptr, arg2 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdInitializeCombinePubkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdAddCombinePubkey(arg1 uintptr, arg2 uintptr, arg3 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdAddCombinePubkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_179)(unsafe.Pointer(&_swig_i_2))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdFinalizeCombinePubkey(arg1 uintptr, arg2 uintptr, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdFinalizeCombinePubkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2)))
	return swig_r
}

func CfdFreeCombinePubkeyHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeCombinePubkeyHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdPubkeyTweakAdd(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdPubkeyTweakAdd_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_180)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_181)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdPubkeyTweakMul(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdPubkeyTweakMul_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_182)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_183)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdNegatePubkey(arg1 uintptr, arg2 string, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdNegatePubkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_184)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdPrivkeyTweakAdd(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdPrivkeyTweakAdd_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_185)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_186)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdPrivkeyTweakMul(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdPrivkeyTweakMul_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_187)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_188)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdNegatePrivkey(arg1 uintptr, arg2 string, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdNegatePrivkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_189)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdCreateExtkeyFromSeed(arg1 uintptr, arg2 string, arg3 int, arg4 int, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdCreateExtkeyFromSeed_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_190)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_intgo(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdCreateExtkey(arg1 uintptr, arg2 int, arg3 int, arg4 string, arg5 string, arg6 string, arg7 string, arg8 byte, arg9 Uint32_t, arg10 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdCreateExtkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2), *(*C.swig_type_191)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_192)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_193)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_194)(unsafe.Pointer(&_swig_i_6)), C.char(_swig_i_7), C.uintptr_t(_swig_i_8), C.swig_voidp(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	return swig_r
}

func CfdCreateExtkeyFromParent(arg1 uintptr, arg2 string, arg3 Uint32_t, arg4 bool, arg5 int, arg6 int, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdCreateExtkeyFromParent_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_195)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2), C._Bool(_swig_i_3), C.swig_intgo(_swig_i_4), C.swig_intgo(_swig_i_5), C.swig_voidp(_swig_i_6)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdCreateExtkeyFromParentPath(arg1 uintptr, arg2 string, arg3 string, arg4 int, arg5 int, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdCreateExtkeyFromParentPath_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_196)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_197)(unsafe.Pointer(&_swig_i_2)), C.swig_intgo(_swig_i_3), C.swig_intgo(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdCreateExtPubkey(arg1 uintptr, arg2 string, arg3 int, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdCreateExtPubkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_198)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetPrivkeyFromExtkey(arg1 uintptr, arg2 string, arg3 int, arg4 *string, arg5 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdGetPrivkeyFromExtkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_199)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetPubkeyFromExtkey(arg1 uintptr, arg2 string, arg3 int, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetPubkeyFromExtkey_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_200)(unsafe.Pointer(&_swig_i_1)), C.swig_intgo(_swig_i_2), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetParentExtkeyPathData(arg1 uintptr, arg2 string, arg3 string, arg4 int, arg5 *string, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdGetParentExtkeyPathData_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_201)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_202)(unsafe.Pointer(&_swig_i_2)), C.swig_intgo(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetExtkeyInformation(arg1 uintptr, arg2 string, arg3 *string, arg4 *string, arg5 *string, arg6 Uint32_t, arg7 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetExtkeyInformation_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_203)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdInitializeMnemonicWordList(arg1 uintptr, arg2 string, arg3 *uintptr, arg4 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdInitializeMnemonicWordList_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_204)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.uintptr_t(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetMnemonicWord(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetMnemonicWord_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func CfdFreeMnemonicWordList(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeMnemonicWordList_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdConvertMnemonicToSeed(arg1 uintptr, arg2 string, arg3 string, arg4 bool, arg5 string, arg6 bool, arg7 *string, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdConvertMnemonicToSeed_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_205)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_206)(unsafe.Pointer(&_swig_i_2)), C._Bool(_swig_i_3), *(*C.swig_type_207)(unsafe.Pointer(&_swig_i_4)), C._Bool(_swig_i_5), C.swig_voidp(_swig_i_6), C.swig_voidp(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	return swig_r
}

func CfdConvertEntropyToMnemonic(arg1 uintptr, arg2 string, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdConvertEntropyToMnemonic_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_208)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_209)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdInitializeTxSerializeForLedger(arg1 uintptr, arg2 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdInitializeTxSerializeForLedger_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdAddTxOutMetaDataForLedger(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 string, arg5 string, arg6 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdAddTxOutMetaDataForLedger_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), *(*C.swig_type_210)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_211)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_212)(unsafe.Pointer(&_swig_i_5))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdFinalizeTxSerializeForLedger(arg1 uintptr, arg2 uintptr, arg3 int, arg4 string, arg5 bool, arg6 bool, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdFinalizeTxSerializeForLedger_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), *(*C.swig_type_213)(unsafe.Pointer(&_swig_i_3)), C._Bool(_swig_i_4), C._Bool(_swig_i_5), C.swig_voidp(_swig_i_6)))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdFinalizeTxSerializeHashForLedger(arg1 uintptr, arg2 uintptr, arg3 int, arg4 string, arg5 bool, arg6 bool, arg7 bool, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdFinalizeTxSerializeHashForLedger_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), *(*C.swig_type_214)(unsafe.Pointer(&_swig_i_3)), C._Bool(_swig_i_4), C._Bool(_swig_i_5), C._Bool(_swig_i_6), C.swig_voidp(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdFreeTxSerializeForLedger(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeTxSerializeForLedger_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdParseScript(arg1 uintptr, arg2 string, arg3 *uintptr, arg4 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdParseScript_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_215)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2), C.uintptr_t(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdGetScriptItem(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetScriptItem_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func CfdFreeScriptItemHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeScriptItemHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdConvertScriptAsmToHex(arg1 uintptr, arg2 string, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdConvertScriptAsmToHex_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), *(*C.swig_type_216)(unsafe.Pointer(&_swig_i_1)), C.swig_voidp(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func CfdInitializeMultisigScriptSig(arg1 uintptr, arg2 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdInitializeMultisigScriptSig_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdAddMultisigScriptSigData(arg1 uintptr, arg2 uintptr, arg3 string, arg4 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdAddMultisigScriptSigData_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_217)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_218)(unsafe.Pointer(&_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdAddMultisigScriptSigDataToDer(arg1 uintptr, arg2 uintptr, arg3 string, arg4 int, arg5 bool, arg6 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdAddMultisigScriptSigDataToDer_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_219)(unsafe.Pointer(&_swig_i_2)), C.swig_intgo(_swig_i_3), C._Bool(_swig_i_4), *(*C.swig_type_220)(unsafe.Pointer(&_swig_i_5))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdFinalizeMultisigScriptSig(arg1 uintptr, arg2 uintptr, arg3 string, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdFinalizeMultisigScriptSig_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_221)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdFreeMultisigScriptSigHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeMultisigScriptSigHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

type CfdSequenceLockTime int
func _swig_getkCfdSequenceLockTimeDisable() (_swig_ret CfdSequenceLockTime) {
	var swig_r CfdSequenceLockTime
	swig_r = (CfdSequenceLockTime)(C._wrap_kCfdSequenceLockTimeDisable_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdSequenceLockTimeDisable CfdSequenceLockTime = _swig_getkCfdSequenceLockTimeDisable()
func _swig_getkCfdSequenceLockTimeEnableMax() (_swig_ret CfdSequenceLockTime) {
	var swig_r CfdSequenceLockTime
	swig_r = (CfdSequenceLockTime)(C._wrap_kCfdSequenceLockTimeEnableMax_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdSequenceLockTimeEnableMax CfdSequenceLockTime = _swig_getkCfdSequenceLockTimeEnableMax()
type CfdTxWitnessStackType int
func _swig_getkCfdTxWitnessStackNormal() (_swig_ret CfdTxWitnessStackType) {
	var swig_r CfdTxWitnessStackType
	swig_r = (CfdTxWitnessStackType)(C._wrap_kCfdTxWitnessStackNormal_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdTxWitnessStackNormal CfdTxWitnessStackType = _swig_getkCfdTxWitnessStackNormal()
func _swig_getkCfdTxWitnessStackPegin() (_swig_ret CfdTxWitnessStackType) {
	var swig_r CfdTxWitnessStackType
	swig_r = (CfdTxWitnessStackType)(C._wrap_kCfdTxWitnessStackPegin_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdTxWitnessStackPegin CfdTxWitnessStackType = _swig_getkCfdTxWitnessStackPegin()
type CfdFundTxOption int
func _swig_getkCfdFundTxIsBlind() (_swig_ret CfdFundTxOption) {
	var swig_r CfdFundTxOption
	swig_r = (CfdFundTxOption)(C._wrap_kCfdFundTxIsBlind_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdFundTxIsBlind CfdFundTxOption = _swig_getkCfdFundTxIsBlind()
func _swig_getkCfdFundTxDustFeeRate() (_swig_ret CfdFundTxOption) {
	var swig_r CfdFundTxOption
	swig_r = (CfdFundTxOption)(C._wrap_kCfdFundTxDustFeeRate_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdFundTxDustFeeRate CfdFundTxOption = _swig_getkCfdFundTxDustFeeRate()
func _swig_getkCfdFundTxLongTermFeeRate() (_swig_ret CfdFundTxOption) {
	var swig_r CfdFundTxOption
	swig_r = (CfdFundTxOption)(C._wrap_kCfdFundTxLongTermFeeRate_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdFundTxLongTermFeeRate CfdFundTxOption = _swig_getkCfdFundTxLongTermFeeRate()
func _swig_getkCfdFundTxKnapsackMinChange() (_swig_ret CfdFundTxOption) {
	var swig_r CfdFundTxOption
	swig_r = (CfdFundTxOption)(C._wrap_kCfdFundTxKnapsackMinChange_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdFundTxKnapsackMinChange CfdFundTxOption = _swig_getkCfdFundTxKnapsackMinChange()
func _swig_getkCfdFundTxBlindExponent() (_swig_ret CfdFundTxOption) {
	var swig_r CfdFundTxOption
	swig_r = (CfdFundTxOption)(C._wrap_kCfdFundTxBlindExponent_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdFundTxBlindExponent CfdFundTxOption = _swig_getkCfdFundTxBlindExponent()
func _swig_getkCfdFundTxBlindMinimumBits() (_swig_ret CfdFundTxOption) {
	var swig_r CfdFundTxOption
	swig_r = (CfdFundTxOption)(C._wrap_kCfdFundTxBlindMinimumBits_cfdgo_a091b56f08bd78e6())
	return swig_r
}

var KCfdFundTxBlindMinimumBits CfdFundTxOption = _swig_getkCfdFundTxBlindMinimumBits()
func CfdInitializeTransaction(arg1 uintptr, arg2 int, arg3 Uint32_t, arg4 Uint32_t, arg5 string, arg6 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdInitializeTransaction_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), *(*C.swig_type_222)(unsafe.Pointer(&_swig_i_4)), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	return swig_r
}

func CfdAddTransactionInput(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_CfdAddTransactionInput_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_223)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdAddTransactionOutput(arg1 uintptr, arg2 uintptr, arg3 Int64_t, arg4 string, arg5 string, arg6 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdAddTransactionOutput_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), *(*C.swig_type_224)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_225)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_226)(unsafe.Pointer(&_swig_i_5))))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdFinalizeTransaction(arg1 uintptr, arg2 uintptr, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdFinalizeTransaction_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2)))
	return swig_r
}

func CfdFreeTransactionHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeTransactionHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdUpdateTxOutAmount(arg1 uintptr, arg2 int, arg3 string, arg4 Uint32_t, arg5 Int64_t, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdUpdateTxOutAmount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_227)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdAddTxSign(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 Uint32_t, arg6 int, arg7 string, arg8 bool, arg9 int, arg10 bool, arg11 bool, arg12 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	swig_r = (int)(C._wrap_CfdAddTxSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_228)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_229)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.swig_intgo(_swig_i_5), *(*C.swig_type_230)(unsafe.Pointer(&_swig_i_6)), C._Bool(_swig_i_7), C.swig_intgo(_swig_i_8), C._Bool(_swig_i_9), C._Bool(_swig_i_10), C.swig_voidp(_swig_i_11)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	return swig_r
}

func CfdAddPubkeyHashSign(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 Uint32_t, arg6 int, arg7 string, arg8 string, arg9 bool, arg10 int, arg11 bool, arg12 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	swig_r = (int)(C._wrap_CfdAddPubkeyHashSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_231)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_232)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.swig_intgo(_swig_i_5), *(*C.swig_type_233)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_234)(unsafe.Pointer(&_swig_i_7)), C._Bool(_swig_i_8), C.swig_intgo(_swig_i_9), C._Bool(_swig_i_10), C.swig_voidp(_swig_i_11)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdAddScriptHashSign(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 Uint32_t, arg6 int, arg7 string, arg8 bool, arg9 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	swig_r = (int)(C._wrap_CfdAddScriptHashSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_235)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_236)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.swig_intgo(_swig_i_5), *(*C.swig_type_237)(unsafe.Pointer(&_swig_i_6)), C._Bool(_swig_i_7), C.swig_voidp(_swig_i_8)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	return swig_r
}

func CfdAddSignWithPrivkeySimple(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 Uint32_t, arg6 int, arg7 string, arg8 string, arg9 Int64_t, arg10 int, arg11 bool, arg12 bool, arg13 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	swig_r = (int)(C._wrap_CfdAddSignWithPrivkeySimple_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_238)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_239)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.swig_intgo(_swig_i_5), *(*C.swig_type_240)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_241)(unsafe.Pointer(&_swig_i_7)), C.uintptr_t(_swig_i_8), C.swig_intgo(_swig_i_9), C._Bool(_swig_i_10), C._Bool(_swig_i_11), C.swig_voidp(_swig_i_12)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdInitializeMultisigSign(arg1 uintptr, arg2 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdInitializeMultisigSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1)))
	return swig_r
}

func CfdAddMultisigSignData(arg1 uintptr, arg2 uintptr, arg3 string, arg4 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdAddMultisigSignData_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_242)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_243)(unsafe.Pointer(&_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdAddMultisigSignDataToDer(arg1 uintptr, arg2 uintptr, arg3 string, arg4 int, arg5 bool, arg6 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdAddMultisigSignDataToDer_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_244)(unsafe.Pointer(&_swig_i_2)), C.swig_intgo(_swig_i_3), C._Bool(_swig_i_4), *(*C.swig_type_245)(unsafe.Pointer(&_swig_i_5))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdFinalizeMultisigSign(arg1 uintptr, arg2 uintptr, arg3 int, arg4 string, arg5 string, arg6 Uint32_t, arg7 int, arg8 string, arg9 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	swig_r = (int)(C._wrap_CfdFinalizeMultisigSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), *(*C.swig_type_246)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_247)(unsafe.Pointer(&_swig_i_4)), C.uintptr_t(_swig_i_5), C.swig_intgo(_swig_i_6), *(*C.swig_type_248)(unsafe.Pointer(&_swig_i_7)), C.swig_voidp(_swig_i_8)))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdFreeMultisigSignHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeMultisigSignHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdVerifySignature(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 int, arg6 string, arg7 string, arg8 string, arg9 Uint32_t, arg10 int, arg11 bool, arg12 Int64_t, arg13 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12.Swigcptr()
	_swig_i_12 := arg13
	swig_r = (int)(C._wrap_CfdVerifySignature_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_249)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_250)(unsafe.Pointer(&_swig_i_3)), C.swig_intgo(_swig_i_4), *(*C.swig_type_251)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_252)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_253)(unsafe.Pointer(&_swig_i_7)), C.uintptr_t(_swig_i_8), C.swig_intgo(_swig_i_9), C._Bool(_swig_i_10), C.uintptr_t(_swig_i_11), *(*C.swig_type_254)(unsafe.Pointer(&_swig_i_12))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg13
	}
	return swig_r
}

func CfdVerifyTxSign(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 Uint32_t, arg6 string, arg7 int, arg8 string, arg9 Int64_t, arg10 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10
	swig_r = (int)(C._wrap_CfdVerifyTxSign_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_255)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_256)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), *(*C.swig_type_257)(unsafe.Pointer(&_swig_i_5)), C.swig_intgo(_swig_i_6), *(*C.swig_type_258)(unsafe.Pointer(&_swig_i_7)), C.uintptr_t(_swig_i_8), *(*C.swig_type_259)(unsafe.Pointer(&_swig_i_9))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg10
	}
	return swig_r
}

func CfdCreateSighash(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 Uint32_t, arg6 int, arg7 string, arg8 string, arg9 Int64_t, arg10 int, arg11 bool, arg12 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10
	_swig_i_10 := arg11
	_swig_i_11 := arg12
	swig_r = (int)(C._wrap_CfdCreateSighash_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_260)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_261)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.swig_intgo(_swig_i_5), *(*C.swig_type_262)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_263)(unsafe.Pointer(&_swig_i_7)), C.uintptr_t(_swig_i_8), C.swig_intgo(_swig_i_9), C._Bool(_swig_i_10), C.swig_voidp(_swig_i_11)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdGetTxInfo(arg1 uintptr, arg2 int, arg3 string, arg4 *string, arg5 *string, arg6 Uint32_t, arg7 Uint32_t, arg8 Uint32_t, arg9 Uint32_t, arg10 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9.Swigcptr()
	_swig_i_9 := arg10.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxInfo_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_264)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7), C.uintptr_t(_swig_i_8), C.uintptr_t(_swig_i_9)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetTxIn(arg1 uintptr, arg2 int, arg3 string, arg4 Uint32_t, arg5 *string, arg6 Uint32_t, arg7 Uint32_t, arg8 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdGetTxIn_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_265)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.swig_voidp(_swig_i_7)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetTxInWitness(arg1 uintptr, arg2 int, arg3 string, arg4 Uint32_t, arg5 Uint32_t, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdGetTxInWitness_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_266)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetTxOut(arg1 uintptr, arg2 int, arg3 string, arg4 Uint32_t, arg5 Int64_t, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdGetTxOut_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_267)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetTxInCount(arg1 uintptr, arg2 int, arg3 string, arg4 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxInCount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_268)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetTxInWitnessCount(arg1 uintptr, arg2 int, arg3 string, arg4 Uint32_t, arg5 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxInWitnessCount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_269)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetTxOutCount(arg1 uintptr, arg2 int, arg3 string, arg4 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxOutCount_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_270)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetTxInIndex(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 Uint32_t, arg6 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxInIndex_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_271)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_272)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdGetTxOutIndex(arg1 uintptr, arg2 int, arg3 string, arg4 string, arg5 string, arg6 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	_swig_i_5 := arg6.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxOutIndex_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_273)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_274)(unsafe.Pointer(&_swig_i_3)), *(*C.swig_type_275)(unsafe.Pointer(&_swig_i_4)), C.uintptr_t(_swig_i_5)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	return swig_r
}

func CfdInitializeTxDataHandle(arg1 uintptr, arg2 int, arg3 string, arg4 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdInitializeTxDataHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_276)(unsafe.Pointer(&_swig_i_2)), C.swig_voidp(_swig_i_3)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdFreeTxDataHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeTxDataHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}

func CfdGetModifiedTxByHandle(arg1 uintptr, arg2 uintptr, arg3 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int)(C._wrap_CfdGetModifiedTxByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2)))
	return swig_r
}

func CfdGetTxInfoByHandle(arg1 uintptr, arg2 uintptr, arg3 *string, arg4 *string, arg5 Uint32_t, arg6 Uint32_t, arg7 Uint32_t, arg8 Uint32_t, arg9 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7.Swigcptr()
	_swig_i_7 := arg8.Swigcptr()
	_swig_i_8 := arg9.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxInfoByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_voidp(_swig_i_2), C.swig_voidp(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.uintptr_t(_swig_i_6), C.uintptr_t(_swig_i_7), C.uintptr_t(_swig_i_8)))
	return swig_r
}

func CfdGetTxInByHandle(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string, arg5 Uint32_t, arg6 Uint32_t, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdGetTxInByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6)))
	return swig_r
}

func CfdGetTxInWitnessByHandle(arg1 uintptr, arg2 uintptr, arg3 int, arg4 Uint32_t, arg5 Uint32_t, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdGetTxInWitnessByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func CfdGetTxOutByHandle(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 Int64_t, arg5 *string, arg6 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdGetTxOutByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), C.swig_voidp(_swig_i_4), C.swig_voidp(_swig_i_5)))
	return swig_r
}

func CfdGetTxInCountByHandle(arg1 uintptr, arg2 uintptr, arg3 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxInCountByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func CfdGetTxInWitnessCountByHandle(arg1 uintptr, arg2 uintptr, arg3 int, arg4 Uint32_t, arg5 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxInWitnessCountByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4)))
	return swig_r
}

func CfdGetTxOutCountByHandle(arg1 uintptr, arg2 uintptr, arg3 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxOutCountByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

func CfdGetTxInIndexByHandle(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxInIndexByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_277)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetTxOutIndexByHandle(arg1 uintptr, arg2 uintptr, arg3 string, arg4 string, arg5 Uint32_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	swig_r = (int)(C._wrap_CfdGetTxOutIndexByHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_278)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_279)(unsafe.Pointer(&_swig_i_3)), C.uintptr_t(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdInitializeFundRawTx(arg1 uintptr, arg2 int, arg3 Uint32_t, arg4 string, arg5 *uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (int)(C._wrap_CfdInitializeFundRawTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.uintptr_t(_swig_i_2), *(*C.swig_type_280)(unsafe.Pointer(&_swig_i_3)), C.swig_voidp(_swig_i_4)))
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func CfdAddTxInForFundRawTx(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 Int64_t, arg6 string, arg7 string, arg8 bool, arg9 bool, arg10 bool, arg11 Uint32_t, arg12 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11.Swigcptr()
	_swig_i_11 := arg12
	swig_r = (int)(C._wrap_CfdAddTxInForFundRawTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_281)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), *(*C.swig_type_282)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_283)(unsafe.Pointer(&_swig_i_6)), C._Bool(_swig_i_7), C._Bool(_swig_i_8), C._Bool(_swig_i_9), C.uintptr_t(_swig_i_10), *(*C.swig_type_284)(unsafe.Pointer(&_swig_i_11))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg12
	}
	return swig_r
}

func CfdAddTxInTemplateForFundRawTx(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 Int64_t, arg6 string, arg7 string, arg8 bool, arg9 bool, arg10 bool, arg11 Uint32_t, arg12 string, arg13 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	_swig_i_8 := arg9
	_swig_i_9 := arg10
	_swig_i_10 := arg11.Swigcptr()
	_swig_i_11 := arg12
	_swig_i_12 := arg13
	swig_r = (int)(C._wrap_CfdAddTxInTemplateForFundRawTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_285)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), *(*C.swig_type_286)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_287)(unsafe.Pointer(&_swig_i_6)), C._Bool(_swig_i_7), C._Bool(_swig_i_8), C._Bool(_swig_i_9), C.uintptr_t(_swig_i_10), *(*C.swig_type_288)(unsafe.Pointer(&_swig_i_11)), *(*C.swig_type_289)(unsafe.Pointer(&_swig_i_12))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg12
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg13
	}
	return swig_r
}

func CfdAddUtxoForFundRawTx(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 Int64_t, arg6 string, arg7 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdAddUtxoForFundRawTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_290)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), *(*C.swig_type_291)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_292)(unsafe.Pointer(&_swig_i_6))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	return swig_r
}

func CfdAddUtxoTemplateForFundRawTx(arg1 uintptr, arg2 uintptr, arg3 string, arg4 Uint32_t, arg5 Int64_t, arg6 string, arg7 string, arg8 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6
	_swig_i_6 := arg7
	_swig_i_7 := arg8
	swig_r = (int)(C._wrap_CfdAddUtxoTemplateForFundRawTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_293)(unsafe.Pointer(&_swig_i_2)), C.uintptr_t(_swig_i_3), C.uintptr_t(_swig_i_4), *(*C.swig_type_294)(unsafe.Pointer(&_swig_i_5)), *(*C.swig_type_295)(unsafe.Pointer(&_swig_i_6)), *(*C.swig_type_296)(unsafe.Pointer(&_swig_i_7))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg7
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg8
	}
	return swig_r
}

func CfdAddTargetAmountForFundRawTx(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 Int64_t, arg5 string, arg6 string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdAddTargetAmountForFundRawTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.uintptr_t(_swig_i_3), *(*C.swig_type_297)(unsafe.Pointer(&_swig_i_4)), *(*C.swig_type_298)(unsafe.Pointer(&_swig_i_5))))
	if Swig_escape_always_false {
		Swig_escape_val = arg5
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg6
	}
	return swig_r
}

func CfdSetOptionFundRawTx(arg1 uintptr, arg2 uintptr, arg3 int, arg4 Int64_t, arg5 float64, arg6 bool) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4.Swigcptr()
	_swig_i_4 := arg5
	_swig_i_5 := arg6
	swig_r = (int)(C._wrap_CfdSetOptionFundRawTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), C.uintptr_t(_swig_i_3), C.double(_swig_i_4), C._Bool(_swig_i_5)))
	return swig_r
}

func CfdFinalizeFundRawTx(arg1 uintptr, arg2 uintptr, arg3 string, arg4 float64, arg5 Int64_t, arg6 Uint32_t, arg7 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5.Swigcptr()
	_swig_i_5 := arg6.Swigcptr()
	_swig_i_6 := arg7
	swig_r = (int)(C._wrap_CfdFinalizeFundRawTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), *(*C.swig_type_299)(unsafe.Pointer(&_swig_i_2)), C.double(_swig_i_3), C.uintptr_t(_swig_i_4), C.uintptr_t(_swig_i_5), C.swig_voidp(_swig_i_6)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func CfdGetAppendTxOutFundRawTx(arg1 uintptr, arg2 uintptr, arg3 Uint32_t, arg4 *string) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_CfdGetAppendTxOutFundRawTx_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2), C.swig_voidp(_swig_i_3)))
	return swig_r
}

func CfdFreeFundRawTxHandle(arg1 uintptr, arg2 uintptr) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (int)(C._wrap_CfdFreeFundRawTxHandle_cfdgo_a091b56f08bd78e6(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}



/**
 * Convert return code to golang built-in error struct.
 * param: retCode   return code from cfd
 * return: err      built-in error struct.
 */
func convertCfdErrorCode(retCode int) (err error) {
	switch retCode {
	case (int)(KCfdSuccess):
		return nil
	case (int)(KCfdUnknownError):
		err = fmt.Errorf("CFD Error: Unknown error occered.: errorCode=[%d]", retCode)
	case (int)(KCfdInternalError):
		err = fmt.Errorf("CFD Error: Internal error occered.: errorCode=[%d]", retCode)
	case (int)(KCfdMemoryFullError):
		err = fmt.Errorf("CFD Error: Memory is full.: errorCode=[%d]", retCode)
	case (int)(KCfdIllegalArgumentError):
		err = fmt.Errorf("CFD Error: Illegal argument passed.: errorCode=[%d]", retCode)
	case (int)(KCfdIllegalStateError):
		err = fmt.Errorf("CFD Error: Illegal state api call.: errorCode=[%d]", retCode)
	case (int)(KCfdOutOfRangeError):
		err = fmt.Errorf("CFD Error: Out of range access occered.: errorCode=[%d]", retCode)
	case (int)(KCfdInvalidSettingError):
		err = fmt.Errorf("CFD Error: Invalid setting api call.: errorCode=[%d]", retCode)
	case (int)(KCfdConnectionError):
		err = fmt.Errorf("CFD Error: Connection error occered.: errorCode=[%d]", retCode)
	case (int)(KCfdDiskAccessError):
		err = fmt.Errorf("CFD Error: Disk access error occered.: errorCode=[%d]", retCode)
	}
	return
}

/**
 * Convert handle and error code to Golang built-in error.
 * detail: if handle is nil, return fixed message by the error code.
 * param: retCode   cfd return code.
 * param: handle    cfd handle.
 * return: err      built-in error struct.
 */
func convertCfdError(retCode int, handle uintptr) (err error) {
	if retCode == (int)(KCfdSuccess) {
		return
	}

	var errorMsg string
	if handle == uintptr(0) {
		err = convertCfdErrorCode(retCode)
	} else if ret := CfdGetLastErrorMessage(handle, &errorMsg); ret != (int)(KCfdSuccess) {
		err = convertCfdErrorCode(retCode)
	} else {
		err = fmt.Errorf("CFD Error: message=[%s], code=[%d]", errorMsg, retCode)
	}
	return
}

/**
 * Get supported function.
 * return: funcFlag    function flag.
 * return: err         error struct
 */
func CfdGoGetSupportedFunction() (funcFlag uint64, err error) {
	funcFlagValue := SwigcptrUint64_t(uintptr(unsafe.Pointer(&funcFlag)))
	ret := CfdGetSupportedFunction(funcFlagValue)
	err = convertCfdError(ret, uintptr(0))
	return funcFlag, err
}

/**
 * Create cfd handle.
 * return: handle      cfd handle. release: CfdGoFreeHandle
 * return: err         error struct
 */
func CfdGoCreateHandle() (handle uintptr, err error) {
	ret := CfdCreateSimpleHandle(&handle)
	err = convertCfdError(ret, handle)
	return handle, err
}

/**
 * Free cfd handle.
 * param: handle       cfd handle
 * return: err         error struct
 */
func CfdGoFreeHandle(handle uintptr) (err error) {
	ret := CfdFreeHandle(handle)
	err = convertCfdError(ret, uintptr(0))
	return
}

/**
 * Create Address.
 * param: hashType      hash type (p2pkh, p2sh, etc...)
 * param: pubkey        pubkey (pubkey hash only)
 * param: redeemScript  redeem script (script hash only)
 * param: networkType   network type
 * return: address                  address string
 * return: lockingScript            locking script
 * return: p2shSegwitLockingScript  p2sh-segwit witness program
 * return: err                      error
 */
func CfdGoCreateAddress(hashType int, pubkey string, redeemScript string, networkType int) (address string, lockingScript string, p2shSegwitLockingScript string, err error) {

	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdCreateAddress(handle, hashType, pubkey, redeemScript, networkType, &address, &lockingScript, &p2shSegwitLockingScript)
	err = convertCfdError(ret, handle)
	return address, lockingScript, p2shSegwitLockingScript, err
}

/**
 * Create multisig script and address.
 * param: networkType   network type
 * param: hashType      hash type (p2sh, p2wsh, etc...)
 * param: pubkeys       pubkey list (max 15 key)
 * param: requireNum    pubkey require signature
 * return: address        address string
 * return: redeemScript   redeem script
 * return: witnessScript  witness script
 * return: err            error
 */
func CfdGoCreateMultisigScript(networkType int, hashType int, pubkeys []string, requireNum uint32) (address string, redeemScript string, witnessScript string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var multisigHandle uintptr
	ret := CfdInitializeMultisigScript(handle, networkType, hashType, &multisigHandle)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	defer CfdFreeMultisigScriptHandle(handle, multisigHandle)

	for i := 0; i < len(pubkeys); i++ {
		ret = CfdAddMultisigScriptData(handle, multisigHandle, pubkeys[i])
		if ret != (int)(KCfdSuccess) {
			break
		}
	}

	if ret == (int)(KCfdSuccess) {
		reqNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&requireNum)))
		ret = CfdFinalizeMultisigScript(handle, multisigHandle, reqNumPtr, &address, &redeemScript, &witnessScript)
	}

	if ret == (int)(KCfdSuccess) {
		return address, redeemScript, witnessScript, err
	} else {
		err = convertCfdError(ret, handle)
		return "", "", "", err
	}
}

/**
 * Descriptor data struct.
 */
type CfdDescriptorData struct {
	// depth (0 - )
	Depth uint32
	// script type. (CfdDescriptorScriptType)
	ScriptType int
	// locking script.
	LockingScript string
	// address string. (for ScriptType not KCfdDescriptorScriptRaw)
	Address string
	// hash type. (CfdHashType)
	HashType int
	// redeem script. (for ScriptType KCfdDescriptorScriptSh or KCfdDescriptorScriptWsh)
	RedeemScript string
	// key type. (see CfdDescriptorKeyData.KeyType)
	KeyType int
	// pubkey
	Pubkey string
	// extend pubkey
	ExtPubkey string
	// extend privkey
	ExtPrivkey string
	// has multisig
	IsMultisig bool
	// number of multisig require signatures
	ReqSigNum uint32
}

/**
 * Descriptor key data struct.
 */
type CfdDescriptorKeyData struct {
	// key type. (CfdDescriptorKeyType)
	// - KCfdDescriptorKeyNull
	// - KCfdDescriptorKeyPublic
	// - KCfdDescriptorKeyBip32
	// - KCfdDescriptorKeyBip32Priv
	KeyType int
	// pubkey
	Pubkey string
	// extend pubkey
	ExtPubkey string
	// extend privkey
	ExtPrivkey string
}

/**
 * Parse Output Descriptor.
 * param: descriptor           output descriptor
 * param: networkType          network type
 * param: bip32DerivationPath  derive path
 * return: descriptorDataList  descriptor data struct list
 * return: multisigList        multisig key struct list
 * return: err                 error
 */
func CfdGoParseDescriptor(descriptor string, networkType int, bip32DerivationPath string) (descriptorDataList []CfdDescriptorData, multisigList []CfdDescriptorKeyData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var descriptorHandle uintptr
	var maxIndex uint32
	maxIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&maxIndex)))
	ret := CfdParseDescriptor(handle, descriptor, networkType, bip32DerivationPath, &descriptorHandle, maxIndexPtr)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	defer CfdFreeDescriptorHandle(handle, descriptorHandle)

	var maxMultisigKeyNum uint32
	lastMultisigFlag := false
	keyNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&maxMultisigKeyNum)))
	descriptorDataList = make([]CfdDescriptorData, maxIndex+1, maxIndex+1)
	for i := uint32(0); i <= maxIndex; i++ {
		var data CfdDescriptorData
		var maxNum uint32
		maxNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&maxNum)))
		depthPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&(data.Depth))))
		index := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
		reqSigNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&(data.ReqSigNum))))
		ret = CfdGetDescriptorData(handle, descriptorHandle, index, maxNumPtr,
			depthPtr, &data.ScriptType, &data.LockingScript,
			&data.Address, &data.HashType, &data.RedeemScript,
			&data.KeyType, &data.Pubkey, &data.ExtPubkey, &data.ExtPrivkey,
			&data.IsMultisig, keyNumPtr, reqSigNumPtr)
		if ret != (int)(KCfdSuccess) {
			break
		}
		descriptorDataList[i] = data
		lastMultisigFlag = data.IsMultisig
	}

	if lastMultisigFlag && (ret == (int)(KCfdSuccess)) {
		multisigList = make([]CfdDescriptorKeyData, maxMultisigKeyNum, maxMultisigKeyNum)
		for i := uint32(0); i < maxMultisigKeyNum; i++ {
			var keyData CfdDescriptorKeyData
			index := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
			ret = CfdGetDescriptorMultisigKey(handle, descriptorHandle,
				index, &keyData.KeyType, &keyData.Pubkey,
				&keyData.ExtPubkey, &keyData.ExtPrivkey)
			if ret != (int)(KCfdSuccess) {
				break
			}
			multisigList[i] = keyData
		}
	}

	if ret == (int)(KCfdSuccess) {
		return descriptorDataList, multisigList, err
	} else {
		err = convertCfdError(ret, handle)
		return []CfdDescriptorData{}, []CfdDescriptorKeyData{}, err
	}
}

/**
 * Get outputDescriptor's checksum.
 * param: networkType    network type
 * param: descriptor     descriptor.
 * return: descriptorAddedChecksum   descriptor added checksum.
 * return: err                       error
 */
func CfdGoGetDescriptorChecksum(networkType int, descriptor string) (descriptorAddedChecksum string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetDescriptorChecksum(handle, networkType, descriptor, &descriptorAddedChecksum)
	err = convertCfdError(ret, handle)
	return descriptorAddedChecksum, err
}

/**
 * Get multisig pubkeys address.
 * param: redeemScript  multisig script
 * param: networkType   network type
 * param: hashType      hash type (p2sh, p2wsh, etc...)
 * return: addressList  address list
 * return: pubkeyList   pubkey list
 * return: err          error
 */
func CfdGoGetAddressesFromMultisig(redeemScript string, networkType int, hashType int) (addressList []string, pubkeyList []string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var multisigHandle uintptr
	var maxKeyNum uint32
	maxKeyNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&maxKeyNum)))

	ret := CfdGetAddressesFromMultisig(handle, redeemScript, networkType,
		hashType, &multisigHandle, maxKeyNumPtr)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	defer CfdFreeAddressesMultisigHandle(handle, multisigHandle)

	addressList = make([]string, maxKeyNum, maxKeyNum)
	pubkeyList = make([]string, maxKeyNum, maxKeyNum)
	for i := uint32(0); i < maxKeyNum; i++ {
		var pubkey string
		var address string
		index := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
		ret = CfdGetAddressFromMultisigKey(handle, multisigHandle,
			index, &address, &pubkey)
		if ret != (int)(KCfdSuccess) {
			break
		}
		addressList[i] = address
		pubkeyList[i] = pubkey
	}

	if ret == (int)(KCfdSuccess) {
		return addressList, pubkeyList, err
	} else {
		err = convertCfdError(ret, handle)
		return []string{}, []string{}, err
	}
}

/**
 * Get address from locking script.
 * param: lockingScript  locking script
 * param: networkType    network type
 * param: hashType       hash type (p2sh, p2wsh, etc...)
 * return: address       address
 * return: err           error
 */
func CfdGoGetAddressFromLockingScript(lockingScript string, networkType int) (address string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetAddressFromLockingScript(handle, lockingScript, networkType, &address)
	err = convertCfdError(ret, handle)
	return address, err
}

/**
 * Address information struct.
 */
type CfdAddressInfo struct {
	// address
	Address string
	// network type
	NetworkType int
	// hash type
	HashType int
	// witness version (unuse: -1)
	WitnessVersion int
	// locking script
	LockingScript string
	// hash
	Hash string
}

/**
 * Get address information.
 * param: address        address string
 * return: data          address data (CfdAddressInfo)
 * return: err           error
 */
func CfdGoGetAddressInfo(address string) (data CfdAddressInfo, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetAddressInfo(handle, address, &data.NetworkType, &data.HashType, &data.WitnessVersion, &data.LockingScript, &data.Hash)
	err = convertCfdError(ret, handle)
	if err == nil {
		data.Address = address
		if data.WitnessVersion > 2147483647 {
			data.WitnessVersion = (int)(KCfdWitnessVersionNone)
		}
	}
	return data, err
}

/**
 * UTXO struct.
 */
type CfdUtxo struct {
	// utxo txid
	Txid string
	// utxo vout
	Vout uint32
	// amount
	Amount int64
	// asset
	Asset string
	// output descriptor
	Descriptor string
	// is issuance output
	IsIssuance bool
	// is blind issuance output
	IsBlindIssuance bool
	// is peg-in output
	IsPegin bool
	// peg-in bitcoin tx size (require when IsPegin is true)
	PeginBtcTxSize uint32
	// fedpegscript hex (require when IsPegin is true)
	FedpegScript string
	// scriptsig template hex (require script hash estimate fee)
	ScriptSigTemplate string
}

/**
 * Selection target amount struct.
 */
type CfdTargetAmount struct {
	// Amount more than the specified amount is set in txout. default is 0 (disable).
	Amount int64
	// asset
	Asset string
}

/**
 * CoinSelection option data struct.
 */
type CfdCoinSelectOption struct {
	// fee asset
	FeeAsset string
	// tx-fee amount
	TxFeeAmount int64
	// effective feerate
	EffectiveFeeRate float64
	// longterm feerate
	LongTermFeeRate float64
	// dust feerate
	DustFeeRate float64
	// knapsack min change value. knapsack logic's threshold. Recommended value is 1.
	KnapsackMinChange int64
	// blind exponent. default is 0.
	Exponent int64
	// blind minimum bits. default is -1 (cfd-go auto).
	MinimumBits int64
}

/**
 * Create CfdCoinSelectOption struct set default value.
 * return: option        CoinSelection option
 */
func NewCfdCoinSelectionOption() CfdCoinSelectOption {
	option := CfdCoinSelectOption{}
	option.EffectiveFeeRate = float64(20.0)
	option.LongTermFeeRate = float64(-1.0)
	option.DustFeeRate = float64(-1.0)
	option.KnapsackMinChange = int64(-1)
	option.Exponent = int64(0)
	option.MinimumBits = int64(-1)
	return option
}

/**
 * Select coins.
 * param: utxos          utxo array
 * param: targetAmounts  target amount array
 * param: option         option for coinSelection
 * return: selectUtxos   select coins
 * return: totalAmounts  select amount by asset
 * return: utxoFee       fee by utxo
 * return: err           error
 */
func CfdGoCoinSelection(utxos []CfdUtxo, targetAmounts []CfdTargetAmount, option CfdCoinSelectOption) (selectUtxos []CfdUtxo, totalAmounts []CfdTargetAmount, utxoFee int64, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var coinSelectHandle uintptr
	utxoCount := (uint32)(len(utxos))
	amountCount := (uint32)(len(targetAmounts))
	utxoCountBuf := SwigcptrUint32_t(uintptr(unsafe.Pointer(&utxoCount)))
	amountCountBuf := SwigcptrUint32_t(uintptr(unsafe.Pointer(&amountCount)))
	txFeeAmountBuf := SwigcptrInt64_t(uintptr(unsafe.Pointer(&option.TxFeeAmount)))
	knapsackMinChangeBuf := SwigcptrInt64_t(uintptr(unsafe.Pointer(&option.KnapsackMinChange)))
	ret := CfdInitializeCoinSelection(handle, utxoCountBuf,
		amountCountBuf, option.FeeAsset, txFeeAmountBuf,
		option.EffectiveFeeRate, option.LongTermFeeRate, option.DustFeeRate,
		knapsackMinChangeBuf, &coinSelectHandle)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	defer CfdFreeCoinSelectionHandle(handle, coinSelectHandle)

	for i := int32(0); i < (int32)(utxoCount); i++ {
		indexBuf := SwigcptrInt32_t(uintptr(unsafe.Pointer(&i)))
		voutBuf := SwigcptrUint32_t(uintptr(unsafe.Pointer(&utxos[i].Vout)))
		amoutBuf := SwigcptrInt64_t(uintptr(unsafe.Pointer(&utxos[i].Amount)))
		ret = CfdAddCoinSelectionUtxoTemplate(handle, coinSelectHandle, indexBuf, utxos[i].Txid, voutBuf, amoutBuf, utxos[i].Asset, utxos[i].Descriptor, utxos[i].ScriptSigTemplate)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	for i := uint32(0); i < amountCount; i++ {
		indexBuf := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
		amoutBuf := SwigcptrInt64_t(uintptr(unsafe.Pointer(&targetAmounts[i].Amount)))
		ret = CfdAddCoinSelectionAmount(handle, coinSelectHandle, indexBuf, amoutBuf, targetAmounts[i].Asset)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	exponentPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&option.Exponent)))
	ret = CfdSetOptionCoinSelection(handle, coinSelectHandle, int(KCfdCoinSelectionExponent), exponentPtr, float64(0), false)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	minimumBitsPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&option.MinimumBits)))
	ret = CfdSetOptionCoinSelection(handle, coinSelectHandle, int(KCfdCoinSelectionMinimumBits), minimumBitsPtr, float64(0), false)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}

	utxoFeeBuf := SwigcptrInt64_t(uintptr(unsafe.Pointer(&utxoFee)))
	ret = CfdFinalizeCoinSelection(handle, coinSelectHandle, utxoFeeBuf)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}

	selectUtxoCount := 0
	tempUtxos := make([]CfdUtxo, utxoCount, utxoCount)
	for i := uint32(0); i < utxoCount; i++ {
		utxoIndex := int32(0)
		indexBuf := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
		utxoIndexBuf := SwigcptrInt32_t(uintptr(unsafe.Pointer(&utxoIndex)))
		ret = CfdGetSelectedCoinIndex(handle, coinSelectHandle, indexBuf, utxoIndexBuf)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
		if utxoIndex < 0 {
			break
		}
		tempUtxos[i] = utxos[utxoIndex]
		selectUtxoCount += 1
	}
	if selectUtxoCount > 0 {
		selectUtxos = make([]CfdUtxo, selectUtxoCount, selectUtxoCount)
		for i := 0; i < selectUtxoCount; i++ {
			selectUtxos[i] = tempUtxos[i]
		}
	}

	totalAmounts = make([]CfdTargetAmount, amountCount, amountCount)
	for i := uint32(0); i < amountCount; i++ {
		amount := int64(0)
		indexBuf := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
		amountBuf := SwigcptrInt64_t(uintptr(unsafe.Pointer(&amount)))
		ret = CfdGetSelectedCoinAssetAmount(handle, coinSelectHandle, indexBuf, amountBuf)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
		totalAmounts[i] = targetAmounts[i]
		totalAmounts[i].Amount = amount
	}
	return
}

/**
 * EstimateFee Input data struct.
 */
type CfdEstimateFeeInput struct {
	// utxo data
	Utxo CfdUtxo
	// is issuance input
	IsIssuance bool
	// is blind issuance input
	IsBlindIssuance bool
	// is peg-in input
	IsPegin bool
	// peg-in bitcoin tx size (require when IsPegin is true)
	PeginBtcTxSize uint32
	// fedpegscript hex (require when IsPegin is true)
	FedpegScript string
}

/**
 * EstimateFee option data struct.
 */
type CfdFeeEstimateOption struct {
	// effective feerate
	EffectiveFeeRate float64
	// use elements chain
	UseElements bool
	// fee asset
	FeeAsset string
	// Require blinding or not
	RequireBlind bool
	// blinding exponent value
	Exponent int64
	// blinding minimum bits value
	MinimumBits int64
}

/**
 * Create CfdFeeEstimateOption struct set default value.
 * return: option        EstimateFeeOption
 */
func NewCfdEstimateFeeOption() CfdFeeEstimateOption {
	option := CfdFeeEstimateOption{}
	option.EffectiveFeeRate = float64(20.0)
	option.UseElements = true
	option.FeeAsset = ""
	option.RequireBlind = true
	option.Exponent = int64(0)
	option.MinimumBits = int64(-1)
	return option
}

/**
 * Estimate fee amount.
 * param: txHex         transaction hex
 * param: inputs        inputs to set in the transaction
 * param: option        options for fee estimation
 * return: totalFee     total fee value when all utxos set to input.
 *     (totalFee = txoutFee + utxoFee)
 * return: txoutFee     base transaction fee value.
 * return: utxoFee      fee value all of input set utxo.
 */
func CfdGoEstimateFee(txHex string, inputs []CfdEstimateFeeInput, option CfdFeeEstimateOption) (totalFee, txoutFee, utxoFee int64, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var estimateFeeHandle uintptr
	if ret := CfdInitializeEstimateFee(
		handle,
		&estimateFeeHandle,
		option.UseElements,
	); ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	defer CfdFreeEstimateFeeHandle(handle, estimateFeeHandle)

	for _, input := range inputs {
		vout := SwigcptrUint32_t(uintptr(unsafe.Pointer(&input.Utxo.Vout)))
		peginBtcTxSize := SwigcptrUint32_t(uintptr(unsafe.Pointer(&input.PeginBtcTxSize)))
		if ret := CfdAddTxInTemplateForEstimateFee(
			handle,
			estimateFeeHandle,
			input.Utxo.Txid,
			vout,
			input.Utxo.Descriptor,
			input.Utxo.Asset,
			input.IsIssuance,
			input.IsBlindIssuance,
			input.IsPegin,
			peginBtcTxSize,
			input.FedpegScript,
			input.Utxo.ScriptSigTemplate,
		); ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	exponentPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&option.Exponent)))
	ret := CfdSetOptionEstimateFee(handle, estimateFeeHandle, int(KCfdEstimateFeeExponent), exponentPtr, float64(0), false)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	minimumBitsPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&option.MinimumBits)))
	ret = CfdSetOptionEstimateFee(handle, estimateFeeHandle, int(KCfdEstimateFeeMinimumBits), minimumBitsPtr, float64(0), false)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}

	var txFeeWork, inputFeeWork int64
	txFeeWorkPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&txFeeWork)))
	inputFeeWorkPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&inputFeeWork)))
	if ret := CfdFinalizeEstimateFee(
		handle,
		estimateFeeHandle,
		txHex,
		option.FeeAsset,
		txFeeWorkPtr,
		inputFeeWorkPtr,
		option.RequireBlind,
		option.EffectiveFeeRate,
	); ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}

	totalFee = txFeeWork + inputFeeWork
	txoutFee = txFeeWork
	utxoFee = inputFeeWork
	return
}

/**
 * Get initialized confidential transaction.
 * param: version       transaction version
 * param: locktime      locktime
 * return: txHex        transaction hex
 * return: err          error
 */
func CfdGoInitializeConfidentialTx(version uint32, locktime uint32) (txHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&locktime)))
	ret := CfdInitializeConfidentialTx(handle, versionPtr, locktimePtr, &txHex)
	err = convertCfdError(ret, handle)
	return txHex, err
}

/**
 * Add txin to confidential transaction.
 * param: txHex         transaction hex
 * param: txid          txid
 * param: vout          vout
 * param: sequence      sequence
 * return: outputTxHex  output transaction hex
 * return: err          error
 */
func CfdGoAddConfidentialTxIn(txHex string, txid string, vout uint32, sequence uint32) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	sequencePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sequence)))
	ret := CfdAddConfidentialTxIn(handle, txHex, txid, voutPtr, sequencePtr, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add txout to confidential transaction.
 * param: txHex               transaction hex
 * param: asset               asset
 * param: satoshiAmount       amount by satoshi
 * param: valueCommitment     amount by commitment bytes.
 * param: address             destination address
 * param: directLockingScript  locking script for direct insert.
 * param: nonce               confidential nonce
 * return: outputTxHex        output transaction hex
 * return: err                error
 */
func CfdGoAddConfidentialTxOut(txHex string, asset string, satoshiAmount int64, valueCommitment string, address string, directLockingScript string, nonce string) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdAddConfidentialTxOut(handle, txHex, asset, satoshiPtr, valueCommitment, address, directLockingScript, nonce, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Update txout of confidential transaction.
 * param: txHex               transaction hex
 * param: index               txout index
 * param: asset               asset
 * param: satoshiAmount       amount by satoshi
 * param: valueCommitment     amount by commitment bytes.
 * param: address             destination address
 * param: directLockingScript  lockingScript for direct insert.
 * param: nonce               confidential nonce
 * return: outputTxHex        output transaction hex
 * return: err                error
 */
func CfdGoUpdateConfidentialTxOut(txHex string, index uint32, asset string, satoshiAmount int64, valueCommitment string, address string, directLockingScript string, nonce string) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdUpdateConfidentialTxOut(handle, txHex, indexPtr, asset, satoshiPtr, valueCommitment, address, directLockingScript, nonce, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add output for destroying the specified amount of the specified asset.
 * This function is deprecated.
 * param: txHex               transaction hex
 * param: asset               asset
 * param: satoshiAmount       amount by satoshi
 * return: outputTxHex        output transaction hex
 * return: err                error
 */
func CfdGoAddDestoryConfidentialTxOut(txHex string, asset string, satoshiAmount int64) (outputTxHex string, err error) {
	outputTxHex, err = CfdGoAddDestroyConfidentialTxOut(txHex, asset, satoshiAmount)
	return outputTxHex, err
}

/**
 * Add output for destroying the specified amount of the specified asset.
 * param: txHex               transaction hex
 * param: asset               asset
 * param: satoshiAmount       amount by satoshi
 * return: outputTxHex        output transaction hex
 * return: err                error
 */
func CfdGoAddDestroyConfidentialTxOut(txHex string, asset string, satoshiAmount int64) (outputTxHex string, err error) {
	cfdErrHandle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(cfdErrHandle)

	burnScript, err := CfdGoConvertScriptAsmToHex("OP_RETURN") // byte of OP_RETURN
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdAddConfidentialTxOut(cfdErrHandle, txHex, asset, satoshiPtr, "", "", burnScript, "", &outputTxHex)
	err = convertCfdError(ret, cfdErrHandle)
	return outputTxHex, err
}

/**
 * TxData data struct.
 */
type CfdTxData struct {
	// txid
	Txid string
	// witness txid
	Wtxid string
	// witness hash
	WitHash string
	// size
	Size uint32
	// virtual size
	Vsize uint32
	// weight
	Weight uint32
	// version
	Version uint32
	// locktime
	LockTime uint32
}

/**
 * Get confidential transaction data.
 * param: txHex         transaction hex
 * return: data         transaction data
 * return: err          error
 */
func CfdGoGetConfidentialTxData(txHex string) (data CfdTxData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	sizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Size)))
	vsizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Vsize)))
	weightPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Weight)))
	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.LockTime)))
	ret := CfdGetConfidentialTxInfo(handle, txHex, &data.Txid, &data.Wtxid, &data.WitHash, sizePtr, vsizePtr, weightPtr, versionPtr, locktimePtr)
	err = convertCfdError(ret, handle)
	return data, err
}

/**
 * Get txin on confidential transaction.
 * param: txHex         transaction hex
 * param: index         txin index
 * return: txid         txid
 * return: vout         vout
 * return: sequence     sequence
 * return: scriptSig    unlockingScript
 * return: err          error
 */
func CfdGoGetConfidentialTxIn(txHex string, index uint32) (txid string, vout uint32, sequence uint32, scriptSig string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	sequencePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sequence)))
	ret := CfdGetConfidentialTxIn(handle, txHex, indexPtr, &txid, voutPtr, sequencePtr, &scriptSig)
	err = convertCfdError(ret, handle)
	return txid, vout, sequence, scriptSig, err
}

/**
 * Get witness stack on confidential transaction input.
 * param: txHex         transaction hex
 * param: txinIndex     txin index
 * param: stackIndex    witness stack index
 * return: stackData    witness stack data
 * return: err          error
 */
func CfdGoGetConfidentialTxInWitness(txHex string, txinIndex uint32, stackIndex uint32) (stackData string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	stackIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&stackIndex)))
	ret := CfdGetConfidentialTxInWitness(handle, txHex, txinIndexPtr, stackIndexPtr, &stackData)
	err = convertCfdError(ret, handle)
	return stackData, err
}

/**
 * Get pegin witness stack on confidential transaction input.
 * param: txHex         transaction hex
 * param: txinIndex     txin index
 * param: stackIndex    witness stack index
 * return: stackData    witness stack data
 * return: err          error
 */
func CfdGoGetConfidentialTxInPeginWitness(txHex string, txinIndex uint32, stackIndex uint32) (stackData string, err error) {
	cfdErrHandle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(cfdErrHandle)

	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	stackIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&stackIndex)))
	ret := CfdGetConfidentialTxInPeginWitness(cfdErrHandle, txHex, txinIndexPtr, stackIndexPtr, &stackData)
	err = convertCfdError(ret, cfdErrHandle)
	return stackData, err
}

/**
 * Get txin issuance on confidential transaction.
 * param: txHex             transaction hex
 * param: index             txin index
 * return: entropy          blinding asset entropy
 * return: nonce            blinding nonce
 * return: assetAmount      asset amount value
 * return: assetValue       asset commitment value
 * return: tokenAmount      token amount value
 * return: tokenValue       token commitment value
 * return: assetRangeproof  asset rangeproof
 * return: tokenRangeproof  token rangeproof
 * return: err              error
 */
func CfdGoGetTxInIssuanceInfo(txHex string, index uint32) (entropy string, nonce string, assetAmount int64, assetValue string, tokenAmount int64, tokenValue string, assetRangeproof string, tokenRangeproof string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	assetAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&assetAmount)))
	tokenAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&tokenAmount)))
	ret := CfdGetTxInIssuanceInfo(handle, txHex, indexPtr, &entropy, &nonce, assetAmountPtr, &assetValue, tokenAmountPtr, &tokenValue, &assetRangeproof, &tokenRangeproof)
	err = convertCfdError(ret, handle)
	return entropy, nonce, assetAmount, assetValue, tokenAmount, tokenValue, assetRangeproof, tokenRangeproof, err
}

/**
 * Get txout on confidential transaction.
 * param: txHex         transaction hex
 * param: index         txin index
 * return: asset            asset
 * return: satoshiAmount    amount by satoshi
 * return: valueCommitment  amount by commitment bytes.
 * return: nonce            confidential nonce
 * return: lockingScript    locking script
 * return: surjectionProof  asset surjection proof.
 * return: rangeproof       amount rangeproof.
 * return: err              error
 */
func CfdGoGetConfidentialTxOut(txHex string, index uint32) (asset string, satoshiAmount int64, valueCommitment string, nonce string, lockingScript string, surjectionProof string, rangeproof string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdGetConfidentialTxOut(handle, txHex, indexPtr, &asset, satoshiPtr, &valueCommitment, &nonce, &lockingScript, &surjectionProof, &rangeproof)
	err = convertCfdError(ret, handle)
	return asset, satoshiAmount, valueCommitment, nonce, lockingScript, surjectionProof, rangeproof, err
}

/**
 * Get txin count on confidential transaction.
 * param: txHex         transaction hex
 * return: count        txin count
 * return: err          error
 */
func CfdGoGetConfidentialTxInCount(txHex string) (count uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetConfidentialTxInCount(handle, txHex, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

/**
 * Get witness stack count on confidential transaction input.
 * param: txHex         transaction hex
 * param: txinIndex     txin index
 * return: count        witness stack count
 * return: err          error
 */
func CfdGoGetConfidentialTxInWitnessCount(txHex string, txinIndex uint32) (count uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetConfidentialTxInWitnessCount(handle, txHex, txinIndexPtr, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

/**
 * Get witness stack count on confidential transaction input.
 * param: txHex         transaction hex
 * param: txinIndex     txin index
 * return: count        witness stack count
 * return: err          error
 */
func CfdGoGetConfidentialTxInPeginWitnessCount(txHex string, txinIndex uint32) (count uint32, err error) {
	cfdErrHandle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(cfdErrHandle)

	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetConfidentialTxInPeginWitnessCount(cfdErrHandle, txHex, txinIndexPtr, countPtr)
	err = convertCfdError(ret, cfdErrHandle)
	return count, err
}

/**
 * Get txout count on confidential transaction.
 * param: txHex         transaction hex
 * return: count        txout count
 * return: err          error
 */
func CfdGoGetConfidentialTxOutCount(txHex string) (count uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetConfidentialTxOutCount(handle, txHex, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

/**
 * Get txin index on confidential transaction.
 * param: txHex    transaction hex
 * param: txid     transaction id
 * param: vout     transaction vout
 * return: index   txin index
 * return: err     error
 */
func CfdGoGetConfidentialTxInIndex(txHex string, txid string, vout uint32) (index uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	ret := CfdGetConfidentialTxInIndex(handle, txHex, txid, voutPtr, indexPtr)
	err = convertCfdError(ret, handle)
	return index, err
}

/**
 * Get txout index on confidential transaction.
 * param: txHex                transaction hex
 * param: address              address string
 * param: directLockingScript  lockingScript (if address is empty)
 * return: index               txout index
 * return: err                 error
 */
func CfdGoGetConfidentialTxOutIndex(txHex string, address string, directLockingScript string) (index uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	ret := CfdGetConfidentialTxOutIndex(handle, txHex, address, directLockingScript, indexPtr)
	err = convertCfdError(ret, handle)
	return index, err
}

/**
 * Set reissuance asset to confidential transaction.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: assetSatoshiAmount   generate asset amount
 * param: blindingNonce        blinding nonce
 * param: entropy              entropy
 * param: address              destination address
 * param: directLockingScript  txout locking script on direct.
 * return: asset               generate asset
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoSetRawReissueAsset(txHex string, txid string, vout uint32, assetSatoshiAmount int64, blindingNonce string, entropy string, address string, directLockingScript string) (asset string, outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&assetSatoshiAmount)))
	ret := CfdSetRawReissueAsset(handle, txHex, txid, voutPtr, satoshiPtr, blindingNonce, entropy, address, directLockingScript, &asset, &outputTxHex)
	err = convertCfdError(ret, handle)
	return asset, outputTxHex, err
}

/**
 * Get issuance blinding key.
 * param: masterBlindingKey    master blinding key
 * param: txid                 utxo txid
 * param: vout                 utxo vout
 * return: blindingKey         issuance blinding key
 * return: err                 error
 */
func CfdGoGetIssuanceBlindingKey(masterBlindingKey string, txid string, vout uint32) (blindingKey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdGetIssuanceBlindingKey(handle, masterBlindingKey, txid, voutPtr, &blindingKey)
	err = convertCfdError(ret, handle)
	return blindingKey, err
}

/**
 * Get default blinding key by locking script.
 * param: masterBlindingKey    master blinding key
 * param: lockingScript        locking script
 * return: blindingKey         blinding key
 * return: err                 error
 */
func CfdGoGetDefaultBlindingKey(masterBlindingKey string, lockingScript string) (blindingKey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetDefaultBlindingKey(handle, masterBlindingKey, lockingScript, &blindingKey)
	err = convertCfdError(ret, handle)
	return blindingKey, err
}

/**
 * Get default blinding key by address.
 * param: masterBlindingKey    master blinding key
 * param: address              address
 * return: blindingKey         blinding key
 * return: err                 error
 */
func CfdGoGetDefaultBlindingKeyByAddress(masterBlindingKey string, address string) (blindingKey string, err error) {
	info, err := CfdGoGetAddressInfo(address)
	if err != nil {
		return "", err
	}

	blindingKey, err = CfdGoGetDefaultBlindingKey(masterBlindingKey, info.LockingScript)
	if err != nil {
		return "", err
	}
	return blindingKey, nil
}

/**
 * Get blind transaction handle.
 * return: blindHandle         blindTx handle. release: CfdGoFreeBlindHandle
 * return: err                 error
 */
func CfdGoInitializeBlindTx() (blindHandle uintptr, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdInitializeBlindTx(handle, &blindHandle)
	err = convertCfdError(ret, handle)
	return blindHandle, err
}

/**
 * Add blind transaction txin data.
 * param: blindHandle          blindTx handle
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: asset                utxo asset
 * param: assetBlindFactor     utxo asset blind factor
 * param: valueBlindFactor     utxo amount blind factor
 * param: satoshiAmount        utxo amount
 * param: assetKey             issuance asset blinding key
 * param: tokenKey             issuance token blinding key
 * return: err                 error
 */
func CfdGoAddBlindTxInData(blindHandle uintptr, txid string, vout uint32, asset string, assetBlindFactor string, valueBlindFactor string, satoshiAmount int64, assetKey string, tokenKey string) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdAddBlindTxInData(handle, blindHandle, txid, voutPtr, asset, assetBlindFactor, valueBlindFactor, satoshiPtr, assetKey, tokenKey)
	err = convertCfdError(ret, handle)
	return err
}

/**
 * Add blind transaction txout data.
 * param: blindHandle          blindTx handle
 * param: index                txout index
 * param: confidentialKey      confidential key
 * return: err                 error
 */
func CfdGoAddBlindTxOutData(blindHandle uintptr, index uint32, confidentialKey string) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	ret := CfdAddBlindTxOutData(handle, blindHandle, indexPtr, confidentialKey)
	err = convertCfdError(ret, handle)
	return err
}

/**
 * BlindRawTransaction option data struct.
 */
type CfdBlindTxOption struct {
	// blind minimum range value
	MinimumRangeValue int64
	// blind exponent
	Exponent int64
	// blind minimum bits
	MinimumBits int64
}

/** NewCfdBlindTxOption
 * Create CfdBlindTxOption struct set default value.
 * return: option       FundRawTx option
 */
func NewCfdBlindTxOption() CfdBlindTxOption {
	option := CfdBlindTxOption{}
	option.MinimumRangeValue = int64(1)
	option.Exponent = int64(0)
	option.MinimumBits = int64(-1)
	return option
}

// CfdGoSetBlindTxOption is set blinding optional data.
func CfdGoSetBlindTxOption(blindHandle uintptr, option CfdBlindTxOption) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return err
	}
	defer CfdGoFreeHandle(handle)

	minRangeValPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&option.MinimumRangeValue)))
	ret := CfdSetBlindTxOption(handle, blindHandle, int(KCfdBlindOptionMinimumRangeValue), minRangeValPtr)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return err
	}

	exponentPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&option.Exponent)))
	ret = CfdSetBlindTxOption(handle, blindHandle, int(KCfdBlindOptionExponent), exponentPtr)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return err
	}

	minBitsPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&option.MinimumBits)))
	ret = CfdSetBlindTxOption(handle, blindHandle, int(KCfdBlindOptionMinimumBits), minBitsPtr)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return err
	}
	return nil
}

/**
 * Generate blind transaction.
 * param: blindHandle          blindTx handle
 * param: txHex                transaction hex
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoFinalizeBlindTx(blindHandle uintptr, txHex string) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdFinalizeBlindTx(handle, blindHandle, txHex, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Free blind handle.
 * param: blindHandle          blindTx handle
 * return: err                 error
 */
func CfdGoFreeBlindHandle(blindHandle uintptr) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdFreeBlindHandle(handle, blindHandle)
	err = convertCfdError(ret, handle)
	return
}

/**
 * BlindRawTransaction option data struct.
 */
type CfdBlindInputData struct {
	// Txid
	Txid string
	// Vout
	Vout uint32
	// Asset
	Asset string
	// Asset BlindFactor
	AssetBlindFactor string
	// satoshi value
	Amount int64
	// Value BlindFactor
	ValueBlindFactor string
	// (option) Asset blinding key
	AssetBlindingKey string
	// (option) Token blinding key
	TokenBlindingKey string
}

/**
 * BlindRawTransaction option data struct.
 */
type CfdBlindOutputData struct {
	// txout index (-1: auto)
	Index int
	// confidential or not address
	ConfidentialAddress string
	// (optional) confidential key
	ConfidentialKey string
}

/** CfdGoBlindRawTransaction
 * Execute blindrawtransaction.
 * param: txHex              transaction hex.
 * param: txinList           txin utxo list.
 * param: txoutList          txout target list. (need nonce empty txout)
 * param: option             blindrawtransaction option.
 * return: outputTx          blindrawtransaction tx.
 * return: err               error
 */
func CfdGoBlindRawTransaction(txHex string, txinList []CfdBlindInputData, txoutList []CfdBlindOutputData, option *CfdBlindTxOption) (outputTx string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return "", err
	}
	defer CfdGoFreeHandle(handle)

	var blindHandle uintptr
	ret := CfdInitializeBlindTx(handle, &blindHandle)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return "", err
	}
	defer CfdFreeBlindHandle(handle, blindHandle)

	if option != nil {
		minRangeValPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&(*option).MinimumRangeValue)))
		ret := CfdSetBlindTxOption(handle, blindHandle, int(KCfdBlindOptionMinimumRangeValue), minRangeValPtr)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return "", err
		}

		exponentPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&(*option).Exponent)))
		ret = CfdSetBlindTxOption(handle, blindHandle, int(KCfdBlindOptionExponent), exponentPtr)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return "", err
		}

		minBitsPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&(*option).MinimumBits)))
		ret = CfdSetBlindTxOption(handle, blindHandle, int(KCfdBlindOptionMinimumBits), minBitsPtr)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return "", err
		}
	}

	for i := 0; i < len(txinList); i++ {
		voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinList[i].Vout)))
		amountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&txinList[i].Amount)))
		ret = CfdAddBlindTxInData(handle, blindHandle, txinList[i].Txid, voutPtr, txinList[i].Asset, txinList[i].AssetBlindFactor, txinList[i].ValueBlindFactor, amountPtr, txinList[i].AssetBlindingKey, txinList[i].TokenBlindingKey)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return "", err
		}
	}

	for i := 0; i < len(txoutList); i++ {
		if txoutList[i].Index < 0 {
			ret = CfdAddBlindTxOutByAddress(handle, blindHandle, txoutList[i].ConfidentialAddress)
		} else if len(txoutList[i].ConfidentialKey) > 0 {
			index := uint32(txoutList[i].Index)
			indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
			ret = CfdAddBlindTxOutData(handle, blindHandle, indexPtr, txoutList[i].ConfidentialKey)
		} else {
			var address string
			var confidentialKey string
			var networkType int
			ret = CfdParseConfidentialAddress(handle, txoutList[i].ConfidentialAddress, &address, &confidentialKey, &networkType)
			if ret != (int)(KCfdSuccess) {
				err = convertCfdError(ret, handle)
				return "", err
			}
			index := uint32(txoutList[i].Index)
			indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
			ret = CfdAddBlindTxOutData(handle, blindHandle, indexPtr, confidentialKey)
		}
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return "", err
		}
	}

	ret = CfdFinalizeBlindTx(handle, blindHandle, txHex, &outputTx)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	return outputTx, nil
}

/**
 * Add sign data to confidential transaction.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: isWitness            insert sign data to witness stack
 * param: signDataHex          sign data hex
 * param: clearStack           cleanup stack
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddConfidentialTxSign(txHex string, txid string, vout uint32, isWitness bool, signDataHex string, clearStack bool) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdAddConfidentialTxSign(handle, txHex, txid, voutPtr, isWitness, signDataHex, clearStack, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Convert to der encode, and add sign data to confidential transaction.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: isWitness            insert sign data to witness stack
 * param: signDataHex          sign data hex
 * param: sighashType          sighash type
 * param: sighashAnyoneCanPay  sighash anyone can pay flag
 * param: clearStack           cleanup stack
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddConfidentialTxDerSign(txHex string, txid string, vout uint32, isWitness bool, signDataHex string, sighashType int, sighashAnyoneCanPay bool, clearStack bool) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdAddConfidentialTxDerSign(handle, txHex, txid, voutPtr, isWitness, signDataHex, sighashType, sighashAnyoneCanPay, clearStack, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add unlocking script to confidential transaction input by index.
 *   (prototype interface)
 * param: txHex                transaction hex
 * param: index                input index
 * param: isWitness            insert sign data to witness stack
 * param: unlockingScript      unlocking script hex
 * param: clearStack           cleanup stack
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddConfidentialTxUnlockingScriptByIndex(txHex string, index uint32, isWitness bool, unlockingScript string, clearStack bool) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	txid, vout, _, _, err := CfdGoGetConfidentialTxIn(txHex, index)
	if err != nil {
		return
	}
	txHexWork, err := CfdGoAddConfidentialTxUnlockingScript(txHex, txid, vout, isWitness, unlockingScript, clearStack)
	if err != nil {
		return
	}

	outputTxHex = txHexWork
	return
}

/**
 * Add unlocking script to confidential transaction input.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: isWitness            insert sign data to witness stack
 * param: unlockingScript      unlocking script hex
 * param: clearStack           cleanup stack
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddConfidentialTxUnlockingScript(txHex, txid string, vout uint32, isWitness bool, unlockingScript string, clearStack bool) (outputTxHex string, err error) {
	scriptItems, err := CfdGoParseScript(unlockingScript)
	if err != nil {
		return "", err
	}

	txHexWork := txHex
	clearFlag := clearStack
	for _, scriptItem := range scriptItems {
		txHexWork, err = CfdGoAddConfidentialTxSign(txHexWork, txid, vout, isWitness, scriptItem, clearFlag)
		if err != nil {
			return "", err
		}

		if clearFlag {
			clearFlag = false
		}
	}

	outputTxHex = txHexWork
	return outputTxHex, err
}

/**
 * Add multisig sign data to confidential transaction.
 * param: multiSignHandle      multisig sign handle
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: hashType             hash type
 * param: witnessScript        witness script (p2wsh, p2sh-p2wsh)
 * param: redeemScript         redeem script (p2sh, p2sh-p2wsh)
 * param: clearStack           cleanup stack
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoFinalizeElementsMultisigSign(multiSignHandle uintptr, txHex string, txid string, vout uint32, hashType int, witnessScript string, redeemScript string, clearStack bool) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdFinalizeElementsMultisigSign(handle, multiSignHandle, txHex, txid, voutPtr, hashType, witnessScript, redeemScript, clearStack, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Create sighash from confidential transaction.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: hashType             hash type
 * param: pubkey               pubkey (p2pkh, p2wpkh, p2sh-p2wpkh)
 * param: redeemScript         redeem script (p2Sh, p2wsh, p2sh-p2wsh)
 * param: satoshiAmount        amount by satoshi
 * param: valueCommitment      amount by commitment bytes.
 * param: sighashType          sighash type
 * param: sighashAnyoneCanPay  sighash anyone can pay flag
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoCreateConfidentialSighash(txHex string, txid string, vout uint32, hashType int, pubkey string, redeemScript string, satoshiAmount int64, valueCommitment string, sighashType int, sighashAnyoneCanPay bool) (sighash string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdCreateConfidentialSighash(handle, txHex, txid, voutPtr, hashType, pubkey, redeemScript, satoshiPtr, valueCommitment, sighashType, sighashAnyoneCanPay, &sighash)
	err = convertCfdError(ret, handle)
	return sighash, err
}

/**
 * Unblind txout on confidential transaction.
 * param: txHex                transaction hex
 * param: index                txout index
 * param: blindingKey          blinding key
 * return: asset               asset
 * return: satoshiAmount       satoshi amount
 * return: assetBlindFactor    asset blind factor
 * return: valueBlindFactor    amount blind factor
 * return: err                 error
 */
func CfdGoUnblindTxOut(txHex string, index uint32, blindingKey string) (asset string, satoshiAmount int64, assetBlindFactor string, valueBlindFactor string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdUnblindTxOut(handle, txHex, indexPtr, blindingKey, &asset, satoshiPtr, &assetBlindFactor, &valueBlindFactor)
	err = convertCfdError(ret, handle)
	return asset, satoshiAmount, assetBlindFactor, valueBlindFactor, err
}

/**
 * Unblind txin issuance on confidential transaction.
 * param: txHex                   transaction hex
 * param: index                   txin index
 * param: assetBlindingKey        asset blinding key
 * param: tokenBlindingKey        token blinding key
 * return: asset                  asset
 * return: assetAmount            asset amount
 * return: assetBlindFactor       issueAsset asset blind factor
 * return: assetValueBlindFactor  issueAsset value blind factor
 * return: token                  token
 * return: tokenAmount            token amount
 * return: tokenBlindFactor       issueToken asset blind factor
 * return: tokenValueBlindFactor  issueToken value blind factor
 * return: err                 error
 */
func CfdGoUnblindIssuance(txHex string, index uint32, assetBlindingKey string, tokenBlindingKey string) (asset string, assetAmount int64, assetBlindFactor string, assetValueBlindFactor string, token string, tokenAmount int64, tokenBlindFactor string, tokenValueBlindFactor string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	assetSatoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&assetAmount)))
	tokenSatoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&tokenAmount)))
	ret := CfdUnblindIssuance(handle, txHex, indexPtr, assetBlindingKey, tokenBlindingKey, &asset, assetSatoshiPtr, &assetBlindFactor, &assetValueBlindFactor, &token, tokenSatoshiPtr, &tokenBlindFactor, &tokenValueBlindFactor)
	err = convertCfdError(ret, handle)
	return asset, assetAmount, assetBlindFactor, assetValueBlindFactor, token, tokenAmount, tokenBlindFactor, tokenValueBlindFactor, err
}

/**
 * Generate multisig sign handle.
 * return: multisigSignHandle  multisig sign handle. release: CfdGoFreeMultisigSignHandle
 * return: err                 error
 */
func CfdGoInitializeMultisigSign() (multisigSignHandle uintptr, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdInitializeMultisigSign(handle, &multisigSignHandle)
	err = convertCfdError(ret, handle)
	return multisigSignHandle, err
}

/**
 * Add multisig sign data.
 * param: multisigSignHandle      multisig sign handle
 * param: signature            signature
 * param: relatedPubkey        signature related pubkey
 * return: err                 error
 */
func CfdGoAddMultisigSignData(multisigSignHandle uintptr, signature string, relatedPubkey string) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdAddMultisigSignData(handle, multisigSignHandle, signature, relatedPubkey)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Convert to der encode, and add multisig sign data.
 * param: multisigSignHandle      multisig sign handle
 * param: signature            signature
 * param: sighashType          sighash type
 * param: sighashAnyoneCanPay  sighash anyone can pay flag
 * param: relatedPubkey        signature related pubkey
 * return: err                 error
 */
func CfdGoAddMultisigSignDataToDer(multisigSignHandle uintptr, signature string, sighashType int, sighashAnyoneCanPay bool, relatedPubkey string) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdAddMultisigSignDataToDer(handle, multisigSignHandle, signature, sighashType, sighashAnyoneCanPay, relatedPubkey)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Free multisig sign handle.
 * param: multisigSignHandle   multisig sign handle
 * return: err                 error
 */
func CfdGoFreeMultisigSignHandle(multisigSignHandle uintptr) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdFreeMultisigSignHandle(handle, multisigSignHandle)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Create confidential address.
 * param: address               address
 * param: confidentialKey       confidential key
 * return: confidentialAddress  confidential address
 * return: err                  error
 */
func CfdGoCreateConfidentialAddress(address string, confidentialKey string) (confidentialAddress string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdCreateConfidentialAddress(handle, address, confidentialKey, &confidentialAddress)
	err = convertCfdError(ret, handle)
	return confidentialAddress, err
}

/**
 * Get address and confidentialKey from confidentialAddress.
 * param: confidentialAddress  confidential address
 * return: address             address
 * return: confidentialKey     confidential key
 * return: networkType         network type
 * return: err                 error
 */
func CfdGoParseConfidentialAddress(confidentialAddress string) (address string, confidentialKey string, networkType int, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdParseConfidentialAddress(handle, confidentialAddress,
		&address, &confidentialKey, &networkType)
	err = convertCfdError(ret, handle)
	return address, confidentialKey, networkType, err
}

/**
 * Calculate ec-signature from privkey.
 * param: sighash              signatufe hash
 * param: privkeyHex           privkey hex (Specify either privkeyHex or privkeyWif)
 * param: privkeyWif           privkey WIF (Specify either privkeyHex or privkeyWif)
 * param: wifNetworkType       network type (for privkey WIF)
 * param: hasGrindR            grind-r flag
 * return: signature           signature
 * return: err                 error
 */
func CfdGoCalculateEcSignature(sighash string, privkeyHex string, privkeyWif string, wifNetworkType int, hasGrindR bool) (signature string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdCalculateEcSignature(handle, sighash, privkeyHex, privkeyWif, wifNetworkType, hasGrindR, &signature)
	err = convertCfdError(ret, handle)
	return signature, err
}

/**
 * Encode ec signature by der encoding.
 * param: signature               compact format signature.
 * param: sighashType             sighash type.
 * param: sighash_anyone_can_pay  flag of signing only the current input.
 * return: derSignature   signature encoded by der encodeing.
 * return: err            error
 */
func CfdGoEncodeSignatureByDer(signature string, sighashType int, sighash_anyone_can_pay bool) (derSignature string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdEncodeSignatureByDer(handle, signature, sighashType, sighash_anyone_can_pay, &derSignature)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Create key pair.
 * param: isCompress      pubkey compressed.
 * param: networkType     privkey wif network type.
 * return: pubkey         pubkey.
 * return: privkeyHex     privkey hex.
 * return: privkeyWif     privkey wif.
 * return: err            error
 */
func CfdGoCreateKeyPair(isCompress bool, networkType int) (pubkey string, privkeyHex string, privkeyWif string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdCreateKeyPair(handle, isCompress, networkType, &pubkey, &privkeyHex, &privkeyWif)
	err = convertCfdError(ret, handle)
	return pubkey, privkeyHex, privkeyWif, err
}

/**
 * Get privkey from WIF.
 * param: privkeyWif      privkey wif.
 * param: networkType     privkey wif network type.
 * return: privkeyHex     privkey hex.
 * return: err            error
 */
func CfdGoGetPrivkeyFromWif(privkeyWif string, networkType int) (privkeyHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetPrivkeyFromWif(handle, privkeyWif, networkType, &privkeyHex)
	err = convertCfdError(ret, handle)
	return privkeyHex, err
}

/**
 * Get privkey WIF from hex.
 * param: privkeyHex      privkey hex.
 * param: networkType     privkey wif network type.
 * param: isCompress      pubkey compressed.
 * return: privkeyWif     privkey wif.
 * return: err            error
 */
func CfdGoGetPrivkeyWif(privkeyHex string, networkType int, isCompress bool) (privkeyWif string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetPrivkeyWif(handle, privkeyHex, networkType, isCompress, &privkeyWif)
	err = convertCfdError(ret, handle)
	return privkeyWif, err
}

/**
 * Parse privkey WIF data.
 * param: privkeyWif      privkey wif.
 * return: privkeyHex     privkey hex.
 * return: networkType    privkey wif network type.
 * return: isCompress     pubkey compressed.
 * return: err            error
 */
func CfdGoParsePrivkeyWif(privkeyWif string) (privkeyHex string, networkType int, isCompress bool, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdParsePrivkeyWif(handle, privkeyWif, &privkeyHex, &networkType, &isCompress)
	err = convertCfdError(ret, handle)
	return privkeyHex, networkType, isCompress, err
}

/**
 * Get pubkey from privkey.
 * param: privkeyHex      privkey hex. (or privkeyWif)
 * param: privkeyWif      privkey wif. (or privkeyHex)
 * param: isCompress      pubkey compressed.
 * return: pubkey         pubkey hex.
 * return: err            error
 */
func CfdGoGetPubkeyFromPrivkey(privkeyHex string, privkeyWif string, isCompress bool) (pubkey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetPubkeyFromPrivkey(handle, privkeyHex, privkeyWif, isCompress, &pubkey)
	err = convertCfdError(ret, handle)
	return pubkey, err
}

/** CfdGoCreateExtkey
 * Create extkey.
 * param: networkType     network type.
 * param: extkeyType      extkey type. (0: privkey, 1: pubkey)
 * param: fingerprint     fingerprint.
 * param: key             key.
 * param: chainCode       chain code.
 * param: depth           depth.
 * param: childNumber     child number. (0x80000000 over is hardened.)
 * return: extkey         extkey.
 * return: err            error
 */
func CfdGoCreateExtkey(networkType int, extkeyType int, fingerprint string, key string, chainCode string, depth byte, childNumber uint32) (extkey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	childNumberPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&childNumber)))
	ret := CfdCreateExtkey(handle, networkType, extkeyType, "", fingerprint, key, chainCode, depth, childNumberPtr, &extkey)
	err = convertCfdError(ret, handle)
	return extkey, err
}

/** CfdGoCreateExtkeyFromParent
 * Create extkey from parent key.
 * param: networkType     network type.
 * param: extkeyType      extkey type. (0: privkey, 1: pubkey)
 * param: parentKey       parent key. (pubkey or privkey)
 * param: key             key. (pubkey or privkey)
 * param: chainCode       chain code.
 * param: depth           depth.
 * param: childNumber     child number. (0x80000000 over is hardened.)
 * return: extkey         extkey.
 * return: err            error
 */
func CfdGoCreateExtkeyFromParent(networkType int, extkeyType int, parentKey string, key string, chainCode string, depth byte, childNumber uint32) (extkey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	childNumberPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&childNumber)))
	ret := CfdCreateExtkey(handle, networkType, extkeyType, parentKey, "", key, chainCode, depth, childNumberPtr, &extkey)
	err = convertCfdError(ret, handle)
	return extkey, err
}

/**
 * Create extkey from seed.
 * param: seed            seed data(hex).
 * param: networkType     network type.
 * param: keyType         extkey type. (0: privkey, 1: pubkey)
 * return: extkey         extkey.
 * return: err            error
 */
func CfdGoCreateExtkeyFromSeed(seed string, networkType int, keyType int) (extkey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdCreateExtkeyFromSeed(handle, seed, networkType, keyType, &extkey)
	err = convertCfdError(ret, handle)
	return extkey, err
}

/**
 * Create extkey from parent path.
 * param: extkey          parent extkey.
 * param: path            bip32 key path.(ex: 0/0h/0'/0)
 * param: networkType     network type.
 * param: keyType         extkey type. (0: privkey, 1: pubkey)
 * return: childExtkey    child extkey.
 * return: err            error
 */
func CfdGoCreateExtkeyFromParentPath(extkey string, path string, networkType int, keyType int) (childExtkey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdCreateExtkeyFromParentPath(handle, extkey, path, networkType, keyType, &childExtkey)
	err = convertCfdError(ret, handle)
	return childExtkey, err
}

/**
 * Create extpubkey from extprivkey.
 * param: extkey          ext privkey.
 * param: networkType     network type.
 * return: extPubkey      ext pubkey.
 * return: err            error
 */
func CfdGoCreateExtPubkey(extkey string, networkType int) (extPubkey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdCreateExtPubkey(handle, extkey, networkType, &extPubkey)
	err = convertCfdError(ret, handle)
	return extPubkey, err
}

/**
 * Get privkey from extprivkey.
 * param: extkey          ext privkey.
 * param: networkType     network type.
 * return: privkeyHex     privkey hex.
 * return: privkeyWif     privkey wif.
 * return: err            error
 */
func CfdGoGetPrivkeyFromExtkey(extkey string, networkType int) (privkeyHex string, privkeyWif string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetPrivkeyFromExtkey(handle, extkey, networkType, &privkeyHex, &privkeyWif)
	err = convertCfdError(ret, handle)
	return privkeyHex, privkeyWif, err
}

/**
 * Get pubkey from extkey.
 * param: extkey          extkey.
 * param: networkType     network type.
 * return: pubkey         pubkey.
 * return: err            error
 */
func CfdGoGetPubkeyFromExtkey(extkey string, networkType int) (pubkey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetPubkeyFromExtkey(handle, extkey, networkType, &pubkey)
	err = convertCfdError(ret, handle)
	return pubkey, err
}

/**
 * Get parent key path data.
 * param: parentExtkey       parent ext key string.
 * param: path               child path.
 * param: childExtkeyType    child key type. (see CfdDescriptorKeyType)
 * return: keyPathData       key path data.
 * return: childExtkey       child ext key string.
 * return: err               error
 */
func CfdGoGetParentExtkeyPathData(
	parentExtkey, path string, childExtkeyType int) (keyPathData, childExtkey string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetParentExtkeyPathData(handle, parentExtkey, path, childExtkeyType, &keyPathData, &childExtkey)
	err = convertCfdError(ret, handle)
	return keyPathData, childExtkey, err
}

/**
 * Extkey data struct.
 */
type CfdExtkeyData struct {
	// version
	Version string
	// parent fingerprint
	Fingerprint string
	// chain code
	ChainCode string
	// depth
	Depth uint32
	// child number
	ChildNumber uint32
}

/**
 * Get extkey information.
 * param: extkey             ext key string.
 * return: extkeyData        CfdExtkeyData
 * return: err               error
 */
func CfdGoGetExtkeyInformation(
	extkey string) (extkeyData CfdExtkeyData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	depthPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&extkeyData.Depth)))
	childNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&extkeyData.ChildNumber)))
	ret := CfdGetExtkeyInformation(handle, extkey, &extkeyData.Version, &extkeyData.Fingerprint, &extkeyData.ChainCode, depthPtr, childNumPtr)
	err = convertCfdError(ret, handle)
	return extkeyData, err
}

/**
 * Parse script items from script.
 * param: script          script.
 * return: scriptItems    script items.
 * return: err            error
 */
func CfdGoParseScript(script string) (scriptItems []string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var scriptItemHandle uintptr
	var itemNum uint32
	itemNumPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&itemNum)))
	var ret int

	if ret = CfdParseScript(handle, script, &scriptItemHandle, itemNumPtr); ret == (int)(KCfdSuccess) {
		scriptItems = make([]string, itemNum, itemNum)
		for i := uint32(0); i < itemNum; i++ {
			var item string
			index := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
			ret = CfdGetScriptItem(handle, scriptItemHandle, index, &item)
			if ret != (int)(KCfdSuccess) {
				break
			}
			scriptItems[i] = item
		}

		if freeRet := CfdFreeScriptItemHandle(handle, scriptItemHandle); ret == (int)(KCfdSuccess) {
			ret = freeRet
		}
	}

	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		scriptItems = nil
	}
	return
}

/**
 * Convert script asm to hex.
 * param: scriptAsm       script assembly string.
 * return: script         hex encodeed script.
 * return: err            error
 */
func CfdGoConvertScriptAsmToHex(scriptAsm string) (script string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	if ret := CfdConvertScriptAsmToHex(handle, scriptAsm, &script); ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		script = ""
	}

	return
}

/**
 * Create script from script items.
 * param: scriptItems     array of script element string.
 * return: script         hex encoded script.
 * return: err            error
 */
func CfdGoCreateScript(scriptItems []string) (script string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	scriptAsm := strings.Join(scriptItems, " ")
	script, err = CfdGoConvertScriptAsmToHex(scriptAsm)

	return
}

/**
 * Multisig sign data struct.
 */
type CfdMultisigSignData struct {
	// signature
	Signature string
	// use der encode
	IsDerEncode bool
	// sighash type. (CfdSighashType)
	SighashType int
	// sighash anyone can pay.
	SighashAnyoneCanPay bool
	// related pubkey.
	RelatedPubkey string
}

/**
 * Create multisig scriptsig.
 * param: signItems       array of multisig sign data struct.
 * param: redeemScript    hex encoded multisig script.
 * return: scriptsig      hex encoded script.
 * return: err            error
 */
func CfdGoCreateMultisigScriptSig(signItems []CfdMultisigSignData, redeemScript string) (scriptsig string, err error) {
	scriptsig = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var multisigHandle uintptr
	ret := CfdInitializeMultisigScriptSig(handle, &multisigHandle)
	if ret != (int)(KCfdSuccess) {
		return "", convertCfdError(ret, handle)
	}
	defer CfdFreeMultisigScriptSigHandle(handle, multisigHandle)

	for i := 0; i < len(signItems); i++ {
		if signItems[i].IsDerEncode {
			ret = CfdAddMultisigScriptSigDataToDer(handle, multisigHandle,
				signItems[i].Signature, signItems[i].SighashType,
				signItems[i].SighashAnyoneCanPay, signItems[i].RelatedPubkey)
		} else {
			ret = CfdAddMultisigScriptSigData(handle, multisigHandle,
				signItems[i].Signature, signItems[i].RelatedPubkey)
		}
		if ret != (int)(KCfdSuccess) {
			break
		}
	}

	if ret == (int)(KCfdSuccess) {
		ret = CfdFinalizeMultisigScriptSig(handle, multisigHandle, redeemScript, &scriptsig)
	}
	return scriptsig, convertCfdError(ret, handle)
}

/**
 * Set multisig scriptsig to locking script.
 * param: txHex         transaction hex
 * param: txid          txid
 * param: vout          vout
 * param: scriptsig     hex encoded script.
 * param: hashType      hash type (p2pkh, p2sh, etc...)
 * return: outputTxHex  output transaction hex
 * return: err          error
 */
func CfdGoSetElementsMultisigScriptSig(txHex string, txid string, vout uint32, scriptsig string, hashType int) (outputTxHex string, err error) {
	outputTxHex = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	scriptsigItems, err := CfdGoParseScript(scriptsig)
	if err != nil {
		return "", err
	}
	scriptsigIndex := len(scriptsigItems)
	if scriptsigIndex < 3 {
		return "", fmt.Errorf("CFD Error: message=[%s], code=[%d]", "Invalid scriptsig array length.", KCfdIllegalArgumentError)
	}

	redeemScript := ""
	witnessScript := ""
	if hashType == (int)(KCfdP2sh) {
		redeemScript = scriptsigItems[scriptsigIndex-1]
	} else if hashType == (int)(KCfdP2wsh) {
		witnessScript = scriptsigItems[scriptsigIndex-1]
	} else if hashType == (int)(KCfdP2shP2wsh) {
		witnessScript = scriptsigItems[scriptsigIndex-1]
		address := ""
		lockingScript := ""
		ret := CfdCreateAddress(handle, hashType, "", witnessScript, (int)(KCfdNetworkLiquidv1), &address, &lockingScript, &redeemScript)
		if ret != (int)(KCfdSuccess) {
			return "", convertCfdError(ret, handle)
		}
	} else {
		return "", fmt.Errorf("CFD Error: message=[%s], code=[%d]", "Unsupported hashType.", KCfdIllegalArgumentError)
	}

	var multisigHandle uintptr
	ret := CfdInitializeMultisigSign(handle, &multisigHandle)
	if ret != (int)(KCfdSuccess) {
		return "", convertCfdError(ret, handle)
	}
	defer CfdGoFreeMultisigSignHandle(multisigHandle)

	for i := 1; i < scriptsigIndex-1; i++ {
		ret := CfdAddMultisigSignData(handle, multisigHandle, scriptsigItems[i], "")
		if ret != (int)(KCfdSuccess) {
			break
		}
	}

	if ret == (int)(KCfdSuccess) {
		voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
		ret = CfdFinalizeElementsMultisigSign(handle, multisigHandle, txHex, txid, voutPtr, hashType, witnessScript, redeemScript, true, &outputTxHex)
	}
	return outputTxHex, convertCfdError(ret, handle)
}

/**
 * Verify signature in transaction input by index.
 *   (prototype interface)
 * param: txHex                 transaction hex.
 * param: signature             signature for input.
 * param: pubkey                pubkey hex.
 * param: script                script hex.
 * param: index                 index of input for verification.
 * param: sighashType           sighash type.
 * param: sighashAnyoneCanPay   sighash anyone can pay flag.
 * param: satoshiAmount         input satoshi amount.
 *     (used only for witness input.)
 * param: valueCommitment       input value commitment.
 *     (used only for witness input.)
 * param: witnessVersion        witness version.
 *     (used only for witness input. If not used, set KCfdWitnessVersionNone or "-1".)
 * return: result               result of verification signature
 * return: err                  error
 */
func CfdGoVerifyConfidentialTxSignatureByIndex(
	txHex, signature, pubkey, script string, index uint32,
	sighashType int, sighashAnyoneCanPay bool, satoshiAmount int64,
	valueCommitment string, witnessVersion int) (result bool, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	txid, vout, _, _, err := CfdGoGetConfidentialTxIn(txHex, index)
	if err != nil {
		return
	}
	resultWork, err := CfdGoVerifyConfidentialTxSignature(txHex, signature,
		pubkey, script, txid, vout, sighashType, sighashAnyoneCanPay,
		satoshiAmount, valueCommitment, witnessVersion)
	if err != nil {
		return
	}

	result = resultWork
	return
}

/**
 * Verify signature in transaction input.
 * param: txHex                 transaction hex.
 * param: signature             signature for input.
 * param: pubkey                pubkey hex.
 * param: script                script hex.
 * param: txid                  input txid.
 * param: vout                  input vout.
 * param: sighashType           sighash type.
 * param: sighashAnyoneCanPay   sighash anyone can pay flag.
 * param: satoshiAmount         input satoshi amount.
 *     (used only for witness input.)
 * param: valueCommitment       input value commitment.
 *     (used only for witness input.)
 * param: witnessVersion        witness version.
 *     (used only for witness input. If not witness input used, set KCfdWitnessVersionNone or "-1".)
 * return: result               result of verification signature
 * return: err                  error
 */
func CfdGoVerifyConfidentialTxSignature(
	txHex, signature, pubkey, script, txid string, vout uint32,
	sighashType int, sighashAnyoneCanPay bool, satoshiAmount int64,
	valueCommitment string, witnessVersion int) (result bool, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	sig := signature
	if len(signature) > (65 * 2) {
		var decodedSig string
		var decSighashType int
		var decSighashAnyoneCanPay bool
		ret := CfdDecodeSignatureFromDer(handle, signature, &decodedSig, &decSighashType, &decSighashAnyoneCanPay)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return false, err
		}
		sig = decodedSig
	}

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdVerifyConfidentialTxSignature(handle, txHex, sig,
		pubkey, script, txid, voutPtr, sighashType, sighashAnyoneCanPay,
		satoshiAmountPtr, valueCommitment, witnessVersion)

	if ret == (int)(KCfdSuccess) {
		result = true
	} else if ret == (int)(KCfdSignVerificationError) {
		result = false
	} else {
		return false, convertCfdError(ret, handle)
	}

	return
}

/**
 * Normalize ec signature to low-s form
 * param: signature              ec signature to nomalize
 * return: normalizeSignature    normalized signature
 * return: err                   error
 */
func CfdGoNormalizeSignature(signature string) (normalizedSignature string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdNormalizeSignature(handle, signature, &normalizedSignature)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		normalizedSignature = ""
	}

	return
}

/**
 * Decode der encoded signature.
 * param: derEncodedSignature      signature encoded by der encodeing.
 * return: signature               compact format signature.
 * return: sighashType             sighash type.
 * return: sighashAnyoneCanPay     flag of signing only the current input.
 * return: err                     error
 */
func CfdGoDecodeSignatureFromDer(derEncodedSignature string) (signature string, sighashType int, sighashAnyoneCanPay bool, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdDecodeSignatureFromDer(handle, derEncodedSignature, &signature, &sighashType, &sighashAnyoneCanPay)
	err = convertCfdError(ret, handle)
	return
}

/**
 * Generate sign with privkey, and add sign data to confidential transaction.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: hashType             hash type (p2pkh, p2sh, etc...)
 * param: pubkey               public key.
 * param: privkey              private key.
 * param: satoshiAmount        input satoshi amount.
 *     (used only for exist valueCommitment.)
 * param: valueCommitment      input value commitment.
 * param: sighashType          sighash type
 * param: sighashAnyoneCanPay  sighash anyone can pay flag
 * param: hasGrindR            grind-r option for ec-signature.
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddConfidentialTxSignWithPrivkey(txHex string, txid string, vout uint32, hashType int, pubkey string, privkey string, satoshiAmount int64, valueCommitment string, sighashType int, sighashAnyoneCanPay bool, hasGrindR bool) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdAddConfidentialTxSignWithPrivkeySimple(handle, txHex, txid, voutPtr, hashType, pubkey, privkey, satoshiAmountPtr, valueCommitment, sighashType, sighashAnyoneCanPay, hasGrindR, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Sign parameter data struct.
 */
type CfdSignParameter struct {
	// data hex
	Data string
	// use der encode
	IsDerEncode bool
	// sighash type. (CfdSighashType)
	SighashType int
	// sighash anyone can pay.
	SighashAnyoneCanPay bool
}

/**
 * Add pubkey hash sign data to confidential transaction.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: hashType             hash type (p2pkh, p2sh, etc...)
 * param: pubkey               public key.
 * param: CfdSignatureData     signature data.
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddConfidentialTxPubkeyHashSign(txHex string, txid string, vout uint32, hashType int, pubkey string, signatureData CfdSignParameter) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdAddPubkeyHashSign(handle, (int)(KCfdNetworkLiquidv1), txHex, txid, voutPtr, hashType, pubkey, signatureData.Data, signatureData.IsDerEncode, signatureData.SighashType, signatureData.SighashAnyoneCanPay, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add script hash sign data to confidential transaction.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: hashType             hash type (p2pkh, p2sh, etc...)
 * param: signDataList         sign data list.
 * param: redeemScript         redeem script.
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddConfidentialTxScriptHashSign(txHex string, txid string, vout uint32, hashType int, signDataList []CfdSignParameter, redeemScript string) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := (int)(KCfdSuccess)
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	workTxHex := txHex
	workOutputTxHex := ""
	netType := (int)(KCfdNetworkLiquidv1)
	clearFlag := true
	for i := 0; i < len(signDataList); i++ {
		ret = CfdAddTxSign(handle, netType, workTxHex, txid, voutPtr, hashType, signDataList[i].Data, signDataList[i].IsDerEncode, signDataList[i].SighashType, signDataList[i].SighashAnyoneCanPay, clearFlag, &workOutputTxHex)
		if ret != (int)(KCfdSuccess) {
			break
		}
		workTxHex = workOutputTxHex
		workOutputTxHex = ""
		clearFlag = false
	}

	if ret == (int)(KCfdSuccess) {
		ret = CfdAddScriptHashSign(handle, netType, workTxHex, txid, voutPtr, hashType, redeemScript, clearFlag, &outputTxHex)
	}

	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add multisig sign to confidential transaction.
 * param: txHex         transaction hex
 * param: txid          txin txid
 * param: vout          txin vout
 * param: hashType      hash type (p2pkh, p2sh, etc...)
 * param: signDataList  multisig sign data list.
 * param: redeemScript  multisig redeem script.
 * return: outputTxHex  output transaction hex
 * return: err          error
 */
func CfdGoAddConfidentialTxMultisigSign(txHex string, txid string, vout uint32, hashType int, signDataList []CfdMultisigSignData, redeemScript string) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var multisigHandle uintptr
	ret := CfdInitializeMultisigSign(handle, &multisigHandle)
	if ret != (int)(KCfdSuccess) {
		return "", convertCfdError(ret, handle)
	}
	defer CfdFreeMultisigSignHandle(handle, multisigHandle)

	for i := 0; i < len(signDataList); i++ {
		if signDataList[i].IsDerEncode {
			ret = CfdAddMultisigSignDataToDer(handle, multisigHandle,
				signDataList[i].Signature, signDataList[i].SighashType,
				signDataList[i].SighashAnyoneCanPay, signDataList[i].RelatedPubkey)
		} else {
			ret = CfdAddMultisigSignData(handle, multisigHandle,
				signDataList[i].Signature, signDataList[i].RelatedPubkey)
		}
		if ret != (int)(KCfdSuccess) {
			break
		}
	}

	if ret == (int)(KCfdSuccess) {
		voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
		ret = CfdFinalizeMultisigSign(handle, multisigHandle, (int)(KCfdNetworkLiquidv1), txHex, txid, voutPtr, hashType, redeemScript, &outputTxHex)
	}
	return outputTxHex, convertCfdError(ret, handle)
}

/**
 * Verify sign in transaction input.
 * param: txHex                transaction hex.
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: address              address string.
 * param: addressType          address type.
 * param: directLockingScript  locking script direct input.
 * param: satoshiAmount        input satoshi amount.
 *     (used only for exist valueCommitment.)
 * param: valueCommitment      input value commitment.
 * return: isSuccess           result of verification signature
 * return: err                 error
 */
func CfdGoVerifyConfidentialTxSign(txHex string, txid string, vout uint32, address string, addressType int, directLockingScript string, satoshiAmount int64, valueCommitment string) (isSuccess bool, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdVerifyConfidentialTxSign(handle, txHex, txid, voutPtr, address, addressType, directLockingScript, satoshiAmountPtr, valueCommitment)
	if ret == (int)(KCfdSuccess) {
		isSuccess = true
	} else if ret == (int)(KCfdSignVerificationError) {
		isSuccess = false
	} else {
		err = convertCfdError(ret, handle)
	}
	return isSuccess, err
}

/**
 * Verify sign in transaction input with error message.
 * param: txHex                transaction hex.
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: address              address string.
 * param: addressType          address type.
 * param: directLockingScript  locking script direct input.
 * param: satoshiAmount        input satoshi amount.
 *     (used only for exist valueCommitment.)
 * param: valueCommitment      input value commitment.
 * return: isSuccess           result of verification signature
 * return: reason              output error message.
 * return: err                 error
 */
func CfdGoVerifyConfidentialTxSignReason(txHex string, txid string, vout uint32, address string, addressType int, directLockingScript string, satoshiAmount int64, valueCommitment string) (isSuccess bool, reason string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdVerifyConfidentialTxSign(handle, txHex, txid, voutPtr, address, addressType, directLockingScript, satoshiAmountPtr, valueCommitment)
	if ret == (int)(KCfdSuccess) {
		isSuccess = true
	} else if ret == (int)(KCfdSignVerificationError) {
		isSuccess = false
		CfdGetLastErrorMessage(handle, &reason)
	} else {
		err = convertCfdError(ret, handle)
		CfdGetLastErrorMessage(handle, &reason)
	}
	return isSuccess, reason, err
}

/*
 * Output data struct.
 */
type CfdOutputData struct {
	// asset
	Asset string
	// amount
	Amount int64
	// address (not implements)
	Address string
	// locking script (not implements)
	LockingScript string
}

/**
 * Serialize transaction for ledger.
 * param: txHex                  transaction hex.
 * param: isAuthorization        authorization flag.
 * param: skipWitness            skip output witness flag.
 * return: serializeData         serialize data. (sha256 hash)
 * return: err                   error
 */
func CfdGoSerializeTxForLedger(txHex string, isAuthorization bool, skipWitness bool) (serializeData string, err error) {
	serializeData = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var serializeHandle uintptr
	ret := CfdInitializeTxSerializeForLedger(handle, &serializeHandle)
	if ret != (int)(KCfdSuccess) {
		return "", convertCfdError(ret, handle)
	}
	defer CfdFreeTxSerializeForLedger(handle, serializeHandle)

	ret = CfdFinalizeTxSerializeForLedger(handle, serializeHandle, (int)(KCfdNetworkLiquidv1), txHex, skipWitness, isAuthorization, &serializeData)
	err = convertCfdError(ret, handle)
	return serializeData, err
}

/**
 * Decode transaction hex.
 * param: txHex        transaction hex.
 * param: nettype      nettype string. (mainnet/testnet/regtest)
 * param: isElements   elements mode flag.
 * return: jsonString  response json string.
 * return: err         error
 */
func CfdGoDecodeRawTransactionJson(txHex string, netType string, isElements bool) (jsonString string, err error) {
	jsonString = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	cmdName := "DecodeRawTransaction"
	networkStr := netType
	mainchainNetworkStr := "regtest"
	if isElements {
		cmdName = "ElementsDecodeRawTransaction"
		if networkStr == "liquidv1" {
			mainchainNetworkStr = "mainnet"
		} else if networkStr == "mainnet" {
			networkStr = "liquidv1"
			mainchainNetworkStr = "mainnet"
		} else {
			networkStr = "regtest"
		}
	}
	requestJson := fmt.Sprintf(
		"{\"hex\":\"%s\",\"network\":\"%s\",\"mainchainNetwork\":\"%s\"}",
		txHex, networkStr, mainchainNetworkStr)

	ret := CfdRequestExecuteJson(handle, cmdName, requestJson, &jsonString)
	err = convertCfdError(ret, handle)
	return jsonString, err
}

/**
 * initialize bitcoin createrawtransaction with version & locktime.
 * param: version          transaction version.
 * param: locktime         transaction lock time.
 * return: createTxHandle  handle of createrawtransaction.
 * return: err             error
 */
func CfdGoInitializeTransaction(version uint32, locktime uint32) (createTxHandle uintptr, err error) {
	return InitializeTransaction(int(KCfdNetworkMainnet), version, locktime)
}

/**
 * initialize bitcoin createrawtransaction with hex.
 * param: txHex            transaction hex.
 * return: createTxHandle  handle of createrawtransaction.
 * return: err             error
 */
func CfdGoInitializeTransactionByHex(txHex string) (createTxHandle uintptr, err error) {
	return InitializeTransactionByHex(int(KCfdNetworkMainnet), txHex)
}

/**
 * initialize elements createrawtransaction with version & locktime.
 * param: version          transaction version.
 * param: locktime         transaction lock time.
 * return: createTxHandle  handle of createrawtransaction.
 * return: err             error
 */
func CfdGoInitializeConfidentialTransaction(version uint32, locktime uint32) (createTxHandle uintptr, err error) {
	return InitializeTransaction(int(KCfdNetworkLiquidv1), version, locktime)
}

/**
 * initialize elements createrawtransaction with hex.
 * param: txHex            transaction hex.
 * return: createTxHandle  handle of createrawtransaction.
 * return: err             error
 */
func CfdGoInitializeConfidentialTransactionByHex(txHex string) (createTxHandle uintptr, err error) {
	return InitializeTransactionByHex(int(KCfdNetworkLiquidv1), txHex)
}

/**
 * add transaction input. (bitcoin and elements)
 * param: createTxHandle   handle of createrawtransaction.
 * param: txid             txid of utxo.
 * param: vout             vout of utxo.
 * param: sequence         sequence number.
 * return: err             error
 */
func CfdGoAddTxInput(createTxHandle uintptr, txid string, vout uint32, sequence uint32) (err error) {
	return AddTransactionInput(createTxHandle, txid, vout, sequence)
}

/**
 * add transaction output for bitcoin.
 * param: createTxHandle   handle of createrawtransaction.
 * param: amount           amount by satoshi.
 * param: address          sending address.
 * return: err             error
 */
func CfdGoAddTxOutput(createTxHandle uintptr, amount int64, address string) (err error) {
	return AddTransactionOutput(createTxHandle, amount, address, "", "")
}

/**
 * add transaction output by locking script for bitcoin.
 * param: createTxHandle   handle of createrawtransaction.
 * param: amount           amount by satoshi.
 * param: lockingScript    locking script.
 * return: err             error
 */
func CfdGoAddTxOutputByScript(createTxHandle uintptr, amount int64, lockingScript string) (err error) {
	return AddTransactionOutput(createTxHandle, amount, "", lockingScript, "")
}

/**
 * add transaction output for elements.
 * param: createTxHandle   handle of createrawtransaction.
 * param: asset            target asset.
 * param: amount           amount by satoshi.
 * param: address          sending address.
 * return: err             error
 */
func CfdGoAddConfidentialTxOutput(createTxHandle uintptr, asset string, amount int64, address string) (err error) {
	return AddTransactionOutput(createTxHandle, amount, address, "", asset)
}

/**
 * add transaction output by locking script for elements.
 * param: createTxHandle   handle of createrawtransaction.
 * param: asset            target asset.
 * param: amount           amount by satoshi.
 * param: lockingScript    locking script.
 * return: err             error
 */
func CfdGoAddConfidentialTxOutputByScript(createTxHandle uintptr, asset string, amount int64, lockingScript string) (err error) {
	return AddTransactionOutput(createTxHandle, amount, "", lockingScript, asset)
}

/**
 * add transaction output by fee for elements.
 * param: createTxHandle   handle of createrawtransaction.
 * param: asset            target asset.
 * param: amount           amount by satoshi.
 * return: err             error
 */
func CfdGoAddConfidentialTxOutputFee(createTxHandle uintptr, asset string, amount int64) (err error) {
	return AddTransactionOutput(createTxHandle, amount, "", "", asset)
}

/**
 * add transaction output for destroy amount.
 * param: createTxHandle   handle of createrawtransaction.
 * param: asset            target asset.
 * param: amount           amount by satoshi.
 * return: err             error
 */
func CfdGoAddConfidentialTxOutputDestroyAmount(createTxHandle uintptr, asset string, amount int64) (err error) {
	burnScript, err := CfdGoConvertScriptAsmToHex("OP_RETURN") // byte of OP_RETURN
	if err != nil {
		return err
	}
	return AddTransactionOutput(createTxHandle, amount, "", burnScript, asset)
}

/**
 * finalize transaction.
 * param: createTxHandle   handle of createrawtransaction.
 * return: txHex           transaction hex.
 * return: err             error
 */
func CfdGoFinalizeTransaction(createTxHandle uintptr) (txHex string, err error) {
	return FinalizeTransaction(createTxHandle)
}

/**
 * free transaction handle.
 * param: createTxHandle   handle of createrawtransaction.
 */
func CfdGoFreeTransactionHandle(createTxHandle uintptr) {
	FreeTransactionHandle(createTxHandle)
}

/** CfdGoSerializeByteData
 * Serialize byte data.
 * param: buffer        buffer
 * return: output       serialized buffer.
 * return: err          error
 */
func CfdGoSerializeByteData(buffer string) (output string, err error) {
	output = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdSerializeByteData(handle, buffer, &output)
	err = convertCfdError(ret, handle)
	return output, err
}

/** CfdGoVerifyEcSignature
 * Verify ec signature.
 * param: sighash       signature hash.
 * param: pubkey        pubkey.
 * param: signature     signature.
 * return: isVerify     verify check.
 * return: err          error
 */
func CfdGoVerifyEcSignature(sighash string, pubkey string, signature string) (isVerify bool, err error) {
	isVerify = false
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdVerifyEcSignature(handle, sighash, pubkey, signature)
	if ret == (int)(KCfdSuccess) {
		isVerify = true
	} else if ret == (int)(KCfdSignVerificationError) {
		isVerify = false
	} else {
		err = convertCfdError(ret, handle)
	}
	return isVerify, err
}

/** CfdGoCompressPubkey
 * Compress pubkey.
 * param: pubkey              pubkey.
 * return: compressedPubkey   compressed pubkey.
 * return: err                error
 */
func CfdGoCompressPubkey(pubkey string) (compressedPubkey string, err error) {
	compressedPubkey = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdCompressPubkey(handle, pubkey, &compressedPubkey)
	err = convertCfdError(ret, handle)
	return compressedPubkey, err
}

/** CfdGoUncompressPubkey
 * Compress pubkey.
 * param: pubkey                pubkey.
 * return: uncompressedPubkey   uncompressed pubkey.
 * return: err                  error
 */
func CfdGoUncompressPubkey(pubkey string) (uncompressedPubkey string, err error) {
	uncompressedPubkey = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdUncompressPubkey(handle, pubkey, &uncompressedPubkey)
	err = convertCfdError(ret, handle)
	return uncompressedPubkey, err
}

/** CfdGoCombinePubkey
 * Combine pubkey.
 * param: pubkeyList          pubkey list.
 * return: combinedPubkey     combined pubkey.
 * return: err                error
 */
func CfdGoCombinePubkey(pubkeyList []string) (combinedPubkey string, err error) {
	combinedPubkey = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var combineHandle uintptr
	ret := CfdInitializeCombinePubkey(handle, &combineHandle)
	if ret != (int)(KCfdSuccess) {
		return "", convertCfdError(ret, handle)
	}
	defer CfdFreeCombinePubkeyHandle(handle, combineHandle)

	for i := 0; i < len(pubkeyList); i++ {
		ret = CfdAddCombinePubkey(handle, combineHandle, pubkeyList[i])
		if ret != (int)(KCfdSuccess) {
			break
		}
	}

	if ret == (int)(KCfdSuccess) {
		ret = CfdFinalizeCombinePubkey(handle, combineHandle, &combinedPubkey)
	}
	return combinedPubkey, convertCfdError(ret, handle)
}

/** CfdGoCombinePubkeyPair
 * Compress pubkey.
 * param: sourcePubkey        source pubkey.
 * param: destPubkey          destination pubkey.
 * return: combinedPubkey     combined pubkey.
 * return: err                error
 */
func CfdGoCombinePubkeyPair(sourcePubkey string, destPubkey string) (combinedPubkey string, err error) {
	pubkeys := []string{sourcePubkey, destPubkey}
	combinedPubkey, err = CfdGoCombinePubkey(pubkeys)
	return combinedPubkey, err
}

/** CfdGoPubkeyTweakAdd
 * TweakAdd pubkey.
 * param: pubkey              pubkey.
 * param: tweak               tweak data.
 * return: tweakedPubkey      tweaked pubkey.
 * return: err                error
 */
func CfdGoPubkeyTweakAdd(pubkey string, tweak string) (tweakedPubkey string, err error) {
	tweakedPubkey = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdPubkeyTweakAdd(handle, pubkey, tweak, &tweakedPubkey)
	err = convertCfdError(ret, handle)
	return tweakedPubkey, err
}

/** CfdGoPubkeyTweakMul
 * TweakMul pubkey.
 * param: pubkey              pubkey.
 * param: tweak               tweak data.
 * return: tweakedPubkey      tweaked pubkey.
 * return: err                error
 */
func CfdGoPubkeyTweakMul(pubkey string, tweak string) (tweakedPubkey string, err error) {
	tweakedPubkey = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdPubkeyTweakMul(handle, pubkey, tweak, &tweakedPubkey)
	err = convertCfdError(ret, handle)
	return tweakedPubkey, err
}

/** CfdGoNegatePubkey
 * Negate pubkey.
 * param: pubkey              pubkey.
 * return: negatePubkey       negate pubkey.
 * return: err                error
 */
func CfdGoNegatePubkey(pubkey string) (negatePubkey string, err error) {
	negatePubkey = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdNegatePubkey(handle, pubkey, &negatePubkey)
	err = convertCfdError(ret, handle)
	return negatePubkey, err
}

/** CfdGoPrivkeyTweakAdd
 * TweakAdd privkey.
 * param: privkey             privkey.
 * param: tweak               tweak data.
 * return: tweakedPrivkey     tweaked privkey.
 * return: err                error
 */
func CfdGoPrivkeyTweakAdd(privkey string, tweak string) (tweakedPrivkey string, err error) {
	tweakedPrivkey = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdPrivkeyTweakAdd(handle, privkey, tweak, &tweakedPrivkey)
	err = convertCfdError(ret, handle)
	return tweakedPrivkey, err
}

/** CfdGoPrivkeyTweakMul
 * TweakMul privkey.
 * param: privkey             privkey.
 * param: tweak               tweak data.
 * return: tweakedPrivkey     tweaked privkey.
 * return: err                error
 */
func CfdGoPrivkeyTweakMul(privkey string, tweak string) (tweakedPrivkey string, err error) {
	tweakedPrivkey = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdPrivkeyTweakMul(handle, privkey, tweak, &tweakedPrivkey)
	err = convertCfdError(ret, handle)
	return tweakedPrivkey, err
}

/** CfdGoNegatePrivkey
 * Negate privkey.
 * param: privkey             privkey.
 * return: negatePrivkey      negate privkey.
 * return: err                error
 */
func CfdGoNegatePrivkey(privkey string) (negatePrivkey string, err error) {
	negatePrivkey = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdNegatePrivkey(handle, privkey, &negatePrivkey)
	err = convertCfdError(ret, handle)
	return negatePrivkey, err
}

/** CfdGoVerifySignature
 * Verify signature.
 * param: networkType           network type.
 * param: txHex                 transaction hex.
 * param: signature             signature.
 * param: hashType              hash type.
 * param: pubkey                public key.
 * param: redeemScript          redeem script(using script hash).
 * param: txid                  utxo txid.
 * param: vout                  utxo vout.
 * param: sighashType           signature hash type.
 * param: sighashAnyoneCanPay   sighash anyone can pay flag.
 * param: satoshiValue          satoshi value.
 * param: valueByteData         value bytedata(commitment value).
 * return: isVerify             verify check.
 * return: err                  error
 */
func CfdGoVerifySignature(networkType int, txHex string, signature string, hashType int, pubkey string, redeemScript string, txid string, vout uint32, sighashType int, sighashAnyoneCanPay bool, satoshiValue int64, valueByteData string) (isVerify bool, err error) {
	isVerify = false
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	sig := signature
	if len(signature) > (65 * 2) {
		var decodedSig string
		var decSighashType int
		var decSighashAnyoneCanPay bool
		ret := CfdDecodeSignatureFromDer(handle, signature, &decodedSig, &decSighashType, &decSighashAnyoneCanPay)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return false, err
		}
		sig = decodedSig
	}

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiValue)))
	ret := CfdVerifySignature(handle, networkType, txHex, sig, hashType, pubkey, redeemScript, txid, voutPtr, sighashType, sighashAnyoneCanPay, satoshiPtr, valueByteData)
	if ret == (int)(KCfdSuccess) {
		isVerify = true
	} else if ret == (int)(KCfdSignVerificationError) {
		isVerify = false
	} else {
		err = convertCfdError(ret, handle)
	}
	return isVerify, err
}

/** CfdGoVerifyTxSign
 * Verify transaction sign.
 * param: networkType           network type.
 * param: txHex                 transaction hex.
 * param: txid                  utxo txid.
 * param: vout                  utxo vout.
 * param: address               address string.
 * param: addressType           address type.
 * param: directLockingScript   locking script on direct.
 * param: satoshiValue          satoshi value.
 * param: valueByteData         value bytedata(commitment value).
 * return: isVerify             verify check.
 * return: err                  error
 */
func CfdGoVerifyTxSign(networkType int, txHex string, txid string, vout uint32, address string, addressType int, directLockingScript string, satoshiValue int64, valueByteData string) (isVerify bool, err error) {
	isVerify = false
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiValue)))
	ret := CfdVerifyTxSign(handle, networkType, txHex, txid, voutPtr, address, addressType, directLockingScript, satoshiPtr, valueByteData)
	if ret == (int)(KCfdSuccess) {
		isVerify = true
	} else if ret == (int)(KCfdSignVerificationError) {
		isVerify = false
	} else {
		err = convertCfdError(ret, handle)
	}
	return isVerify, err
}

/** CfdGoVerifyTxSignReason
 * Verify transaction sign.
 * param: networkType           network type.
 * param: txHex                 transaction hex.
 * param: txid                  utxo txid.
 * param: vout                  utxo vout.
 * param: address               address string.
 * param: addressType           address type.
 * param: directLockingScript   locking script on direct.
 * param: satoshiValue          satoshi value.
 * param: valueByteData         value bytedata(commitment value).
 * return: isVerify             verify check.
 * return: reason               output error message.
 * return: err                  error
 */
func CfdGoVerifyTxSignReason(networkType int, txHex string, txid string, vout uint32, address string, addressType int, directLockingScript string, satoshiValue int64, valueByteData string) (isVerify bool, reason string, err error) {
	isVerify = false
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiValue)))
	ret := CfdVerifyTxSign(handle, networkType, txHex, txid, voutPtr, address, addressType, directLockingScript, satoshiPtr, valueByteData)
	if ret == (int)(KCfdSuccess) {
		isVerify = true
	} else if ret == (int)(KCfdSignVerificationError) {
		isVerify = false
		CfdGetLastErrorMessage(handle, &reason)
	} else {
		err = convertCfdError(ret, handle)
		CfdGetLastErrorMessage(handle, &reason)
	}
	return isVerify, reason, err
}

/**
 * Get transaction data.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * return: data         transaction data
 * return: err          error
 */
func CfdGoGetTxInfo(networkType int, txHex string) (data CfdTxData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	sizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Size)))
	vsizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Vsize)))
	weightPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Weight)))
	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.LockTime)))
	ret := CfdGetTxInfo(handle, networkType, txHex, &data.Txid, &data.Wtxid, sizePtr, vsizePtr, weightPtr, versionPtr, locktimePtr)
	err = convertCfdError(ret, handle)
	return data, err
}

/**
 * Get txin on transaction.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * param: index         txin index
 * return: txid         txid
 * return: vout         vout
 * return: sequence     sequence
 * return: scriptSig    unlockingScript
 * return: err          error
 */
func CfdGoGetTxIn(networkType int, txHex string, index uint32) (txid string, vout uint32, sequence uint32, scriptSig string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	sequencePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sequence)))
	ret := CfdGetTxIn(handle, networkType, txHex, indexPtr, &txid, voutPtr, sequencePtr, &scriptSig)
	err = convertCfdError(ret, handle)
	return txid, vout, sequence, scriptSig, err
}

/**
 * Get witness stack on transaction input.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * param: txinIndex     txin index
 * param: stackIndex    witness stack index
 * return: stackData    witness stack data
 * return: err          error
 */
func CfdGoGetTxInWitness(networkType int, txHex string, txinIndex uint32, stackIndex uint32) (stackData string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	stackIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&stackIndex)))
	ret := CfdGetTxInWitness(handle, networkType, txHex, txinIndexPtr, stackIndexPtr, &stackData)
	err = convertCfdError(ret, handle)
	return stackData, err
}

/**
 * Get txout on transaction.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * param: index         txin index
 * return: asset            asset
 * return: satoshiAmount    amount by satoshi
 * return: valueCommitment  amount by commitment bytes.
 * return: nonce            confidential nonce
 * return: lockingScript    locking script
 * return: err              error
 */
func CfdGoGetTxOut(networkType int, txHex string, index uint32) (satoshiAmount int64, lockingScript string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdGetTxOut(handle, networkType, txHex, indexPtr, satoshiPtr, &lockingScript)
	err = convertCfdError(ret, handle)
	return satoshiAmount, lockingScript, err
}

/**
 * Get txin count on transaction.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * return: count        txin count
 * return: err          error
 */
func CfdGoGetTxInCount(networkType int, txHex string) (count uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetTxInCount(handle, networkType, txHex, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

/**
 * Get witness stack count on transaction input.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * param: txinIndex     txin index
 * return: count        witness stack count
 * return: err          error
 */
func CfdGoGetTxInWitnessCount(networkType int, txHex string, txinIndex uint32) (count uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetTxInWitnessCount(handle, networkType, txHex, txinIndexPtr, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

/**
 * Get txout count on transaction.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * return: count        txout count
 * return: err          error
 */
func CfdGoGetTxOutCount(networkType int, txHex string) (count uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetTxOutCount(handle, networkType, txHex, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

/**
 * Get txin index on transaction.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * param: txid          transaction id
 * param: vout          transaction vout
 * return: index        txin index
 * return: err          error
 */
func CfdGoGetTxInIndex(networkType int, txHex string, txid string, vout uint32) (index uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	ret := CfdGetTxInIndex(handle, networkType, txHex, txid, voutPtr, indexPtr)
	err = convertCfdError(ret, handle)
	return index, err
}

/**
 * Get txout index on transaction.
 * param: networkType          network type.
 * param: txHex                transaction hex
 * param: address              address string
 * param: directLockingScript  lockingScript (if address is empty)
 * return: index               txout index
 * return: err                 error
 */
func CfdGoGetTxOutIndex(networkType int, txHex string, address string, directLockingScript string) (index uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	ret := CfdGetTxOutIndex(handle, networkType, txHex, address, directLockingScript, indexPtr)
	err = convertCfdError(ret, handle)
	return index, err
}

/**
 * Update txout amount on transaction.
 * param: networkType          network type.
 * param: txHex                transaction hex
 * param: index                txout index
 * param: amount               txout amount
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoUpdateTxOutAmount(networkType int, txHex string, index uint32, amount int64) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	amountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&amount)))
	ret := CfdUpdateTxOutAmount(handle, networkType, txHex, indexPtr, amountPtr, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Create sighash from transaction.
 * param: networkType          network type.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: hashType             hash type
 * param: pubkey               pubkey (p2pkh, p2wpkh, p2sh-p2wpkh)
 * param: redeemScript         redeem script (p2Sh, p2wsh, p2sh-p2wsh)
 * param: satoshiAmount        amount by satoshi
 * param: sighashType          sighash type
 * param: sighashAnyoneCanPay  sighash anyone can pay flag
 * return: sighash             signature hash
 * return: err                 error
 */
func CfdGoCreateSighash(networkType int, txHex string, txid string, vout uint32, hashType int, pubkey string, redeemScript string, satoshiAmount int64, sighashType int, sighashAnyoneCanPay bool) (sighash string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdCreateSighash(handle, networkType, txHex, txid, voutPtr, hashType, pubkey, redeemScript, satoshiPtr, sighashType, sighashAnyoneCanPay, &sighash)
	err = convertCfdError(ret, handle)
	return sighash, err
}

/**
 * Generate sign with privkey, and add sign data to confidential transaction.
 * param: networkType          network type.
 * param: txHex                transaction hex
 * param: txid                 txin txid
 * param: vout                 txin vout
 * param: hashType             hash type (p2pkh, p2sh, etc...)
 * param: pubkey               public key.
 * param: privkey              private key.
 * param: satoshiAmount        input satoshi amount.
 *     (used only for exist valueCommitment.)
 * param: sighashType          sighash type
 * param: sighashAnyoneCanPay  sighash anyone can pay flag
 * param: hasGrindR            grind-r option for ec-signature.
 * return: outputTxHex         output transaction hex
 * return: err                 error
 */
func CfdGoAddTxSignWithPrivkey(networkType int, txHex string, txid string, vout uint32, hashType int, pubkey string, privkey string, satoshiAmount int64, sighashType int, sighashAnyoneCanPay bool, hasGrindR bool) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	satoshiAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdAddSignWithPrivkeySimple(handle, networkType, txHex, txid, voutPtr, hashType, pubkey, privkey, satoshiAmountPtr, sighashType, sighashAnyoneCanPay, hasGrindR, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add pubkey hash sign data to transaction.
 * param: networkType    network type.
 * param: txHex          transaction hex
 * param: txid           txin txid
 * param: vout           txin vout
 * param: hashType       hash type (p2pkh, p2sh, etc...)
 * param: pubkey         public key.
 * param: signatureData  signature data.
 * return: outputTxHex   output transaction hex
 * return: err           error
 */
func CfdGoAddTxPubkeyHashSign(networkType int, txHex string, txid string, vout uint32, hashType int, pubkey string, signatureData CfdSignParameter) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	ret := CfdAddPubkeyHashSign(handle, networkType, txHex, txid, voutPtr, hashType, pubkey, signatureData.Data, signatureData.IsDerEncode, signatureData.SighashType, signatureData.SighashAnyoneCanPay, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add script hash sign data to transaction.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * param: txid          txin txid
 * param: vout          txin vout
 * param: hashType      hash type (p2pkh, p2sh, etc...)
 * param: signDataList  sign data list.
 * param: redeemScript  redeem script.
 * return: outputTxHex  output transaction hex
 * return: err          error
 */
func CfdGoAddTxScriptHashSign(networkType int, txHex string, txid string, vout uint32, hashType int, signDataList []CfdSignParameter, redeemScript string) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := (int)(KCfdSuccess)
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	workTxHex := txHex
	workOutputTxHex := ""
	clearFlag := true
	for i := 0; i < len(signDataList); i++ {
		ret = CfdAddTxSign(handle, networkType, workTxHex, txid, voutPtr, hashType, signDataList[i].Data, signDataList[i].IsDerEncode, signDataList[i].SighashType, signDataList[i].SighashAnyoneCanPay, clearFlag, &workOutputTxHex)
		if ret != (int)(KCfdSuccess) {
			break
		}
		workTxHex = workOutputTxHex
		workOutputTxHex = ""
		clearFlag = false
	}

	if ret == (int)(KCfdSuccess) {
		ret = CfdAddScriptHashSign(handle, networkType, workTxHex, txid, voutPtr, hashType, redeemScript, clearFlag, &outputTxHex)
	}

	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

/**
 * Add multisig sign to transaction.
 * param: networkType   network type.
 * param: txHex         transaction hex
 * param: txid          txin txid
 * param: vout          txin vout
 * param: hashType      hash type (p2pkh, p2sh, etc...)
 * param: signDataList  multisig sign data list.
 * param: redeemScript  multisig redeem script.
 * return: outputTxHex  output transaction hex
 * return: err          error
 */
func CfdGoAddTxMultisigSign(networkType int, txHex string, txid string, vout uint32, hashType int, signDataList []CfdMultisigSignData, redeemScript string) (outputTxHex string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var multisigHandle uintptr
	ret := CfdInitializeMultisigSign(handle, &multisigHandle)
	if ret != (int)(KCfdSuccess) {
		return "", convertCfdError(ret, handle)
	}
	defer CfdFreeMultisigSignHandle(handle, multisigHandle)

	for i := 0; i < len(signDataList); i++ {
		if signDataList[i].IsDerEncode {
			ret = CfdAddMultisigSignDataToDer(handle, multisigHandle,
				signDataList[i].Signature, signDataList[i].SighashType,
				signDataList[i].SighashAnyoneCanPay, signDataList[i].RelatedPubkey)
		} else {
			ret = CfdAddMultisigSignData(handle, multisigHandle,
				signDataList[i].Signature, signDataList[i].RelatedPubkey)
		}
		if ret != (int)(KCfdSuccess) {
			break
		}
	}

	if ret == (int)(KCfdSuccess) {
		voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
		ret = CfdFinalizeMultisigSign(handle, multisigHandle, networkType, txHex, txid, voutPtr, hashType, redeemScript, &outputTxHex)
	}
	return outputTxHex, convertCfdError(ret, handle)
}

/** CfdGoGetMnemonicWordList
 * Get mnemonic word list.
 * param: language        language. (default: en)
 * return: mnemonicList   mnemonic word list.
 * return: err            error
 */
func CfdGoGetMnemonicWordList(language string) (mnemonicList []string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var maxIndex uint32
	var mnemonicHandle uintptr
	maxIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&maxIndex)))
	ret := CfdInitializeMnemonicWordList(handle, language, &mnemonicHandle, maxIndexPtr)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	defer CfdFreeMnemonicWordList(handle, mnemonicHandle)

	mnemonicList = make([]string, maxIndex, maxIndex)
	for i := uint32(0); i < maxIndex; i++ {
		var word string
		indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
		ret := CfdGetMnemonicWord(handle, mnemonicHandle, indexPtr, &word)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
		mnemonicList[i] = word
	}
	return mnemonicList, err
}

/** CfdGoConvertMnemonicWordsToSeed
 * Convert mnemonic to seed.
 * param: mnemonicWords   mnemonic word array.
 * param: passphrase      passphrase
 * param: language        language. (default: en)
 * return: seed           seed hex.
 * return: entropy        entropy hex.
 * return: err            error
 */
func CfdGoConvertMnemonicWordsToSeed(mnemonicWords []string, passphrase string, language string) (seed string, entropy string, err error) {
	mnemonic := strings.Join(mnemonicWords, " ")
	seed, entropy, err = CfdGoConvertMnemonicToSeed(mnemonic, passphrase, language)
	return seed, entropy, err
}

/** CfdGoConvertMnemonicToSeed
 * Convert mnemonic to seed.
 * param: mnemonic        mnemonic string. (split space)
 * param: passphrase      passphrase
 * param: language        language. (default: en)
 * return: seed           seed hex.
 * return: entropy        mnemonic's entropy hex.
 * return: err            error
 */
func CfdGoConvertMnemonicToSeed(mnemonic string, passphrase string, language string) (seed string, entropy string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdConvertMnemonicToSeed(handle, mnemonic, passphrase, true, language, false, &seed, &entropy)
	err = convertCfdError(ret, handle)
	return seed, entropy, err
}

/** CfdGoConvertEntropyToMnemonic
 * Convert entropy to mnemonic.
 * param: entropy         entropy hex.
 * param: language        language. (default: en)
 * return: mnemonic       mnemonic string. (split space)
 * return: err            error
 */
func CfdGoConvertEntropyToMnemonic(entropy string, language string) (mnemonic string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdConvertEntropyToMnemonic(handle, entropy, language, &mnemonic)
	err = convertCfdError(ret, handle)
	return mnemonic, err
}

/**
 * FundRawTransaction option data struct.
 */
type CfdFundRawTxOption struct {
	// fee asset
	FeeAsset string
	// use blind tx
	IsBlindTx bool
	// effective feerate
	EffectiveFeeRate float64
	// longterm feerate
	LongTermFeeRate float64
	// dust feerate
	DustFeeRate float64
	// knapsack min change value. knapsack logic's threshold. Recommended value is 1.
	KnapsackMinChange int64
	// blind exponent. default is 0.
	Exponent int64
	// blind minimum bits. default is -1 (cfd-go auto).
	MinimumBits int64
}

/**
 * Selection target amount struct.
 */
type CfdFundRawTxTargetAmount struct {
	// Amount more than the specified amount is set in txout. default is 0 (disable).
	Amount int64
	// asset
	Asset string
	// address for adding txout. Also serves as a change address.
	ReservedAddress string
}

/** NewCfdFundRawTxOption
 * Create CfdFundRawTxOption struct set default value.
 * param: networkType   network type.
 * return: option       FundRawTx option
 */
func NewCfdFundRawTxOption(networkType int) CfdFundRawTxOption {
	option := CfdFundRawTxOption{}
	if networkType == int(KCfdNetworkLiquidv1) || networkType == int(KCfdNetworkElementsRegtest) {
		option.FeeAsset = "0000000000000000000000000000000000000000000000000000000000000000"
		option.IsBlindTx = true
		option.EffectiveFeeRate = float64(0.15)
		option.LongTermFeeRate = float64(-1.0)
		option.DustFeeRate = float64(-1.0)
		option.KnapsackMinChange = int64(-1)
		option.Exponent = int64(0)
		option.MinimumBits = int64(-1)
	} else {
		option.EffectiveFeeRate = float64(20.0)
		option.LongTermFeeRate = float64(-1.0)
		option.DustFeeRate = float64(-1.0)
		option.KnapsackMinChange = int64(-1)
	}
	return option
}

/** CfdGoFundRawTransactionBtc
 * Execute fundrawtransacdtion on bitcoin.
 * param: networkType        network type.
 * param: txHex              transaction hex.
 * param: txinList           txin utxo list.
 * param: utxoList           utxo list.
 * param: targetAmount       target amount. see: CfdFundRawTxTargetAmount.Amount
 * param: reservedAddress    address for adding txout. Also serves as a change address.
 * param: option             fundrawtransaction option.
 * return: outputTx          fundrawtransaction tx.
 * return: fee               fee amount.
 * return: usedAddressList   used address list.
 * return: err               error
 */
func CfdGoFundRawTransactionBtc(txHex string, txinList []CfdUtxo, utxoList []CfdUtxo, targetAmount int64, reservedAddress string, option *CfdFundRawTxOption) (outputTx string, fee int64, usedAddressList []string, err error) {
	targetAmountList := []CfdFundRawTxTargetAmount{
		{
			Amount:          targetAmount,
			Asset:           "",
			ReservedAddress: reservedAddress,
		},
	}
	outputTx, fee, usedAddressList, err = CfdGoFundRawTransaction(int(KCfdNetworkMainnet), txHex, txinList, utxoList, targetAmountList, option)
	return outputTx, fee, usedAddressList, err
}

/** CfdGoFundRawTransaction
 * Execute fundrawtransacdtion.
 * param: networkType        network type.
 * param: txHex              transaction hex.
 * param: txinList           txin utxo list.
 * param: utxoList           utxo list.
 * param: targetAmountList   selection target amount list.
 * param: option             fundrawtransaction option.
 * return: outputTx          fundrawtransaction tx.
 * return: fee               fee amount.
 * return: usedAddressList   used address list.
 * return: err               error
 */
func CfdGoFundRawTransaction(networkType int, txHex string, txinList []CfdUtxo, utxoList []CfdUtxo, targetAmountList []CfdFundRawTxTargetAmount, option *CfdFundRawTxOption) (outputTx string, fee int64, usedAddressList []string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var fundOpt CfdFundRawTxOption
	if option != nil {
		fundOpt = *option
	} else {
		fundOpt = NewCfdFundRawTxOption(networkType)
	}

	var fundHandle uintptr
	assetCount := uint32(len(targetAmountList))
	assetCountPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&assetCount)))
	ret := CfdInitializeFundRawTx(handle, networkType, assetCountPtr, fundOpt.FeeAsset, &fundHandle)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	defer CfdFreeFundRawTxHandle(handle, fundHandle)

	for i := 0; i < len(txinList); i++ {
		voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinList[i].Vout)))
		peginBtcTxSizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinList[i].PeginBtcTxSize)))
		amountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&txinList[i].Amount)))
		ret = CfdAddTxInTemplateForFundRawTx(handle, fundHandle, txinList[i].Txid, voutPtr, amountPtr, txinList[i].Descriptor, txinList[i].Asset, txinList[i].IsIssuance, txinList[i].IsBlindIssuance, txinList[i].IsPegin, peginBtcTxSizePtr, txinList[i].FedpegScript, txinList[i].ScriptSigTemplate)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	for i := 0; i < len(utxoList); i++ {
		voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&utxoList[i].Vout)))
		amountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&utxoList[i].Amount)))
		ret = CfdAddUtxoTemplateForFundRawTx(handle, fundHandle, utxoList[i].Txid, voutPtr, amountPtr, utxoList[i].Descriptor, utxoList[i].Asset, utxoList[i].ScriptSigTemplate)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	for idx := uint32(0); idx < uint32(len(targetAmountList)); idx++ {
		idxPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&idx)))
		amountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&targetAmountList[idx].Amount)))
		ret = CfdAddTargetAmountForFundRawTx(handle, fundHandle, idxPtr, amountPtr, targetAmountList[idx].Asset, targetAmountList[idx].ReservedAddress)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	var emptyInt64 int64
	emptyInt64Ptr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&emptyInt64)))
	ret = CfdSetOptionFundRawTx(handle, fundHandle, int(KCfdFundTxIsBlind), emptyInt64Ptr, float64(0), fundOpt.IsBlindTx)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	ret = CfdSetOptionFundRawTx(handle, fundHandle, int(KCfdFundTxDustFeeRate), emptyInt64Ptr, fundOpt.DustFeeRate, false)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	ret = CfdSetOptionFundRawTx(handle, fundHandle, int(KCfdFundTxLongTermFeeRate), emptyInt64Ptr, fundOpt.LongTermFeeRate, false)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	knapsackPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&fundOpt.KnapsackMinChange)))
	ret = CfdSetOptionFundRawTx(handle, fundHandle, int(KCfdFundTxKnapsackMinChange), knapsackPtr, float64(0), false)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	exponentPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&fundOpt.Exponent)))
	ret = CfdSetOptionFundRawTx(handle, fundHandle, int(KCfdFundTxBlindExponent), exponentPtr, float64(0), false)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	minimumBitsPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&fundOpt.MinimumBits)))
	ret = CfdSetOptionFundRawTx(handle, fundHandle, int(KCfdFundTxBlindMinimumBits), minimumBitsPtr, float64(0), false)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}

	var appendTxoutCount uint32
	feePtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&fee)))
	appendTxoutCountPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&appendTxoutCount)))
	ret = CfdFinalizeFundRawTx(handle, fundHandle, txHex, fundOpt.EffectiveFeeRate, feePtr, appendTxoutCountPtr, &outputTx)
	if ret != (int)(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}

	usedAddressList = make([]string, appendTxoutCount, appendTxoutCount)
	for i := uint32(0); i < appendTxoutCount; i++ {
		var addr string
		indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&i)))
		ret := CfdGetAppendTxOutFundRawTx(handle, fundHandle, indexPtr, &addr)
		if ret != (int)(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
		usedAddressList[i] = addr
	}
	return outputTx, fee, usedAddressList, nil
}

// CfdGoGetAssetCommitment get asset commitment.
func CfdGoGetAssetCommitment(asset, assetBlinder string) (assetCommitment string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdGetAssetCommitment(handle, asset, assetBlinder, &assetCommitment)
	err = convertCfdError(ret, handle)
	return assetCommitment, err
}

// CfdGoGetAssetCommitment get amount commitment.
func CfdGoGetAmountCommitment(amount int64, assetCommitment, blinder string) (commitment string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	amountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&amount)))
	ret := CfdGetValueCommitment(handle, amountPtr, assetCommitment, blinder, &commitment)
	err = convertCfdError(ret, handle)
	return commitment, err
}

func CfdGoInitializeTxDataHandle(networkType int, txHex string) (txDataHandle uintptr, err error) {
	txDataHandle = uintptr(0)
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdInitializeTxDataHandle(handle, networkType, txHex, &txDataHandle)
	err = convertCfdError(ret, handle)
	return txDataHandle, err
}

func CfdGoFreeTxDataHandle(txDataHandle uintptr) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdFreeTxDataHandle(handle, txDataHandle)
	err = convertCfdError(ret, handle)
	return
}

func CfdGoGetTxInfoByHandle(txDataHandle uintptr) (data CfdTxData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	sizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Size)))
	vsizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Vsize)))
	weightPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Weight)))
	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.LockTime)))
	ret := CfdGetTxInfoByHandle(handle, txDataHandle, &data.Txid, &data.Wtxid, sizePtr, vsizePtr, weightPtr, versionPtr, locktimePtr)
	err = convertCfdError(ret, handle)
	return data, err
}

func CfdGoGetConfidentialTxDataByHandle(txDataHandle uintptr) (data CfdTxData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	sizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Size)))
	vsizePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Vsize)))
	weightPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Weight)))
	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.Version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&data.LockTime)))
	ret := CfdGetConfidentialTxInfoByHandle(handle, txDataHandle, &data.Txid, &data.Wtxid, &data.WitHash, sizePtr, vsizePtr, weightPtr, versionPtr, locktimePtr)
	err = convertCfdError(ret, handle)
	return data, err
}

func CfdGoGetTxInByHandle(txDataHandle uintptr, index uint32) (txid string, vout uint32, sequence uint32, scriptSig string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	sequencePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sequence)))
	ret := CfdGetTxInByHandle(handle, txDataHandle, indexPtr, &txid, voutPtr, sequencePtr, &scriptSig)
	err = convertCfdError(ret, handle)
	return txid, vout, sequence, scriptSig, err
}

func CfdGoGetTxInIssuanceInfoByHandle(txDataHandle uintptr, index uint32) (entropy string, nonce string, assetAmount int64, assetValue string, tokenAmount int64, tokenValue string, assetRangeproof string, tokenRangeproof string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	assetAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&assetAmount)))
	tokenAmountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&tokenAmount)))
	ret := CfdGetTxInIssuanceInfoByHandle(handle, txDataHandle, indexPtr, &entropy, &nonce, assetAmountPtr, &assetValue, tokenAmountPtr, &tokenValue, &assetRangeproof, &tokenRangeproof)
	err = convertCfdError(ret, handle)
	return entropy, nonce, assetAmount, assetValue, tokenAmount, tokenValue, assetRangeproof, tokenRangeproof, err
}

func CfdGoGetTxInWitnessByHandle(txDataHandle uintptr, witnessType int, txinIndex uint32, stackIndex uint32) (stackData string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	stackIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&stackIndex)))
	ret := CfdGetTxInWitnessByHandle(handle, txDataHandle, witnessType, txinIndexPtr, stackIndexPtr, &stackData)
	err = convertCfdError(ret, handle)
	return stackData, err
}

func CfdGoGetTxOutByHandle(txDataHandle uintptr, index uint32) (satoshiAmount int64, lockingScript string, asset string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdGetTxOutByHandle(handle, txDataHandle, indexPtr, satoshiPtr, &lockingScript, &asset)
	err = convertCfdError(ret, handle)
	return satoshiAmount, lockingScript, asset, err
}

func CfdGoGetConfidentialTxOutSimpleByHandle(txDataHandle uintptr, index uint32) (asset string, satoshiAmount int64, valueCommitment string, nonce string, lockingScript string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdGetConfidentialTxOutSimpleByHandle(handle, txDataHandle, indexPtr, &asset, satoshiPtr, &valueCommitment, &nonce, &lockingScript)
	err = convertCfdError(ret, handle)
	return asset, satoshiAmount, valueCommitment, nonce, lockingScript, err
}

func CfdGoGetConfidentialTxOutByHandle(txDataHandle uintptr, index uint32) (asset string, satoshiAmount int64, valueCommitment string, nonce string, lockingScript string, surjectionProof string, rangeproof string, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	satoshiPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&satoshiAmount)))
	ret := CfdGetConfidentialTxOutByHandle(handle, txDataHandle, indexPtr, &asset, satoshiPtr, &valueCommitment, &nonce, &lockingScript, &surjectionProof, &rangeproof)
	err = convertCfdError(ret, handle)
	return asset, satoshiAmount, valueCommitment, nonce, lockingScript, surjectionProof, rangeproof, err
}

func CfdGoGetTxInCountByHandle(txDataHandle uintptr) (count uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetTxInCountByHandle(handle, txDataHandle, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

func CfdGoGetTxInWitnessCountByHandle(txDataHandle uintptr, witnessType int, txinIndex uint32) (count uint32, err error) {
	// witnessType: 0 (normal), 1(pegin)
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	txinIndexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinIndex)))
	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetTxInWitnessCountByHandle(handle, txDataHandle, witnessType, txinIndexPtr, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

func CfdGoGetTxOutCountByHandle(txDataHandle uintptr) (count uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	countPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&count)))
	ret := CfdGetTxOutCountByHandle(handle, txDataHandle, countPtr)
	err = convertCfdError(ret, handle)
	return count, err
}

func CfdGoGetTxInIndexByHandle(txDataHandle uintptr, txid string, vout uint32) (index uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	ret := CfdGetTxInIndexByHandle(handle, txDataHandle, txid, voutPtr, indexPtr)
	err = convertCfdError(ret, handle)
	return index, err
}

func CfdGoGetTxOutIndexByHandle(txDataHandle uintptr, address string, directLockingScript string) (index uint32, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	indexPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&index)))
	ret := CfdGetTxOutIndexByHandle(handle, txDataHandle, address, directLockingScript, indexPtr)
	err = convertCfdError(ret, handle)
	return index, err
}

// v0.2 API ------------------------------------------------------------------

// ByteData This struct holds a byte array.
type ByteData struct {
	hex string
}

// NewByteData This function create a bytedata from a byte array.
func NewByteData(data []byte) ByteData {
	var obj ByteData
	obj.hex = hex.EncodeToString(data)
	return obj
}

// NewByteDataFromHex This function create a bytedata from a hex string.
func NewByteDataFromHex(hexStr string) (ByteData, error) {
	var obj ByteData
	_, osErr := hex.DecodeString(hexStr)
	if osErr != nil {
		return obj, convertCfdError(int(KCfdIllegalArgumentError), uintptr(0))
	}
	obj.hex = hexStr
	return obj, nil
}

// NewByteDataFromHex This function create a bytedata from a hex string. On error, it returns nil.
func NewByteDataFromHexIgnoreError(hexStr string) *ByteData {
	var obj ByteData
	_, osErr := hex.DecodeString(hexStr)
	if osErr != nil {
		return nil
	}
	obj.hex = hexStr
	return &obj
}

// ToHex This function return a hex string.
func (obj *ByteData) ToHex() string {
	return obj.hex
}

// ToHex This function return a byte array.
func (obj *ByteData) ToSlice() []byte {
	data, osErr := hex.DecodeString(obj.hex)
	if osErr != nil {
		return []byte{}
	}
	return data
}

// EcdsaAdaptorUtil This struct use for the accessing to ecdsa-adaptor function.
type EcdsaAdaptorUtil struct {
}

// NewEcdsaAdaptorUtil This function return a EcdsaAdaptorUtil.
func NewEcdsaAdaptorUtil() *EcdsaAdaptorUtil {
	return &EcdsaAdaptorUtil{}
}

// Sign This function return a ecdsa-adaptor's signature and proof.
func (obj *EcdsaAdaptorUtil) Sign(msg, secretKey, adaptor ByteData) (adaptorSignature, adaptorProof ByteData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var signature string
	var proof string
	ret := CfdSignEcdsaAdaptor(handle, msg.ToHex(), secretKey.ToHex(), adaptor.ToHex(), &signature, &proof)
	err = convertCfdError(ret, handle)
	if err == nil {
		adaptorSignature = ByteData{hex: signature}
		adaptorProof = ByteData{hex: proof}
	}
	return adaptorSignature, adaptorProof, err
}

// Adapt This function return a decrypted signature.
func (obj *EcdsaAdaptorUtil) Adapt(adaptorSignature, adaptorSecret ByteData) (signature ByteData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var ecSignature string
	ret := CfdAdaptEcdsaAdaptor(handle, adaptorSignature.ToHex(), adaptorSecret.ToHex(), &ecSignature)
	err = convertCfdError(ret, handle)
	if err == nil {
		signature = ByteData{hex: ecSignature}
	}
	return signature, err
}

// ExtractSecret This function return a adaptor secret.
func (obj *EcdsaAdaptorUtil) ExtractSecret(adaptorSignature, signature, adaptor ByteData) (secret ByteData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var adaptorSecret string
	ret := CfdExtractEcdsaAdaptorSecret(handle, adaptorSignature.ToHex(), signature.ToHex(), adaptor.ToHex(), &adaptorSecret)
	err = convertCfdError(ret, handle)
	if err == nil {
		secret = ByteData{hex: adaptorSecret}
	}
	return secret, err
}

// Verify This function verify a ecdsa-adaptor's signature.
func (obj *EcdsaAdaptorUtil) Verify(adaptorSignature, adaptorProof, adaptor, msg, pubkey ByteData) (isVerify bool, err error) {
	isVerify = false
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdVerifyEcdsaAdaptor(handle, adaptorSignature.ToHex(), adaptorProof.ToHex(), adaptor.ToHex(), msg.ToHex(), pubkey.ToHex())
	if ret == (int)(KCfdSuccess) {
		isVerify = true
	} else if ret == (int)(KCfdSignVerificationError) {
		isVerify = false
	} else {
		err = convertCfdError(ret, handle)
	}
	return isVerify, err
}

// SchnorrUtil This struct use for the accessing to schnorr function.
type SchnorrUtil struct {
}

// NewSchnorrUtil This function return a SchnorrUtil.
func NewSchnorrUtil() *SchnorrUtil {
	return &SchnorrUtil{}
}

// GetPubkeyFromPrivkey (deprecated) This function return a schnorr's pubkey. Please use GetSchnorrPubkeyFromPrivkey.
func (obj *SchnorrUtil) GetPubkeyFromPrivkey(key ByteData) (pubkey ByteData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var schnorrPubkey string
	parity := false
	ret := CfdGetSchnorrPubkeyFromPrivkey(handle, key.ToHex(), &schnorrPubkey, &parity)
	err = convertCfdError(ret, handle)
	if err == nil {
		pubkey = ByteData{hex: schnorrPubkey}
	}
	return pubkey, err
}

// GetSchnorrPubkeyFromPrivkey This function return a schnorr's pubkey.
func (obj *SchnorrUtil) GetSchnorrPubkeyFromPrivkey(key ByteData) (pubkey ByteData, parity bool, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var schnorrPubkey string
	ret := CfdGetSchnorrPubkeyFromPrivkey(handle, key.ToHex(), &schnorrPubkey, &parity)
	err = convertCfdError(ret, handle)
	if err == nil {
		pubkey = ByteData{hex: schnorrPubkey}
	}
	return pubkey, parity, err
}

// GetSchnorrPubkeyFromPubkey This function return a schnorr's pubkey.
func (obj *SchnorrUtil) GetSchnorrPubkeyFromPubkey(key ByteData) (pubkey ByteData, parity bool, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var schnorrPubkey string
	ret := CfdGetSchnorrPubkeyFromPubkey(handle, key.ToHex(), &schnorrPubkey, &parity)
	err = convertCfdError(ret, handle)
	if err == nil {
		pubkey = ByteData{hex: schnorrPubkey}
	}
	return pubkey, parity, err
}

// TweakAddKeyPair This function return a schnorr's pubkey.
func (obj *SchnorrUtil) TweakAddKeyPair(key, tweak ByteData) (pubkey ByteData, parity bool, privkey ByteData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var tweakedPubkey string
	var tweakedPrivkey string
	ret := CfdSchnorrKeyPairTweakAdd(handle, key.ToHex(), tweak.ToHex(), &tweakedPubkey, &parity, &tweakedPrivkey)
	err = convertCfdError(ret, handle)
	if err == nil {
		pubkey = ByteData{hex: tweakedPubkey}
		privkey = ByteData{hex: tweakedPrivkey}
	}
	return pubkey, parity, privkey, err
}

// TweakAddPubkey This function return a schnorr's pubkey.
func (obj *SchnorrUtil) TweakAddPubkey(key, tweak ByteData) (pubkey ByteData, parity bool, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var tweakedPubkey string
	ret := CfdSchnorrPubkeyTweakAdd(handle, key.ToHex(), tweak.ToHex(), &tweakedPubkey, &parity)
	err = convertCfdError(ret, handle)
	if err == nil {
		pubkey = ByteData{hex: tweakedPubkey}
	}
	return pubkey, parity, err
}

// IsTweakedPubkey This function return a tweaked flag.
func (obj *SchnorrUtil) IsTweakedPubkey(key ByteData, parity bool, basePubkey, tweak ByteData) (isTweaked bool, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdCheckTweakAddFromSchnorrPubkey(handle, key.ToHex(), parity, basePubkey.ToHex(), tweak.ToHex())
	if ret == (int)(KCfdSuccess) {
		isTweaked = true
	} else if ret == (int)(KCfdSignVerificationError) {
		isTweaked = false
	} else {
		err = convertCfdError(ret, handle)
	}
	return isTweaked, err
}

// Sign This function return a schnorr's signature.
func (obj *SchnorrUtil) Sign(msg, secretKey, auxRand ByteData) (signature ByteData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var schnorrSignature string
	ret := CfdSignSchnorr(handle, msg.ToHex(), secretKey.ToHex(), auxRand.ToHex(), &schnorrSignature)
	err = convertCfdError(ret, handle)
	if err == nil {
		signature = ByteData{hex: schnorrSignature}
	}
	return signature, err
}

// SignWithNonce This function return a schnorr's signature with nonce.
func (obj *SchnorrUtil) SignWithNonce(msg, secretKey, nonce ByteData) (signature ByteData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var schnorrSignature string
	ret := CfdSignSchnorrWithNonce(handle, msg.ToHex(), secretKey.ToHex(), nonce.ToHex(), &schnorrSignature)
	err = convertCfdError(ret, handle)
	if err == nil {
		signature = ByteData{hex: schnorrSignature}
	}
	return signature, err
}

// ComputeSigPoint This function return a sig-point.
func (obj *SchnorrUtil) ComputeSigPoint(msg, nonce, pubkey ByteData) (sigPoint ByteData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var point string
	ret := CfdComputeSchnorrSigPoint(handle, msg.ToHex(), nonce.ToHex(), pubkey.ToHex(), &point)
	err = convertCfdError(ret, handle)
	if err == nil {
		sigPoint = ByteData{hex: point}
	}
	return sigPoint, err
}

// Verify This function verify a schnorr's signature.
func (obj *SchnorrUtil) Verify(signature, msg, pubkey ByteData) (isVerify bool, err error) {
	isVerify = false
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdVerifySchnorr(handle, signature.ToHex(), msg.ToHex(), pubkey.ToHex())
	if ret == (int)(KCfdSuccess) {
		isVerify = true
	} else if ret == (int)(KCfdSignVerificationError) {
		isVerify = false
	} else {
		err = convertCfdError(ret, handle)
	}
	return isVerify, err
}

// SplitSignature This function return schnorr nonce and schnorr privkey.
func (obj *SchnorrUtil) SplitSignature(signature ByteData) (nonce, key ByteData, err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	var schnorrNonce string
	var privkey string
	ret := CfdSplitSchnorrSignature(handle, signature.ToHex(), &schnorrNonce, &privkey)
	err = convertCfdError(ret, handle)
	if err == nil {
		nonce = ByteData{hex: schnorrNonce}
		key = ByteData{hex: privkey}
	}
	return nonce, key, err
}

// refine API ------------------------------------------------------------------

/**
 * TransactionData data struct.
 */
type TransactionData struct {
	// txid
	Txid string
	// witness txid
	Wtxid string
	// witness hash
	WitHash string
	// size
	Size uint32
	// virtual size
	Vsize uint32
	// weight
	Weight uint32
	// version
	Version uint32
	// locktime
	LockTime uint32
}

// InitializeTransaction : initialize createrawtransaction with version & locktime.
// param: networkType      nettype string. (mainnet/testnet/regtest)
// param: version          transaction version.
// param: locktime         transaction locking time.
// return: createTxHandle  handle of createrawtransaction.
// return: err             error
func InitializeTransaction(networkType int, version uint32, locktime uint32) (createTxHandle uintptr, err error) {
	createTxHandle = uintptr(0)
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&locktime)))
	ret := CfdInitializeTransaction(handle, networkType, versionPtr, locktimePtr, "", &createTxHandle)
	err = convertCfdError(ret, handle)
	return createTxHandle, err
}

// InitializeTransactionByHex : initialize createrawtransaction with hex.
// param: networkType      nettype string. (mainnet/testnet/regtest)
// param: txHex            transaction hex.
// return: createTxHandle  handle of createrawtransaction.
// return: err             error
func InitializeTransactionByHex(networkType int, txHex string) (createTxHandle uintptr, err error) {
	createTxHandle = uintptr(0)
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	version := 0
	locktime := 0
	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&locktime)))
	ret := CfdInitializeTransaction(handle, networkType, versionPtr, locktimePtr, txHex, &createTxHandle)
	err = convertCfdError(ret, handle)
	return createTxHandle, err
}

// AddTransactionInput : add createrawtransaction input data. (bitcoin, elements)
// param: createTxHandle   handle of createrawtransaction.
// param: txid             txid of utxo.
// param: vout             vout of utxo.
// param: sequence         sequence number.
// return: err             error
func AddTransactionInput(createTxHandle uintptr, txid string, vout uint32, sequence uint32) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&vout)))
	sequencePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&sequence)))
	ret := CfdAddTransactionInput(handle, createTxHandle, txid, voutPtr, sequencePtr)
	err = convertCfdError(ret, handle)
	return err
}

// AddTransactionInput : add createrawtransaction output data. (bitcoin, elements)
// param: createTxHandle   handle of createrawtransaction.
// param: amount           satoshi amount.
// param: address          address.
// param: lockingScript    locking script. (ignore address)
// param: asset            target asset. (only elements)
// return: err             error
func AddTransactionOutput(createTxHandle uintptr, amount int64, address string, lockingScript string, asset string) (err error) {
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	amountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&amount)))
	ret := CfdAddTransactionOutput(handle, createTxHandle, amountPtr, address, lockingScript, asset)
	err = convertCfdError(ret, handle)
	return err
}

// FinalizeTransaction : finalize createrawtransaction. (bitcoin, elements)
// param: createTxHandle   handle of createrawtransaction.
// return: txHex           transaction hex.
// return: err             error
func FinalizeTransaction(createTxHandle uintptr) (txHex string, err error) {
	txHex = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	ret := CfdFinalizeTransaction(handle, createTxHandle, &txHex)
	err = convertCfdError(ret, handle)
	return txHex, err
}

// FreeTransactionHandle : free createrawtransaction handle.
// param: createTxHandle   handle of createrawtransaction.
func FreeTransactionHandle(createTxHandle uintptr) {
	CfdFreeTransactionHandle(uintptr(0), createTxHandle)
}

// OutPoint : utxo outpoint struct.
type OutPoint struct {
	// txid
	Txid string
	// vout
	Vout uint32
}

// ScriptWitness : witness stack.
type ScriptWitness struct {
	// witness stack by hex.
	Stack []string
}

// TxIn : transaction input.
type TxIn struct {
	// utxo outpoint.
	OutPoint OutPoint
	// sequence number.
	Sequence uint32
	// script sig.
	ScriptSig string
	// witness stack.
	WitnessStack ScriptWitness
}

// TxOut : transaction output.
type TxOut struct {
	// satoshi amount.
	Amount int64
	// locking script.
	LockingScript string
	// address (if locking script is usual hashtype.)
	Address string
}

// IssuanceData : confidential transaction issuance input.
type IssuanceData struct {
	Entropy     string
	Nonce       string
	AssetAmount int64
	AssetValue  string
	TokenAmount int64
	TokenValue  string
}

// ConfidentialTxIn : confidential transaction input.
type ConfidentialTxIn struct {
	OutPoint                 OutPoint
	Sequence                 uint32
	ScriptSig                string
	Issuance                 IssuanceData
	WitnessStack             ScriptWitness
	PeginWitness             ScriptWitness
	IssuanceAmountRangeproof string
	InflationKeysRangeproof  string
}

// ConfidentialTxOut : confidential transaction output.
type ConfidentialTxOut struct {
	// satoshi amount (unblind value)
	Amount int64
	// asset (or commitment asset)
	Asset string
	// locking script
	LockingScript string
	// address or confidential address. (if locking script is usual hashtype.)
	Address string
	// commitment value
	CommitmentValue string
	// commitment nonce
	CommitmentNonce string
	// surjectionprooof of asset
	Surjectionproof string
	// rangeproof of value
	Rangeproof string
}

// CreateConfidentialTx : create confidential transaction.
// param: version       transaction version.
// param: locktime      transaction locking time.
// param: txinList      transaction input list.
// param: txoutList     transaction output list.
// return: outputTxHex  transaction hex.
// return: err          error
func CreateConfidentialTx(version uint32, locktime uint32, txinList []ConfidentialTxIn, txoutList []ConfidentialTxOut) (outputTxHex string, err error) {
	outputTxHex = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	networkType := int(KCfdNetworkLiquidv1)
	createTxHandle := uintptr(0)
	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&locktime)))
	ret := CfdInitializeTransaction(handle, networkType, versionPtr, locktimePtr, "", &createTxHandle)
	if ret != int(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	defer CfdFreeTransactionHandle(handle, createTxHandle)

	for i := 0; i < len(txinList); i++ {
		voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinList[i].OutPoint.Vout)))
		sequencePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinList[i].Sequence)))
		ret = CfdAddTransactionInput(handle, createTxHandle, txinList[i].OutPoint.Txid, voutPtr, sequencePtr)
		if ret != int(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	for i := 0; i < len(txoutList); i++ {
		amountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&txoutList[i].Amount)))
		if txoutList[i].Address == "" {
			ret = CfdAddTransactionOutput(handle, createTxHandle, amountPtr, "", txoutList[i].LockingScript, txoutList[i].Asset)
		} else {
			ret = CfdAddTransactionOutput(handle, createTxHandle, amountPtr, txoutList[i].Address, "", txoutList[i].Asset)
		}
		if ret != int(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	ret = CfdFinalizeTransaction(handle, createTxHandle, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

// AppendConfidentialTx : append confidential transaction.
// param: txHex         transaction hex.
// param: txinList      transaction input list.
// param: txoutList     transaction output list.
// return: outputTxHex  transaction hex.
// return: err          error
func AppendConfidentialTx(txHex string, txinList []ConfidentialTxIn, txoutList []ConfidentialTxOut) (outputTxHex string, err error) {
	outputTxHex = ""
	handle, err := CfdGoCreateHandle()
	if err != nil {
		return
	}
	defer CfdGoFreeHandle(handle)

	networkType := int(KCfdNetworkLiquidv1)
	createTxHandle := uintptr(0)
	version := 0
	locktime := 0
	versionPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&version)))
	locktimePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&locktime)))
	ret := CfdInitializeTransaction(handle, networkType, versionPtr, locktimePtr, txHex, &createTxHandle)
	if ret != int(KCfdSuccess) {
		err = convertCfdError(ret, handle)
		return
	}
	defer CfdFreeTransactionHandle(handle, createTxHandle)

	for i := 0; i < len(txinList); i++ {
		voutPtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinList[i].OutPoint.Vout)))
		sequencePtr := SwigcptrUint32_t(uintptr(unsafe.Pointer(&txinList[i].Sequence)))
		ret = CfdAddTransactionInput(handle, createTxHandle, txinList[i].OutPoint.Txid, voutPtr, sequencePtr)
		if ret != int(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	for i := 0; i < len(txoutList); i++ {
		amountPtr := SwigcptrInt64_t(uintptr(unsafe.Pointer(&txoutList[i].Amount)))
		if txoutList[i].Address == "" {
			ret = CfdAddTransactionOutput(handle, createTxHandle, amountPtr, "", txoutList[i].LockingScript, txoutList[i].Asset)
		} else {
			ret = CfdAddTransactionOutput(handle, createTxHandle, amountPtr, txoutList[i].Address, "", txoutList[i].Asset)
		}
		if ret != int(KCfdSuccess) {
			err = convertCfdError(ret, handle)
			return
		}
	}

	ret = CfdFinalizeTransaction(handle, createTxHandle, &outputTxHex)
	err = convertCfdError(ret, handle)
	return outputTxHex, err
}

func GetBitcoinTransactionData(txHex string, hasWitness bool) (data TransactionData, txinList []TxIn, txoutList []TxOut, err error) {
	data, txinList, txoutList, err = GetTransactionDataAll(txHex, hasWitness, false, int(KCfdNetworkMainnet))
	return
}

func GetTransactionDataAll(txHex string, hasWitness bool, hasAddress bool, networkType int) (data TransactionData, txinList []TxIn, txoutList []TxOut, err error) {
	handle, err := CfdGoInitializeTxDataHandle(networkType, txHex)
	if err != nil {
		return
	}
	defer CfdGoFreeTxDataHandle(handle)

	tempData, err := CfdGoGetTxInfoByHandle(handle)
	if err != nil {
		return data, txinList, txoutList, err
	}
	txinCount, err := CfdGoGetTxInCountByHandle(handle)
	if err != nil {
		return data, txinList, txoutList, err
	}
	txoutCount, err := CfdGoGetTxOutCountByHandle(handle)
	if err != nil {
		return data, txinList, txoutList, err
	}

	tempTxins := make([]TxIn, txinCount, txinCount)
	for i := uint32(0); i < txinCount; i++ {
		txid, vout, sequence, scriptSig, err := CfdGoGetTxInByHandle(handle, i)
		if err != nil {
			return data, txinList, txoutList, err
		}

		tempTxins[i].OutPoint.Txid = txid
		tempTxins[i].OutPoint.Vout = vout
		tempTxins[i].Sequence = sequence
		tempTxins[i].ScriptSig = scriptSig
		if hasWitness {
			wCount, err := CfdGoGetTxInWitnessCountByHandle(handle, 0, i)
			if err != nil {
				return data, txinList, txoutList, err
			}
			wList := make([]string, txinCount, txinCount)
			for j := uint32(0); j < wCount; j++ {
				stackData, err := CfdGoGetTxInWitnessByHandle(handle, 0, i, j)
				if err != nil {
					return data, txinList, txoutList, err
				}
				wList[j] = stackData
			}
			tempTxins[i].WitnessStack.Stack = wList
		}
	}

	tempTxouts := make([]TxOut, txoutCount, txoutCount)
	for i := uint32(0); i < txoutCount; i++ {
		satoshiAmount, lockingScript, _, err := CfdGoGetTxOutByHandle(handle, i)
		if err != nil {
			return data, txinList, txoutList, err
		}
		tempTxouts[i].Amount = satoshiAmount
		tempTxouts[i].LockingScript = lockingScript
		if hasAddress {
			addr, err := CfdGoGetAddressFromLockingScript(lockingScript, networkType)
			if err != nil {
				return data, txinList, txoutList, err
			}
			tempTxouts[i].Address = addr
		}
	}

	data.Txid = tempData.Txid
	data.Wtxid = tempData.Wtxid
	data.Size = tempData.Size
	data.Vsize = tempData.Vsize
	data.Weight = tempData.Weight
	data.Version = tempData.Version
	data.LockTime = tempData.LockTime
	txinList = tempTxins
	txoutList = tempTxouts
	return data, txinList, txoutList, nil
}

func GetConfidentialTxData(txHex string, hasWitness bool) (data TransactionData, txinList []ConfidentialTxIn, txoutList []ConfidentialTxOut, err error) {
	data, txinList, txoutList, err = GetConfidentialTxDataAll(txHex, hasWitness, false, int(KCfdNetworkLiquidv1))
	return
}

func GetConfidentialTxDataAll(txHex string, hasWitness bool, hasAddress bool, networkType int) (data TransactionData, txinList []ConfidentialTxIn, txoutList []ConfidentialTxOut, err error) {
	handle, err := CfdGoInitializeTxDataHandle(networkType, txHex)
	if err != nil {
		return data, txinList, txoutList, err
	}
	defer CfdGoFreeTxDataHandle(handle)

	tempData, err := CfdGoGetConfidentialTxDataByHandle(handle)
	if err != nil {
		return data, txinList, txoutList, err
	}
	txinCount, err := CfdGoGetTxInCountByHandle(handle)
	if err != nil {
		return data, txinList, txoutList, err
	}
	txoutCount, err := CfdGoGetTxOutCountByHandle(handle)
	if err != nil {
		return data, txinList, txoutList, err
	}

	tempTxins := make([]ConfidentialTxIn, txinCount, txinCount)
	for i := uint32(0); i < txinCount; i++ {
		txid, vout, sequence, scriptSig, err := CfdGoGetTxInByHandle(handle, i)
		if err != nil {
			return data, txinList, txoutList, err
		}

		entropy, nonce, assetAmount, assetValue, tokenAmount, tokenValue, assetRangeproof, tokenRangeproof, err := CfdGoGetTxInIssuanceInfoByHandle(handle, i)
		if err != nil {
			return data, txinList, txoutList, err
		}

		tempTxins[i].OutPoint.Txid = txid
		tempTxins[i].OutPoint.Vout = vout
		tempTxins[i].Sequence = sequence
		tempTxins[i].ScriptSig = scriptSig
		if len(assetValue) > 2 {
			tempTxins[i].Issuance.Entropy = entropy
			tempTxins[i].Issuance.Nonce = nonce
			tempTxins[i].Issuance.AssetAmount = assetAmount
			tempTxins[i].Issuance.AssetValue = assetValue
			tempTxins[i].Issuance.TokenAmount = tokenAmount
			tempTxins[i].Issuance.TokenValue = tokenValue
			if hasWitness {
				tempTxins[i].IssuanceAmountRangeproof = assetRangeproof
				tempTxins[i].InflationKeysRangeproof = tokenRangeproof
			}
		}

		if hasWitness {
			wCount, err := CfdGoGetTxInWitnessCountByHandle(handle, 0, i)
			if err != nil {
				return data, txinList, txoutList, err
			}
			wList := make([]string, txinCount, txinCount)
			for j := uint32(0); j < wCount; j++ {
				stackData, err := CfdGoGetTxInWitnessByHandle(handle, 0, i, j)
				if err != nil {
					return data, txinList, txoutList, err
				}
				wList[j] = stackData
			}
			tempTxins[i].WitnessStack.Stack = wList

			pCount, err := CfdGoGetTxInWitnessCountByHandle(handle, 1, i)
			if err != nil {
				return data, txinList, txoutList, err
			}
			pList := make([]string, pCount, pCount)
			for j := uint32(0); j < wCount; j++ {
				stackData, err := CfdGoGetTxInWitnessByHandle(handle, 1, i, j)
				if err != nil {
					return data, txinList, txoutList, err
				}
				wList[j] = stackData
			}
			tempTxins[i].PeginWitness.Stack = pList
		}
	}

	tempTxouts := make([]ConfidentialTxOut, txoutCount, txoutCount)
	for i := uint32(0); i < txoutCount; i++ {
		var lockingScript string

		if hasWitness {
			asset, satoshiAmount, valueCommitment, nonce, lockingScript, surjectionProof, rangeproof, err := CfdGoGetConfidentialTxOutByHandle(handle, i)
			if err != nil {
				return data, txinList, txoutList, err
			}
			tempTxouts[i].Amount = satoshiAmount
			tempTxouts[i].Asset = asset
			tempTxouts[i].CommitmentValue = valueCommitment
			tempTxouts[i].CommitmentNonce = nonce
			tempTxouts[i].LockingScript = lockingScript
			tempTxouts[i].Surjectionproof = surjectionProof
			tempTxouts[i].Rangeproof = rangeproof
		} else {
			asset, satoshiAmount, valueCommitment, nonce, lockingScript, err := CfdGoGetConfidentialTxOutSimpleByHandle(handle, i)
			if err != nil {
				return data, txinList, txoutList, err
			}
			tempTxouts[i].Amount = satoshiAmount
			tempTxouts[i].Asset = asset
			tempTxouts[i].CommitmentValue = valueCommitment
			tempTxouts[i].CommitmentNonce = nonce
			tempTxouts[i].LockingScript = lockingScript
		}
		if hasAddress {
			addr, err := CfdGoGetAddressFromLockingScript(lockingScript, networkType)
			if err != nil {
				return data, txinList, txoutList, err
			}
			tempTxouts[i].Address = addr
		}
	}

	data.Txid = tempData.Txid
	data.Wtxid = tempData.Wtxid
	data.WitHash = tempData.WitHash
	data.Size = tempData.Size
	data.Vsize = tempData.Vsize
	data.Weight = tempData.Weight
	data.Version = tempData.Version
	data.LockTime = tempData.LockTime
	txinList = tempTxins
	txoutList = tempTxouts
	return data, txinList, txoutList, nil
}



type SwigcptrUint64_t uintptr
type Uint64_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint64_t) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrUint32_t uintptr
type Uint32_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint32_t) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrInt64_t uintptr
type Int64_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrInt64_t) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrInt32_t uintptr
type Int32_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrInt32_t) Swigcptr() uintptr {
	return uintptr(p)
}

